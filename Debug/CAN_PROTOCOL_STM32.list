
CAN_PROTOCOL_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e64  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08006038  08006038  00007038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006438  08006438  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006438  08006438  00007438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006440  08006440  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006440  08006440  00007440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006444  08006444  00007444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006448  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001d4  0800661c  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  0800661c  000083dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000708c  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001887  00000000  00000000  0000f290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  00010b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004fb  00000000  00000000  000111e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d99  00000000  00000000  000116e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000862f  00000000  00000000  0003347c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca27d  00000000  00000000  0003baab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105d28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a98  00000000  00000000  00105d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00108804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800601c 	.word	0x0800601c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800601c 	.word	0x0800601c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <Decode_CAN_Message>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Decode_CAN_Message(uint8_t *data) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    // Decode Pack Current (Byte 0 and Byte 1)
    uint16_t packCurrentRaw = (data[0] << 8) | data[1]; // Combine bytes using left shift
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	84fb      	strh	r3, [r7, #38]	@ 0x26
    float packCurrent = packCurrentRaw * 0.1;           // Apply scaling factor (resolution: 0.1 A)
 8000f96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fae3 	bl	8000564 <__aeabi_i2d>
 8000f9e:	a33f      	add	r3, pc, #252	@ (adr r3, 800109c <Decode_CAN_Message+0x124>)
 8000fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa4:	f7ff fb48 	bl	8000638 <__aeabi_dmul>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f7ff fe1a 	bl	8000be8 <__aeabi_d2f>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	623b      	str	r3, [r7, #32]

    // Decode Average Temperature (Byte 2 and Byte 3)
    uint16_t averageTempRaw = (data[2] << 8) | data[3]; // Combine bytes using left shift
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3302      	adds	r3, #2
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3303      	adds	r3, #3
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	83fb      	strh	r3, [r7, #30]
    float averageTemperature = averageTempRaw * 0.1;    // Apply scaling factor (resolution: 0.1 °C)
 8000fd0:	8bfb      	ldrh	r3, [r7, #30]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fac6 	bl	8000564 <__aeabi_i2d>
 8000fd8:	a330      	add	r3, pc, #192	@ (adr r3, 800109c <Decode_CAN_Message+0x124>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fb2b 	bl	8000638 <__aeabi_dmul>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fdfd 	bl	8000be8 <__aeabi_d2f>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	61bb      	str	r3, [r7, #24]

    // Decode Pack SOC (Byte 4)
    uint8_t packSOC = data[4];                          // Direct value (percentage, no scaling specified)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	791b      	ldrb	r3, [r3, #4]
 8000ff6:	75fb      	strb	r3, [r7, #23]

    // Decode Pack Inst. Voltage (Byte 5 and Byte 6)
    uint16_t packVoltageRaw = (data[5] << 8) | data[6]; // Combine bytes using left shift
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3305      	adds	r3, #5
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b21a      	sxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3306      	adds	r3, #6
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21b      	sxth	r3, r3
 800100e:	82bb      	strh	r3, [r7, #20]
    float packVoltage = packVoltageRaw * 0.1;           // Apply scaling factor (resolution: 0.1 V)
 8001010:	8abb      	ldrh	r3, [r7, #20]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff faa6 	bl	8000564 <__aeabi_i2d>
 8001018:	a320      	add	r3, pc, #128	@ (adr r3, 800109c <Decode_CAN_Message+0x124>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff fb0b 	bl	8000638 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fddd 	bl	8000be8 <__aeabi_d2f>
 800102e:	4603      	mov	r3, r0
 8001030:	613b      	str	r3, [r7, #16]

    // Decode Max Cell Number (Byte 7)
    uint8_t maxCellNumber = data[7];                    // Direct value (no scaling specified)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	79db      	ldrb	r3, [r3, #7]
 8001036:	73fb      	strb	r3, [r7, #15]

    // Print decoded values
    printf("Pack Current: %.1f A\n", packCurrent);
 8001038:	6a38      	ldr	r0, [r7, #32]
 800103a:	f7ff faa5 	bl	8000588 <__aeabi_f2d>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4811      	ldr	r0, [pc, #68]	@ (8001088 <Decode_CAN_Message+0x110>)
 8001044:	f003 f872 	bl	800412c <iprintf>
    printf("Average Temperature: %.1f °C\n", averageTemperature);
 8001048:	69b8      	ldr	r0, [r7, #24]
 800104a:	f7ff fa9d 	bl	8000588 <__aeabi_f2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	480e      	ldr	r0, [pc, #56]	@ (800108c <Decode_CAN_Message+0x114>)
 8001054:	f003 f86a 	bl	800412c <iprintf>
    printf("Pack SOC: %d %%\n", packSOC);
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	4619      	mov	r1, r3
 800105c:	480c      	ldr	r0, [pc, #48]	@ (8001090 <Decode_CAN_Message+0x118>)
 800105e:	f003 f865 	bl	800412c <iprintf>
    printf("Pack Voltage: %.1f V\n", packVoltage);
 8001062:	6938      	ldr	r0, [r7, #16]
 8001064:	f7ff fa90 	bl	8000588 <__aeabi_f2d>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4809      	ldr	r0, [pc, #36]	@ (8001094 <Decode_CAN_Message+0x11c>)
 800106e:	f003 f85d 	bl	800412c <iprintf>
    printf("Max Cell Number: %d\n", maxCellNumber);
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	4619      	mov	r1, r3
 8001076:	4808      	ldr	r0, [pc, #32]	@ (8001098 <Decode_CAN_Message+0x120>)
 8001078:	f003 f858 	bl	800412c <iprintf>
}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	@ 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	f3af 8000 	nop.w
 8001088:	08006038 	.word	0x08006038
 800108c:	08006050 	.word	0x08006050
 8001090:	08006070 	.word	0x08006070
 8001094:	08006084 	.word	0x08006084
 8001098:	0800609c 	.word	0x0800609c
 800109c:	9999999a 	.word	0x9999999a
 80010a0:	3fb99999 	.word	0x3fb99999

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();//Reset peripherals, Flash interface and Systick
 80010a8:	f000 fb9c 	bl	80017e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();//Configures system clock
 80010ac:	f000 f810 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();//Initialize GPIO and CAN peripherals
 80010b0:	f000 f8f4 	bl	800129c <MX_GPIO_Init>
  MX_CAN1_Init();
 80010b4:	f000 f878 	bl	80011a8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING);//Enables CAN interrups when messages arrive in FIFO1
 80010b8:	2112      	movs	r1, #18
 80010ba:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <main+0x24>)
 80010bc:	f001 f816 	bl	80020ec <HAL_CAN_ActivateNotification>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Decode_CAN_Message(RxData);
 80010c0:	4802      	ldr	r0, [pc, #8]	@ (80010cc <main+0x28>)
 80010c2:	f7ff ff59 	bl	8000f78 <Decode_CAN_Message>
 80010c6:	e7fb      	b.n	80010c0 <main+0x1c>
 80010c8:	200001f0 	.word	0x200001f0
 80010cc:	20000280 	.word	0x20000280

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b094      	sub	sp, #80	@ 0x50
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	2234      	movs	r2, #52	@ 0x34
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 f879 	bl	80041d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	4b29      	ldr	r3, [pc, #164]	@ (80011a0 <SystemClock_Config+0xd0>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fc:	4a28      	ldr	r2, [pc, #160]	@ (80011a0 <SystemClock_Config+0xd0>)
 80010fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001102:	6413      	str	r3, [r2, #64]	@ 0x40
 8001104:	4b26      	ldr	r3, [pc, #152]	@ (80011a0 <SystemClock_Config+0xd0>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001110:	2300      	movs	r3, #0
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	4b23      	ldr	r3, [pc, #140]	@ (80011a4 <SystemClock_Config+0xd4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800111c:	4a21      	ldr	r2, [pc, #132]	@ (80011a4 <SystemClock_Config+0xd4>)
 800111e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <SystemClock_Config+0xd4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001130:	2301      	movs	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001134:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001138:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113a:	2302      	movs	r3, #2
 800113c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001142:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001144:	2304      	movs	r3, #4
 8001146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001148:	2354      	movs	r3, #84	@ 0x54
 800114a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800114c:	2302      	movs	r3, #2
 800114e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001150:	2302      	movs	r3, #2
 8001152:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001154:	2302      	movs	r3, #2
 8001156:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4618      	mov	r0, r3
 800115e:	f002 f82d 	bl	80031bc <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001168:	f000 f922 	bl	80013b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800117c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	2102      	movs	r1, #2
 8001188:	4618      	mov	r0, r3
 800118a:	f001 fd01 	bl	8002b90 <HAL_RCC_ClockConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001194:	f000 f90c 	bl	80013b0 <Error_Handler>
  }
}
 8001198:	bf00      	nop
 800119a:	3750      	adds	r7, #80	@ 0x50
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40007000 	.word	0x40007000

080011a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;//For mulitple CAN we use hcan2
 80011ac:	4b36      	ldr	r3, [pc, #216]	@ (8001288 <MX_CAN1_Init+0xe0>)
 80011ae:	4a37      	ldr	r2, [pc, #220]	@ (800128c <MX_CAN1_Init+0xe4>)
 80011b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;//Controls CAN bit timing(baud rate).
 80011b2:	4b35      	ldr	r3, [pc, #212]	@ (8001288 <MX_CAN1_Init+0xe0>)
 80011b4:	2210      	movs	r2, #16
 80011b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;//Open declaration to see info about multiple modes
 80011b8:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <MX_CAN1_Init+0xe0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;//detects timing error
 80011be:	4b32      	ldr	r3, [pc, #200]	@ (8001288 <MX_CAN1_Init+0xe0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;//Synchronizes nodes-> how long the data bits are sampled
 80011c4:	4b30      	ldr	r3, [pc, #192]	@ (8001288 <MX_CAN1_Init+0xe0>)
 80011c6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;//Defines post-sampling timing handle phase errors
 80011cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001288 <MX_CAN1_Init+0xe0>)
 80011ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80011d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;//Check if BMS and MC expects timestamps
 80011d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001288 <MX_CAN1_Init+0xe0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;//If enabled, the MCU auto. retries after a cool-down period
 80011da:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <MX_CAN1_Init+0xe0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;// For power saving, get's enabled only if CAN-traffic is incoming
 80011e0:	4b29      	ldr	r3, [pc, #164]	@ (8001288 <MX_CAN1_Init+0xe0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;// Auto. retries failed transmission
 80011e6:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <MX_CAN1_Init+0xe0>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;// Blocks new messages when FIFO is full. Must be disabled to refresh data if BMS sends data fast
 80011ec:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <MX_CAN1_Init+0xe0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;// If enabled smaller IDs transmit first..
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <MX_CAN1_Init+0xe0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011f8:	4823      	ldr	r0, [pc, #140]	@ (8001288 <MX_CAN1_Init+0xe0>)
 80011fa:	f000 fb65 	bl	80018c8 <HAL_CAN_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001204:	f000 f8d4 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  RxHeader.IDE=CAN_ID_EXT;
 8001208:	4b21      	ldr	r3, [pc, #132]	@ (8001290 <MX_CAN1_Init+0xe8>)
 800120a:	2204      	movs	r2, #4
 800120c:	609a      	str	r2, [r3, #8]
  RxHeader.ExtId=0x10000010;
 800120e:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <MX_CAN1_Init+0xe8>)
 8001210:	4a20      	ldr	r2, [pc, #128]	@ (8001294 <MX_CAN1_Init+0xec>)
 8001212:	605a      	str	r2, [r3, #4]
  RxHeader.RTR=CAN_RTR_DATA;
 8001214:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <MX_CAN1_Init+0xe8>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  RxHeader.DLC=8;
 800121a:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <MX_CAN1_Init+0xe8>)
 800121c:	2208      	movs	r2, #8
 800121e:	611a      	str	r2, [r3, #16]


Scanfilter.FilterActivation=CAN_FILTER_ENABLE;
 8001220:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <MX_CAN1_Init+0xf0>)
 8001222:	2201      	movs	r2, #1
 8001224:	621a      	str	r2, [r3, #32]
Scanfilter.FilterBank=0;//Each filter holds one or more filter banks
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <MX_CAN1_Init+0xf0>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
Scanfilter.FilterFIFOAssignment=CAN_FILTER_FIFO0;//Incoming messages go to FIFO0. Stm32 has 2 FIFO lines with FIFO0 having higher priority.
 800122c:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <MX_CAN1_Init+0xf0>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
Scanfilter.FilterIdHigh = (0x10000010 >> 13) & 0xFFFF;
 8001232:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <MX_CAN1_Init+0xf0>)
 8001234:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001238:	601a      	str	r2, [r3, #0]
Scanfilter.FilterIdLow = ((0x10000010 << 3) & 0xFFFF) | (1 << 2); // Set IDE bit//Stays 0 for standard IDs but for 29 bits both high and low hold the ID together
 800123a:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <MX_CAN1_Init+0xf0>)
 800123c:	2284      	movs	r2, #132	@ 0x84
 800123e:	605a      	str	r2, [r3, #4]
Scanfilter.FilterMaskIdHigh=0xFFFF;;//Specifies which ID to accept(ID must match entirely)
 8001240:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <MX_CAN1_Init+0xf0>)
 8001242:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001246:	609a      	str	r2, [r3, #8]
Scanfilter.FilterMaskIdLow=0xFFFF;//Ignores the low part entirely
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <MX_CAN1_Init+0xf0>)
 800124a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800124e:	60da      	str	r2, [r3, #12]
Scanfilter.FilterMode=CAN_FILTERMODE_IDMASK;//Better  for ranges
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_CAN1_Init+0xf0>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
Scanfilter.FilterScale=CAN_FILTERSCALE_32BIT;//Better for specific IDs
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <MX_CAN1_Init+0xf0>)
 8001258:	2201      	movs	r2, #1
 800125a:	61da      	str	r2, [r3, #28]
Scanfilter.SlaveStartFilterBank=14;//defines where CAN2 filter 2 start
 800125c:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_CAN1_Init+0xf0>)
 800125e:	220e      	movs	r2, #14
 8001260:	625a      	str	r2, [r3, #36]	@ 0x24

if(HAL_CAN_ConfigFilter(&hcan1, &Scanfilter)!=HAL_OK){//To process only relevant messages
 8001262:	490d      	ldr	r1, [pc, #52]	@ (8001298 <MX_CAN1_Init+0xf0>)
 8001264:	4808      	ldr	r0, [pc, #32]	@ (8001288 <MX_CAN1_Init+0xe0>)
 8001266:	f000 fc2b 	bl	8001ac0 <HAL_CAN_ConfigFilter>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_CAN1_Init+0xcc>
	Error_Handler();
 8001270:	f000 f89e 	bl	80013b0 <Error_Handler>
}
if(HAL_CAN_Start(&hcan1)!=HAL_OK){
 8001274:	4804      	ldr	r0, [pc, #16]	@ (8001288 <MX_CAN1_Init+0xe0>)
 8001276:	f000 fd03 	bl	8001c80 <HAL_CAN_Start>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_CAN1_Init+0xdc>
	Error_Handler();
 8001280:	f000 f896 	bl	80013b0 <Error_Handler>
}

  /* USER CODE END CAN1_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200001f0 	.word	0x200001f0
 800128c:	40006400 	.word	0x40006400
 8001290:	20000240 	.word	0x20000240
 8001294:	10000010 	.word	0x10000010
 8001298:	20000218 	.word	0x20000218

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)//
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	@ 0x28
 80012a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b31      	ldr	r3, [pc, #196]	@ (800137c <MX_GPIO_Init+0xe0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a30      	ldr	r2, [pc, #192]	@ (800137c <MX_GPIO_Init+0xe0>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b2e      	ldr	r3, [pc, #184]	@ (800137c <MX_GPIO_Init+0xe0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b2a      	ldr	r3, [pc, #168]	@ (800137c <MX_GPIO_Init+0xe0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a29      	ldr	r2, [pc, #164]	@ (800137c <MX_GPIO_Init+0xe0>)
 80012d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b27      	ldr	r3, [pc, #156]	@ (800137c <MX_GPIO_Init+0xe0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	4b23      	ldr	r3, [pc, #140]	@ (800137c <MX_GPIO_Init+0xe0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	4a22      	ldr	r2, [pc, #136]	@ (800137c <MX_GPIO_Init+0xe0>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fa:	4b20      	ldr	r3, [pc, #128]	@ (800137c <MX_GPIO_Init+0xe0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b1c      	ldr	r3, [pc, #112]	@ (800137c <MX_GPIO_Init+0xe0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a1b      	ldr	r2, [pc, #108]	@ (800137c <MX_GPIO_Init+0xe0>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b19      	ldr	r3, [pc, #100]	@ (800137c <MX_GPIO_Init+0xe0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);//This set according to the configuration done in the IOC file.
 8001322:	2200      	movs	r2, #0
 8001324:	2120      	movs	r1, #32
 8001326:	4816      	ldr	r0, [pc, #88]	@ (8001380 <MX_GPIO_Init+0xe4>)
 8001328:	f001 fbf4 	bl	8002b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800132c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001332:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	4810      	ldr	r0, [pc, #64]	@ (8001384 <MX_GPIO_Init+0xe8>)
 8001344:	f001 fa3a 	bl	80027bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001348:	2320      	movs	r3, #32
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001350:	2302      	movs	r3, #2
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	4808      	ldr	r0, [pc, #32]	@ (8001380 <MX_GPIO_Init+0xe4>)
 8001360:	f001 fa2c 	bl	80027bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	2100      	movs	r1, #0
 8001368:	2028      	movs	r0, #40	@ 0x28
 800136a:	f001 f9f0 	bl	800274e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800136e:	2028      	movs	r0, #40	@ 0x28
 8001370:	f001 fa09 	bl	8002786 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001374:	bf00      	nop
 8001376:	3728      	adds	r7, #40	@ 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800
 8001380:	40020000 	.word	0x40020000
 8001384:	40020800 	.word	0x40020800

08001388 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// When the Rx of MC detects that the message is coming in the RXFIFO0
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0,&RxHeader, RxData);
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8001392:	4a05      	ldr	r2, [pc, #20]	@ (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001394:	2100      	movs	r1, #0
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001398:	f000 fd86 	bl	8001ea8 <HAL_CAN_GetRxMessage>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000280 	.word	0x20000280
 80013a8:	20000240 	.word	0x20000240
 80013ac:	200001f0 	.word	0x200001f0

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <Error_Handler+0x8>

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <HAL_MspInit+0x4c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001408 <HAL_MspInit+0x4c>)
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <HAL_MspInit+0x4c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <HAL_MspInit+0x4c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	4a08      	ldr	r2, [pc, #32]	@ (8001408 <HAL_MspInit+0x4c>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_MspInit+0x4c>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013fa:	2007      	movs	r0, #7
 80013fc:	f001 f99c 	bl	8002738 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800

0800140c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a29      	ldr	r2, [pc, #164]	@ (80014d0 <HAL_CAN_MspInit+0xc4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d14c      	bne.n	80014c8 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b28      	ldr	r3, [pc, #160]	@ (80014d4 <HAL_CAN_MspInit+0xc8>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	4a27      	ldr	r2, [pc, #156]	@ (80014d4 <HAL_CAN_MspInit+0xc8>)
 8001438:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800143c:	6413      	str	r3, [r2, #64]	@ 0x40
 800143e:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <HAL_CAN_MspInit+0xc8>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b21      	ldr	r3, [pc, #132]	@ (80014d4 <HAL_CAN_MspInit+0xc8>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a20      	ldr	r2, [pc, #128]	@ (80014d4 <HAL_CAN_MspInit+0xc8>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b1e      	ldr	r3, [pc, #120]	@ (80014d4 <HAL_CAN_MspInit+0xc8>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001466:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001478:	2309      	movs	r3, #9
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4815      	ldr	r0, [pc, #84]	@ (80014d8 <HAL_CAN_MspInit+0xcc>)
 8001484:	f001 f99a 	bl	80027bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	2013      	movs	r0, #19
 800148e:	f001 f95e 	bl	800274e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001492:	2013      	movs	r0, #19
 8001494:	f001 f977 	bl	8002786 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	2014      	movs	r0, #20
 800149e:	f001 f956 	bl	800274e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80014a2:	2014      	movs	r0, #20
 80014a4:	f001 f96f 	bl	8002786 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	2015      	movs	r0, #21
 80014ae:	f001 f94e 	bl	800274e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80014b2:	2015      	movs	r0, #21
 80014b4:	f001 f967 	bl	8002786 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2016      	movs	r0, #22
 80014be:	f001 f946 	bl	800274e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80014c2:	2016      	movs	r0, #22
 80014c4:	f001 f95f 	bl	8002786 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40006400 	.word	0x40006400
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <NMI_Handler+0x4>

080014e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <MemManage_Handler+0x4>

080014f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <UsageFault_Handler+0x4>

08001504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001532:	f000 f9a9 	bl	8001888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <CAN1_TX_IRQHandler+0x10>)
 8001542:	f000 fdf9 	bl	8002138 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200001f0 	.word	0x200001f0

08001550 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <CAN1_RX0_IRQHandler+0x10>)
 8001556:	f000 fdef 	bl	8002138 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200001f0 	.word	0x200001f0

08001564 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <CAN1_RX1_IRQHandler+0x10>)
 800156a:	f000 fde5 	bl	8002138 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200001f0 	.word	0x200001f0

08001578 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <CAN1_SCE_IRQHandler+0x10>)
 800157e:	f000 fddb 	bl	8002138 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200001f0 	.word	0x200001f0

0800158c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001590:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001594:	f001 fad8 	bl	8002b48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==0){
 8001598:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800159c:	480b      	ldr	r0, [pc, #44]	@ (80015cc <EXTI15_10_IRQHandler+0x40>)
 800159e:	f001 faa1 	bl	8002ae4 <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10e      	bne.n	80015c6 <EXTI15_10_IRQHandler+0x3a>
	  if(TxData[0]==0x03){
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <EXTI15_10_IRQHandler+0x44>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b03      	cmp	r3, #3
		  TxData[0]==0;
	  }
	  HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData, &TxMailbox);
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <EXTI15_10_IRQHandler+0x48>)
 80015b0:	4a07      	ldr	r2, [pc, #28]	@ (80015d0 <EXTI15_10_IRQHandler+0x44>)
 80015b2:	4909      	ldr	r1, [pc, #36]	@ (80015d8 <EXTI15_10_IRQHandler+0x4c>)
 80015b4:	4809      	ldr	r0, [pc, #36]	@ (80015dc <EXTI15_10_IRQHandler+0x50>)
 80015b6:	f000 fba7 	bl	8001d08 <HAL_CAN_AddTxMessage>
	  TxData[0]++;
 80015ba:	4b05      	ldr	r3, [pc, #20]	@ (80015d0 <EXTI15_10_IRQHandler+0x44>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b03      	ldr	r3, [pc, #12]	@ (80015d0 <EXTI15_10_IRQHandler+0x44>)
 80015c4:	701a      	strb	r2, [r3, #0]
  }


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40020800 	.word	0x40020800
 80015d0:	20000278 	.word	0x20000278
 80015d4:	20000274 	.word	0x20000274
 80015d8:	2000025c 	.word	0x2000025c
 80015dc:	200001f0 	.word	0x200001f0

080015e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return 1;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_kill>:

int _kill(int pid, int sig)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015fa:	f002 fe3f 	bl	800427c <__errno>
 80015fe:	4603      	mov	r3, r0
 8001600:	2216      	movs	r2, #22
 8001602:	601a      	str	r2, [r3, #0]
  return -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_exit>:

void _exit (int status)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ffe7 	bl	80015f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001622:	bf00      	nop
 8001624:	e7fd      	b.n	8001622 <_exit+0x12>

08001626 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e00a      	b.n	800164e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001638:	f3af 8000 	nop.w
 800163c:	4601      	mov	r1, r0
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	60ba      	str	r2, [r7, #8]
 8001644:	b2ca      	uxtb	r2, r1
 8001646:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3301      	adds	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	429a      	cmp	r2, r3
 8001654:	dbf0      	blt.n	8001638 <_read+0x12>
  }

  return len;
 8001656:	687b      	ldr	r3, [r7, #4]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e009      	b.n	8001686 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	60ba      	str	r2, [r7, #8]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3301      	adds	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	429a      	cmp	r2, r3
 800168c:	dbf1      	blt.n	8001672 <_write+0x12>
  }
  return len;
 800168e:	687b      	ldr	r3, [r7, #4]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_close>:

int _close(int file)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016c0:	605a      	str	r2, [r3, #4]
  return 0;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_isatty>:

int _isatty(int file)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b085      	sub	sp, #20
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	@ (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f002 fda4 	bl	800427c <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	@ (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20020000 	.word	0x20020000
 8001760:	00000400 	.word	0x00000400
 8001764:	20000288 	.word	0x20000288
 8001768:	200003e0 	.word	0x200003e0

0800176c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <SystemInit+0x20>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001776:	4a05      	ldr	r2, [pc, #20]	@ (800178c <SystemInit+0x20>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001794:	f7ff ffea 	bl	800176c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001798:	480c      	ldr	r0, [pc, #48]	@ (80017cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800179a:	490d      	ldr	r1, [pc, #52]	@ (80017d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800179c:	4a0d      	ldr	r2, [pc, #52]	@ (80017d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a0a      	ldr	r2, [pc, #40]	@ (80017d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b0:	4c0a      	ldr	r4, [pc, #40]	@ (80017dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017be:	f002 fd63 	bl	8004288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c2:	f7ff fc6f 	bl	80010a4 <main>
  bx  lr    
 80017c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017d4:	08006448 	.word	0x08006448
  ldr r2, =_sbss
 80017d8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017dc:	200003dc 	.word	0x200003dc

080017e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC_IRQHandler>
	...

080017e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001824 <HAL_Init+0x40>)
 80017ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <HAL_Init+0x40>)
 80017fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001800:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a07      	ldr	r2, [pc, #28]	@ (8001824 <HAL_Init+0x40>)
 8001806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800180a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180c:	2003      	movs	r0, #3
 800180e:	f000 ff93 	bl	8002738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001812:	2000      	movs	r0, #0
 8001814:	f000 f808 	bl	8001828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001818:	f7ff fdd0 	bl	80013bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023c00 	.word	0x40023c00

08001828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001830:	4b12      	ldr	r3, [pc, #72]	@ (800187c <HAL_InitTick+0x54>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <HAL_InitTick+0x58>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f000 ffab 	bl	80027a2 <HAL_SYSTICK_Config>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e00e      	b.n	8001874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b0f      	cmp	r3, #15
 800185a:	d80a      	bhi.n	8001872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185c:	2200      	movs	r2, #0
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f000 ff73 	bl	800274e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001868:	4a06      	ldr	r2, [pc, #24]	@ (8001884 <HAL_InitTick+0x5c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e000      	b.n	8001874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000000 	.word	0x20000000
 8001880:	20000008 	.word	0x20000008
 8001884:	20000004 	.word	0x20000004

08001888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <HAL_IncTick+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_IncTick+0x24>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <HAL_IncTick+0x24>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000008 	.word	0x20000008
 80018ac:	2000028c 	.word	0x2000028c

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b03      	ldr	r3, [pc, #12]	@ (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2000028c 	.word	0x2000028c

080018c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0ed      	b.n	8001ab6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fd90 	bl	800140c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018fc:	f7ff ffd8 	bl	80018b0 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001902:	e012      	b.n	800192a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001904:	f7ff ffd4 	bl	80018b0 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b0a      	cmp	r3, #10
 8001910:	d90b      	bls.n	800192a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001916:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2205      	movs	r2, #5
 8001922:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0c5      	b.n	8001ab6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0e5      	beq.n	8001904 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0202 	bic.w	r2, r2, #2
 8001946:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001948:	f7ff ffb2 	bl	80018b0 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800194e:	e012      	b.n	8001976 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001950:	f7ff ffae 	bl	80018b0 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b0a      	cmp	r3, #10
 800195c:	d90b      	bls.n	8001976 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2205      	movs	r2, #5
 800196e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e09f      	b.n	8001ab6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1e5      	bne.n	8001950 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7e1b      	ldrb	r3, [r3, #24]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d108      	bne.n	800199e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e007      	b.n	80019ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7e5b      	ldrb	r3, [r3, #25]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d108      	bne.n	80019c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	e007      	b.n	80019d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7e9b      	ldrb	r3, [r3, #26]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d108      	bne.n	80019f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0220 	orr.w	r2, r2, #32
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e007      	b.n	8001a02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0220 	bic.w	r2, r2, #32
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7edb      	ldrb	r3, [r3, #27]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d108      	bne.n	8001a1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0210 	bic.w	r2, r2, #16
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	e007      	b.n	8001a2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0210 	orr.w	r2, r2, #16
 8001a2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7f1b      	ldrb	r3, [r3, #28]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d108      	bne.n	8001a46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0208 	orr.w	r2, r2, #8
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e007      	b.n	8001a56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0208 	bic.w	r2, r2, #8
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7f5b      	ldrb	r3, [r3, #29]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d108      	bne.n	8001a70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0204 	orr.w	r2, r2, #4
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	e007      	b.n	8001a80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0204 	bic.w	r2, r2, #4
 8001a7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	ea42 0103 	orr.w	r1, r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	1e5a      	subs	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ad8:	7cfb      	ldrb	r3, [r7, #19]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d003      	beq.n	8001ae6 <HAL_CAN_ConfigFilter+0x26>
 8001ade:	7cfb      	ldrb	r3, [r7, #19]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	f040 80be 	bne.w	8001c62 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001ae6:	4b65      	ldr	r3, [pc, #404]	@ (8001c7c <HAL_CAN_ConfigFilter+0x1bc>)
 8001ae8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001af0:	f043 0201 	orr.w	r2, r3, #1
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b00:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	431a      	orrs	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	2201      	movs	r2, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	401a      	ands	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d123      	bne.n	8001b90 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3248      	adds	r2, #72	@ 0x48
 8001b70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b86:	6979      	ldr	r1, [r7, #20]
 8001b88:	3348      	adds	r3, #72	@ 0x48
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d122      	bne.n	8001bde <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bb8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3248      	adds	r2, #72	@ 0x48
 8001bbe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bd2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bd4:	6979      	ldr	r1, [r7, #20]
 8001bd6:	3348      	adds	r3, #72	@ 0x48
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001bf8:	e007      	b.n	8001c0a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001c24:	e007      	b.n	8001c36 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d107      	bne.n	8001c4e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c54:	f023 0201 	bic.w	r2, r3, #1
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e006      	b.n	8001c70 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
  }
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	40006400 	.word	0x40006400

08001c80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d12e      	bne.n	8001cf2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cac:	f7ff fe00 	bl	80018b0 <HAL_GetTick>
 8001cb0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cb2:	e012      	b.n	8001cda <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cb4:	f7ff fdfc 	bl	80018b0 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b0a      	cmp	r3, #10
 8001cc0:	d90b      	bls.n	8001cda <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2205      	movs	r2, #5
 8001cd2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e012      	b.n	8001d00 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e5      	bne.n	8001cb4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e006      	b.n	8001d00 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
  }
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	@ 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d1c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d003      	beq.n	8001d34 <HAL_CAN_AddTxMessage+0x2c>
 8001d2c:	7ffb      	ldrb	r3, [r7, #31]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	f040 80ad 	bne.w	8001e8e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10a      	bne.n	8001d54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 8095 	beq.w	8001e7e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	0e1b      	lsrs	r3, r3, #24
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d5e:	2201      	movs	r2, #1
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10d      	bne.n	8001d8c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d7a:	68f9      	ldr	r1, [r7, #12]
 8001d7c:	6809      	ldr	r1, [r1, #0]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3318      	adds	r3, #24
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	440b      	add	r3, r1
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e00f      	b.n	8001dac <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d96:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d9c:	68f9      	ldr	r1, [r7, #12]
 8001d9e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001da0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3318      	adds	r3, #24
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	440b      	add	r3, r1
 8001daa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6819      	ldr	r1, [r3, #0]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3318      	adds	r3, #24
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	440b      	add	r3, r1
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	7d1b      	ldrb	r3, [r3, #20]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d111      	bne.n	8001dec <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3318      	adds	r3, #24
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	6811      	ldr	r1, [r2, #0]
 8001ddc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3318      	adds	r3, #24
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	440b      	add	r3, r1
 8001de8:	3304      	adds	r3, #4
 8001dea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3307      	adds	r3, #7
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	061a      	lsls	r2, r3, #24
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3306      	adds	r3, #6
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	041b      	lsls	r3, r3, #16
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3305      	adds	r3, #5
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	4313      	orrs	r3, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	3204      	adds	r2, #4
 8001e0c:	7812      	ldrb	r2, [r2, #0]
 8001e0e:	4610      	mov	r0, r2
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	6811      	ldr	r1, [r2, #0]
 8001e14:	ea43 0200 	orr.w	r2, r3, r0
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	440b      	add	r3, r1
 8001e1e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001e22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3303      	adds	r3, #3
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	061a      	lsls	r2, r3, #24
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3302      	adds	r3, #2
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	041b      	lsls	r3, r3, #16
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	4610      	mov	r0, r2
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	6811      	ldr	r1, [r2, #0]
 8001e4a:	ea43 0200 	orr.w	r2, r3, r0
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	440b      	add	r3, r1
 8001e54:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001e58:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	3318      	adds	r3, #24
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	4413      	add	r3, r2
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	6811      	ldr	r1, [r2, #0]
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	3318      	adds	r3, #24
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	440b      	add	r3, r1
 8001e78:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e00e      	b.n	8001e9c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e006      	b.n	8001e9c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e92:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
  }
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3724      	adds	r7, #36	@ 0x24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ebc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d003      	beq.n	8001ecc <HAL_CAN_GetRxMessage+0x24>
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	f040 8103 	bne.w	80020d2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d116      	bne.n	8001f0e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0f7      	b.n	80020e0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d107      	bne.n	8001f0e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f02:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0e8      	b.n	80020e0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	331b      	adds	r3, #27
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	4413      	add	r3, r2
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0204 	and.w	r2, r3, #4
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10c      	bne.n	8001f46 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	331b      	adds	r3, #27
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	0d5b      	lsrs	r3, r3, #21
 8001f3c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e00b      	b.n	8001f5e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	331b      	adds	r3, #27
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	4413      	add	r3, r2
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	331b      	adds	r3, #27
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	4413      	add	r3, r2
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0202 	and.w	r2, r3, #2
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	331b      	adds	r3, #27
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	4413      	add	r3, r2
 8001f80:	3304      	adds	r3, #4
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2208      	movs	r2, #8
 8001f90:	611a      	str	r2, [r3, #16]
 8001f92:	e00b      	b.n	8001fac <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	331b      	adds	r3, #27
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 020f 	and.w	r2, r3, #15
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	331b      	adds	r3, #27
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3304      	adds	r3, #4
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	331b      	adds	r3, #27
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	4413      	add	r3, r2
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	0c1b      	lsrs	r3, r3, #16
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	0a1a      	lsrs	r2, r3, #8
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	3301      	adds	r3, #1
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	4413      	add	r3, r2
 8002016:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0c1a      	lsrs	r2, r3, #16
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	3302      	adds	r3, #2
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	4413      	add	r3, r2
 8002030:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	0e1a      	lsrs	r2, r3, #24
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	3303      	adds	r3, #3
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	4413      	add	r3, r2
 800204a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	3304      	adds	r3, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	4413      	add	r3, r2
 8002062:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0a1a      	lsrs	r2, r3, #8
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	3305      	adds	r3, #5
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	4413      	add	r3, r2
 800207c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0c1a      	lsrs	r2, r3, #16
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	3306      	adds	r3, #6
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	4413      	add	r3, r2
 8002096:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0e1a      	lsrs	r2, r3, #24
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	3307      	adds	r3, #7
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d108      	bne.n	80020be <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0220 	orr.w	r2, r2, #32
 80020ba:	60da      	str	r2, [r3, #12]
 80020bc:	e007      	b.n	80020ce <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0220 	orr.w	r2, r2, #32
 80020cc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e006      	b.n	80020e0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
  }
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020fc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d002      	beq.n	800210a <HAL_CAN_ActivateNotification+0x1e>
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d109      	bne.n	800211e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6959      	ldr	r1, [r3, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e006      	b.n	800212c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002122:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
  }
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	@ 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d07c      	beq.n	8002278 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d023      	beq.n	80021d0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2201      	movs	r2, #1
 800218e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f983 	bl	80024a6 <HAL_CAN_TxMailbox0CompleteCallback>
 80021a0:	e016      	b.n	80021d0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d004      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b4:	e00c      	b.n	80021d0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c8:	e002      	b.n	80021d0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f989 	bl	80024e2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d024      	beq.n	8002224 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f963 	bl	80024ba <HAL_CAN_TxMailbox1CompleteCallback>
 80021f4:	e016      	b.n	8002224 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
 8002208:	e00c      	b.n	8002224 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002210:	2b00      	cmp	r3, #0
 8002212:	d004      	beq.n	800221e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002216:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
 800221c:	e002      	b.n	8002224 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f969 	bl	80024f6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d024      	beq.n	8002278 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002236:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f943 	bl	80024ce <HAL_CAN_TxMailbox2CompleteCallback>
 8002248:	e016      	b.n	8002278 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d004      	beq.n	800225e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800225a:	627b      	str	r3, [r7, #36]	@ 0x24
 800225c:	e00c      	b.n	8002278 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d004      	beq.n	8002272 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002270:	e002      	b.n	8002278 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f949 	bl	800250a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00c      	beq.n	800229c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2210      	movs	r2, #16
 800229a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d006      	beq.n	80022be <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2208      	movs	r2, #8
 80022b6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f930 	bl	800251e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d009      	beq.n	80022dc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff f856 	bl	8001388 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00c      	beq.n	8002300 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2210      	movs	r2, #16
 80022fe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d006      	beq.n	8002322 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2208      	movs	r2, #8
 800231a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f912 	bl	8002546 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	d009      	beq.n	8002340 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f8f9 	bl	8002532 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d006      	beq.n	8002362 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2210      	movs	r2, #16
 800235a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f8fc 	bl	800255a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00b      	beq.n	8002384 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d006      	beq.n	8002384 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2208      	movs	r2, #8
 800237c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f8f5 	bl	800256e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d07b      	beq.n	8002486 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d072      	beq.n	800247e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ca:	f043 0302 	orr.w	r3, r3, #2
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d008      	beq.n	80023ec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d043      	beq.n	800247e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d03e      	beq.n	800247e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002406:	2b60      	cmp	r3, #96	@ 0x60
 8002408:	d02b      	beq.n	8002462 <HAL_CAN_IRQHandler+0x32a>
 800240a:	2b60      	cmp	r3, #96	@ 0x60
 800240c:	d82e      	bhi.n	800246c <HAL_CAN_IRQHandler+0x334>
 800240e:	2b50      	cmp	r3, #80	@ 0x50
 8002410:	d022      	beq.n	8002458 <HAL_CAN_IRQHandler+0x320>
 8002412:	2b50      	cmp	r3, #80	@ 0x50
 8002414:	d82a      	bhi.n	800246c <HAL_CAN_IRQHandler+0x334>
 8002416:	2b40      	cmp	r3, #64	@ 0x40
 8002418:	d019      	beq.n	800244e <HAL_CAN_IRQHandler+0x316>
 800241a:	2b40      	cmp	r3, #64	@ 0x40
 800241c:	d826      	bhi.n	800246c <HAL_CAN_IRQHandler+0x334>
 800241e:	2b30      	cmp	r3, #48	@ 0x30
 8002420:	d010      	beq.n	8002444 <HAL_CAN_IRQHandler+0x30c>
 8002422:	2b30      	cmp	r3, #48	@ 0x30
 8002424:	d822      	bhi.n	800246c <HAL_CAN_IRQHandler+0x334>
 8002426:	2b10      	cmp	r3, #16
 8002428:	d002      	beq.n	8002430 <HAL_CAN_IRQHandler+0x2f8>
 800242a:	2b20      	cmp	r3, #32
 800242c:	d005      	beq.n	800243a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800242e:	e01d      	b.n	800246c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002432:	f043 0308 	orr.w	r3, r3, #8
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002438:	e019      	b.n	800246e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	f043 0310 	orr.w	r3, r3, #16
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002442:	e014      	b.n	800246e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002446:	f043 0320 	orr.w	r3, r3, #32
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800244c:	e00f      	b.n	800246e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002454:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002456:	e00a      	b.n	800246e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800245e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002460:	e005      	b.n	800246e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002468:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800246a:	e000      	b.n	800246e <HAL_CAN_IRQHandler+0x336>
            break;
 800246c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699a      	ldr	r2, [r3, #24]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800247c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2204      	movs	r2, #4
 8002484:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f872 	bl	8002582 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800249e:	bf00      	nop
 80024a0:	3728      	adds	r7, #40	@ 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a8:	4b0c      	ldr	r3, [pc, #48]	@ (80025dc <__NVIC_SetPriorityGrouping+0x44>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025b4:	4013      	ands	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ca:	4a04      	ldr	r2, [pc, #16]	@ (80025dc <__NVIC_SetPriorityGrouping+0x44>)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	60d3      	str	r3, [r2, #12]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e4:	4b04      	ldr	r3, [pc, #16]	@ (80025f8 <__NVIC_GetPriorityGrouping+0x18>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	f003 0307 	and.w	r3, r3, #7
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	2b00      	cmp	r3, #0
 800260c:	db0b      	blt.n	8002626 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	f003 021f 	and.w	r2, r3, #31
 8002614:	4907      	ldr	r1, [pc, #28]	@ (8002634 <__NVIC_EnableIRQ+0x38>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	2001      	movs	r0, #1
 800261e:	fa00 f202 	lsl.w	r2, r0, r2
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000e100 	.word	0xe000e100

08002638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	2b00      	cmp	r3, #0
 800264a:	db0a      	blt.n	8002662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	b2da      	uxtb	r2, r3
 8002650:	490c      	ldr	r1, [pc, #48]	@ (8002684 <__NVIC_SetPriority+0x4c>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	0112      	lsls	r2, r2, #4
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	440b      	add	r3, r1
 800265c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002660:	e00a      	b.n	8002678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	4908      	ldr	r1, [pc, #32]	@ (8002688 <__NVIC_SetPriority+0x50>)
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	3b04      	subs	r3, #4
 8002670:	0112      	lsls	r2, r2, #4
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	440b      	add	r3, r1
 8002676:	761a      	strb	r2, [r3, #24]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000e100 	.word	0xe000e100
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800268c:	b480      	push	{r7}
 800268e:	b089      	sub	sp, #36	@ 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f1c3 0307 	rsb	r3, r3, #7
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	bf28      	it	cs
 80026aa:	2304      	movcs	r3, #4
 80026ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3304      	adds	r3, #4
 80026b2:	2b06      	cmp	r3, #6
 80026b4:	d902      	bls.n	80026bc <NVIC_EncodePriority+0x30>
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3b03      	subs	r3, #3
 80026ba:	e000      	b.n	80026be <NVIC_EncodePriority+0x32>
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	f04f 32ff 	mov.w	r2, #4294967295
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43da      	mvns	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	401a      	ands	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d4:	f04f 31ff 	mov.w	r1, #4294967295
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	43d9      	mvns	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	4313      	orrs	r3, r2
         );
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3724      	adds	r7, #36	@ 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002704:	d301      	bcc.n	800270a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002706:	2301      	movs	r3, #1
 8002708:	e00f      	b.n	800272a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270a:	4a0a      	ldr	r2, [pc, #40]	@ (8002734 <SysTick_Config+0x40>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002712:	210f      	movs	r1, #15
 8002714:	f04f 30ff 	mov.w	r0, #4294967295
 8002718:	f7ff ff8e 	bl	8002638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800271c:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <SysTick_Config+0x40>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002722:	4b04      	ldr	r3, [pc, #16]	@ (8002734 <SysTick_Config+0x40>)
 8002724:	2207      	movs	r2, #7
 8002726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	e000e010 	.word	0xe000e010

08002738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ff29 	bl	8002598 <__NVIC_SetPriorityGrouping>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800274e:	b580      	push	{r7, lr}
 8002750:	b086      	sub	sp, #24
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002760:	f7ff ff3e 	bl	80025e0 <__NVIC_GetPriorityGrouping>
 8002764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	6978      	ldr	r0, [r7, #20]
 800276c:	f7ff ff8e 	bl	800268c <NVIC_EncodePriority>
 8002770:	4602      	mov	r2, r0
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff5d 	bl	8002638 <__NVIC_SetPriority>
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff31 	bl	80025fc <__NVIC_EnableIRQ>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ffa2 	bl	80026f4 <SysTick_Config>
 80027b0:	4603      	mov	r3, r0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027bc:	b480      	push	{r7}
 80027be:	b089      	sub	sp, #36	@ 0x24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	e165      	b.n	8002aa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027d8:	2201      	movs	r2, #1
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	f040 8154 	bne.w	8002a9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d005      	beq.n	800280e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800280a:	2b02      	cmp	r3, #2
 800280c:	d130      	bne.n	8002870 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	2203      	movs	r2, #3
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002844:	2201      	movs	r2, #1
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 0201 	and.w	r2, r3, #1
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	2b03      	cmp	r3, #3
 800287a:	d017      	beq.n	80028ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2203      	movs	r2, #3
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d123      	bne.n	8002900 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	08da      	lsrs	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3208      	adds	r2, #8
 80028c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	220f      	movs	r2, #15
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	08da      	lsrs	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3208      	adds	r2, #8
 80028fa:	69b9      	ldr	r1, [r7, #24]
 80028fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	2203      	movs	r2, #3
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0203 	and.w	r2, r3, #3
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80ae 	beq.w	8002a9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	4b5d      	ldr	r3, [pc, #372]	@ (8002abc <HAL_GPIO_Init+0x300>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294a:	4a5c      	ldr	r2, [pc, #368]	@ (8002abc <HAL_GPIO_Init+0x300>)
 800294c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002950:	6453      	str	r3, [r2, #68]	@ 0x44
 8002952:	4b5a      	ldr	r3, [pc, #360]	@ (8002abc <HAL_GPIO_Init+0x300>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800295e:	4a58      	ldr	r2, [pc, #352]	@ (8002ac0 <HAL_GPIO_Init+0x304>)
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	3302      	adds	r3, #2
 8002966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	220f      	movs	r2, #15
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a4f      	ldr	r2, [pc, #316]	@ (8002ac4 <HAL_GPIO_Init+0x308>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d025      	beq.n	80029d6 <HAL_GPIO_Init+0x21a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4e      	ldr	r2, [pc, #312]	@ (8002ac8 <HAL_GPIO_Init+0x30c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01f      	beq.n	80029d2 <HAL_GPIO_Init+0x216>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4d      	ldr	r2, [pc, #308]	@ (8002acc <HAL_GPIO_Init+0x310>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d019      	beq.n	80029ce <HAL_GPIO_Init+0x212>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4c      	ldr	r2, [pc, #304]	@ (8002ad0 <HAL_GPIO_Init+0x314>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <HAL_GPIO_Init+0x20e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a4b      	ldr	r2, [pc, #300]	@ (8002ad4 <HAL_GPIO_Init+0x318>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00d      	beq.n	80029c6 <HAL_GPIO_Init+0x20a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4a      	ldr	r2, [pc, #296]	@ (8002ad8 <HAL_GPIO_Init+0x31c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d007      	beq.n	80029c2 <HAL_GPIO_Init+0x206>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a49      	ldr	r2, [pc, #292]	@ (8002adc <HAL_GPIO_Init+0x320>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d101      	bne.n	80029be <HAL_GPIO_Init+0x202>
 80029ba:	2306      	movs	r3, #6
 80029bc:	e00c      	b.n	80029d8 <HAL_GPIO_Init+0x21c>
 80029be:	2307      	movs	r3, #7
 80029c0:	e00a      	b.n	80029d8 <HAL_GPIO_Init+0x21c>
 80029c2:	2305      	movs	r3, #5
 80029c4:	e008      	b.n	80029d8 <HAL_GPIO_Init+0x21c>
 80029c6:	2304      	movs	r3, #4
 80029c8:	e006      	b.n	80029d8 <HAL_GPIO_Init+0x21c>
 80029ca:	2303      	movs	r3, #3
 80029cc:	e004      	b.n	80029d8 <HAL_GPIO_Init+0x21c>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e002      	b.n	80029d8 <HAL_GPIO_Init+0x21c>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_GPIO_Init+0x21c>
 80029d6:	2300      	movs	r3, #0
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	f002 0203 	and.w	r2, r2, #3
 80029de:	0092      	lsls	r2, r2, #2
 80029e0:	4093      	lsls	r3, r2
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029e8:	4935      	ldr	r1, [pc, #212]	@ (8002ac0 <HAL_GPIO_Init+0x304>)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	089b      	lsrs	r3, r3, #2
 80029ee:	3302      	adds	r3, #2
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029f6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ae0 <HAL_GPIO_Init+0x324>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a1a:	4a31      	ldr	r2, [pc, #196]	@ (8002ae0 <HAL_GPIO_Init+0x324>)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a20:	4b2f      	ldr	r3, [pc, #188]	@ (8002ae0 <HAL_GPIO_Init+0x324>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a44:	4a26      	ldr	r2, [pc, #152]	@ (8002ae0 <HAL_GPIO_Init+0x324>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a4a:	4b25      	ldr	r3, [pc, #148]	@ (8002ae0 <HAL_GPIO_Init+0x324>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae0 <HAL_GPIO_Init+0x324>)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae0 <HAL_GPIO_Init+0x324>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a98:	4a11      	ldr	r2, [pc, #68]	@ (8002ae0 <HAL_GPIO_Init+0x324>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b0f      	cmp	r3, #15
 8002aa8:	f67f ae96 	bls.w	80027d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aac:	bf00      	nop
 8002aae:	bf00      	nop
 8002ab0:	3724      	adds	r7, #36	@ 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40013800 	.word	0x40013800
 8002ac4:	40020000 	.word	0x40020000
 8002ac8:	40020400 	.word	0x40020400
 8002acc:	40020800 	.word	0x40020800
 8002ad0:	40020c00 	.word	0x40020c00
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40021400 	.word	0x40021400
 8002adc:	40021800 	.word	0x40021800
 8002ae0:	40013c00 	.word	0x40013c00

08002ae4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	887b      	ldrh	r3, [r7, #2]
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	e001      	b.n	8002b06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	807b      	strh	r3, [r7, #2]
 8002b20:	4613      	mov	r3, r2
 8002b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b24:	787b      	ldrb	r3, [r7, #1]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b30:	e003      	b.n	8002b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b32:	887b      	ldrh	r3, [r7, #2]
 8002b34:	041a      	lsls	r2, r3, #16
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	619a      	str	r2, [r3, #24]
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b52:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d006      	beq.n	8002b6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b5e:	4a05      	ldr	r2, [pc, #20]	@ (8002b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 f806 	bl	8002b78 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40013c00 	.word	0x40013c00

08002b78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0cc      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b68      	ldr	r3, [pc, #416]	@ (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d90c      	bls.n	8002bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b65      	ldr	r3, [pc, #404]	@ (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b63      	ldr	r3, [pc, #396]	@ (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0b8      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d020      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002be4:	4b59      	ldr	r3, [pc, #356]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a58      	ldr	r2, [pc, #352]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bfc:	4b53      	ldr	r3, [pc, #332]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4a52      	ldr	r2, [pc, #328]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c08:	4b50      	ldr	r3, [pc, #320]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	494d      	ldr	r1, [pc, #308]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d044      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b47      	ldr	r3, [pc, #284]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d119      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e07f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e06f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e067      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c6e:	4b37      	ldr	r3, [pc, #220]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 0203 	bic.w	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4934      	ldr	r1, [pc, #208]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c80:	f7fe fe16 	bl	80018b0 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c88:	f7fe fe12 	bl	80018b0 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e04f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 020c 	and.w	r2, r3, #12
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d1eb      	bne.n	8002c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b25      	ldr	r3, [pc, #148]	@ (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d20c      	bcs.n	8002cd8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b22      	ldr	r3, [pc, #136]	@ (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b20      	ldr	r3, [pc, #128]	@ (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e032      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce4:	4b19      	ldr	r3, [pc, #100]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4916      	ldr	r1, [pc, #88]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d02:	4b12      	ldr	r3, [pc, #72]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	490e      	ldr	r1, [pc, #56]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d16:	f000 f821 	bl	8002d5c <HAL_RCC_GetSysClockFreq>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	490a      	ldr	r1, [pc, #40]	@ (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	5ccb      	ldrb	r3, [r1, r3]
 8002d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2e:	4a09      	ldr	r2, [pc, #36]	@ (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d32:	4b09      	ldr	r3, [pc, #36]	@ (8002d58 <HAL_RCC_ClockConfig+0x1c8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe fd76 	bl	8001828 <HAL_InitTick>

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023c00 	.word	0x40023c00
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	080060b4 	.word	0x080060b4
 8002d54:	20000000 	.word	0x20000000
 8002d58:	20000004 	.word	0x20000004

08002d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d60:	b0ae      	sub	sp, #184	@ 0xb8
 8002d62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d82:	4bcb      	ldr	r3, [pc, #812]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b0c      	cmp	r3, #12
 8002d8c:	f200 8206 	bhi.w	800319c <HAL_RCC_GetSysClockFreq+0x440>
 8002d90:	a201      	add	r2, pc, #4	@ (adr r2, 8002d98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d96:	bf00      	nop
 8002d98:	08002dcd 	.word	0x08002dcd
 8002d9c:	0800319d 	.word	0x0800319d
 8002da0:	0800319d 	.word	0x0800319d
 8002da4:	0800319d 	.word	0x0800319d
 8002da8:	08002dd5 	.word	0x08002dd5
 8002dac:	0800319d 	.word	0x0800319d
 8002db0:	0800319d 	.word	0x0800319d
 8002db4:	0800319d 	.word	0x0800319d
 8002db8:	08002ddd 	.word	0x08002ddd
 8002dbc:	0800319d 	.word	0x0800319d
 8002dc0:	0800319d 	.word	0x0800319d
 8002dc4:	0800319d 	.word	0x0800319d
 8002dc8:	08002fcd 	.word	0x08002fcd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4bb9      	ldr	r3, [pc, #740]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002dce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002dd2:	e1e7      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dd4:	4bb8      	ldr	r3, [pc, #736]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002dda:	e1e3      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ddc:	4bb4      	ldr	r3, [pc, #720]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002de4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002de8:	4bb1      	ldr	r3, [pc, #708]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d071      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df4:	4bae      	ldr	r3, [pc, #696]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e00:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e10:	2300      	movs	r3, #0
 8002e12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002e16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	462b      	mov	r3, r5
 8002e1e:	f04f 0000 	mov.w	r0, #0
 8002e22:	f04f 0100 	mov.w	r1, #0
 8002e26:	0159      	lsls	r1, r3, #5
 8002e28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e2c:	0150      	lsls	r0, r2, #5
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4621      	mov	r1, r4
 8002e34:	1a51      	subs	r1, r2, r1
 8002e36:	6439      	str	r1, [r7, #64]	@ 0x40
 8002e38:	4629      	mov	r1, r5
 8002e3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	018b      	lsls	r3, r1, #6
 8002e50:	4641      	mov	r1, r8
 8002e52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e56:	4641      	mov	r1, r8
 8002e58:	018a      	lsls	r2, r1, #6
 8002e5a:	4641      	mov	r1, r8
 8002e5c:	1a51      	subs	r1, r2, r1
 8002e5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e60:	4649      	mov	r1, r9
 8002e62:	eb63 0301 	sbc.w	r3, r3, r1
 8002e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002e74:	4649      	mov	r1, r9
 8002e76:	00cb      	lsls	r3, r1, #3
 8002e78:	4641      	mov	r1, r8
 8002e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e7e:	4641      	mov	r1, r8
 8002e80:	00ca      	lsls	r2, r1, #3
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	4622      	mov	r2, r4
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e8e:	462b      	mov	r3, r5
 8002e90:	460a      	mov	r2, r1
 8002e92:	eb42 0303 	adc.w	r3, r2, r3
 8002e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	024b      	lsls	r3, r1, #9
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eae:	4621      	mov	r1, r4
 8002eb0:	024a      	lsls	r2, r1, #9
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ec0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ec4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002ec8:	f7fd fede 	bl	8000c88 <__aeabi_uldivmod>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ed6:	e067      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed8:	4b75      	ldr	r3, [pc, #468]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	099b      	lsrs	r3, r3, #6
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ee4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002ee8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ef6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002efa:	4622      	mov	r2, r4
 8002efc:	462b      	mov	r3, r5
 8002efe:	f04f 0000 	mov.w	r0, #0
 8002f02:	f04f 0100 	mov.w	r1, #0
 8002f06:	0159      	lsls	r1, r3, #5
 8002f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f0c:	0150      	lsls	r0, r2, #5
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4621      	mov	r1, r4
 8002f14:	1a51      	subs	r1, r2, r1
 8002f16:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002f18:	4629      	mov	r1, r5
 8002f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002f2c:	4649      	mov	r1, r9
 8002f2e:	018b      	lsls	r3, r1, #6
 8002f30:	4641      	mov	r1, r8
 8002f32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f36:	4641      	mov	r1, r8
 8002f38:	018a      	lsls	r2, r1, #6
 8002f3a:	4641      	mov	r1, r8
 8002f3c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f40:	4649      	mov	r1, r9
 8002f42:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f52:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f5a:	4692      	mov	sl, r2
 8002f5c:	469b      	mov	fp, r3
 8002f5e:	4623      	mov	r3, r4
 8002f60:	eb1a 0303 	adds.w	r3, sl, r3
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	462b      	mov	r3, r5
 8002f68:	eb4b 0303 	adc.w	r3, fp, r3
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	028b      	lsls	r3, r1, #10
 8002f7e:	4621      	mov	r1, r4
 8002f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f84:	4621      	mov	r1, r4
 8002f86:	028a      	lsls	r2, r1, #10
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f90:	2200      	movs	r2, #0
 8002f92:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f94:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002f9a:	f7fd fe75 	bl	8000c88 <__aeabi_uldivmod>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fa8:	4b41      	ldr	r3, [pc, #260]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fca:	e0eb      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fcc:	4b38      	ldr	r3, [pc, #224]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fd8:	4b35      	ldr	r3, [pc, #212]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d06b      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe4:	4b32      	ldr	r3, [pc, #200]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	2200      	movs	r2, #0
 8002fec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ff0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ffc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003000:	4622      	mov	r2, r4
 8003002:	462b      	mov	r3, r5
 8003004:	f04f 0000 	mov.w	r0, #0
 8003008:	f04f 0100 	mov.w	r1, #0
 800300c:	0159      	lsls	r1, r3, #5
 800300e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003012:	0150      	lsls	r0, r2, #5
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4621      	mov	r1, r4
 800301a:	1a51      	subs	r1, r2, r1
 800301c:	61b9      	str	r1, [r7, #24]
 800301e:	4629      	mov	r1, r5
 8003020:	eb63 0301 	sbc.w	r3, r3, r1
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003032:	4659      	mov	r1, fp
 8003034:	018b      	lsls	r3, r1, #6
 8003036:	4651      	mov	r1, sl
 8003038:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800303c:	4651      	mov	r1, sl
 800303e:	018a      	lsls	r2, r1, #6
 8003040:	4651      	mov	r1, sl
 8003042:	ebb2 0801 	subs.w	r8, r2, r1
 8003046:	4659      	mov	r1, fp
 8003048:	eb63 0901 	sbc.w	r9, r3, r1
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003058:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800305c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003060:	4690      	mov	r8, r2
 8003062:	4699      	mov	r9, r3
 8003064:	4623      	mov	r3, r4
 8003066:	eb18 0303 	adds.w	r3, r8, r3
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	462b      	mov	r3, r5
 800306e:	eb49 0303 	adc.w	r3, r9, r3
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003080:	4629      	mov	r1, r5
 8003082:	024b      	lsls	r3, r1, #9
 8003084:	4621      	mov	r1, r4
 8003086:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800308a:	4621      	mov	r1, r4
 800308c:	024a      	lsls	r2, r1, #9
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003096:	2200      	movs	r2, #0
 8003098:	65bb      	str	r3, [r7, #88]	@ 0x58
 800309a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800309c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030a0:	f7fd fdf2 	bl	8000c88 <__aeabi_uldivmod>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4613      	mov	r3, r2
 80030aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030ae:	e065      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x420>
 80030b0:	40023800 	.word	0x40023800
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030bc:	4b3d      	ldr	r3, [pc, #244]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x458>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	099b      	lsrs	r3, r3, #6
 80030c2:	2200      	movs	r2, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	4611      	mov	r1, r2
 80030c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80030ce:	2300      	movs	r3, #0
 80030d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80030d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80030d6:	4642      	mov	r2, r8
 80030d8:	464b      	mov	r3, r9
 80030da:	f04f 0000 	mov.w	r0, #0
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	0159      	lsls	r1, r3, #5
 80030e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e8:	0150      	lsls	r0, r2, #5
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4641      	mov	r1, r8
 80030f0:	1a51      	subs	r1, r2, r1
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	4649      	mov	r1, r9
 80030f6:	eb63 0301 	sbc.w	r3, r3, r1
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003108:	4659      	mov	r1, fp
 800310a:	018b      	lsls	r3, r1, #6
 800310c:	4651      	mov	r1, sl
 800310e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003112:	4651      	mov	r1, sl
 8003114:	018a      	lsls	r2, r1, #6
 8003116:	4651      	mov	r1, sl
 8003118:	1a54      	subs	r4, r2, r1
 800311a:	4659      	mov	r1, fp
 800311c:	eb63 0501 	sbc.w	r5, r3, r1
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	00eb      	lsls	r3, r5, #3
 800312a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800312e:	00e2      	lsls	r2, r4, #3
 8003130:	4614      	mov	r4, r2
 8003132:	461d      	mov	r5, r3
 8003134:	4643      	mov	r3, r8
 8003136:	18e3      	adds	r3, r4, r3
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	464b      	mov	r3, r9
 800313c:	eb45 0303 	adc.w	r3, r5, r3
 8003140:	607b      	str	r3, [r7, #4]
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800314e:	4629      	mov	r1, r5
 8003150:	028b      	lsls	r3, r1, #10
 8003152:	4621      	mov	r1, r4
 8003154:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003158:	4621      	mov	r1, r4
 800315a:	028a      	lsls	r2, r1, #10
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003164:	2200      	movs	r2, #0
 8003166:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003168:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800316a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800316e:	f7fd fd8b 	bl	8000c88 <__aeabi_uldivmod>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4613      	mov	r3, r2
 8003178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800317c:	4b0d      	ldr	r3, [pc, #52]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	0f1b      	lsrs	r3, r3, #28
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800318a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800318e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003192:	fbb2 f3f3 	udiv	r3, r2, r3
 8003196:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800319a:	e003      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800319e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	37b8      	adds	r7, #184	@ 0xb8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	00f42400 	.word	0x00f42400

080031bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e28d      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 8083 	beq.w	80032e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031dc:	4b94      	ldr	r3, [pc, #592]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d019      	beq.n	800321c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80031e8:	4b91      	ldr	r3, [pc, #580]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 030c 	and.w	r3, r3, #12
        || \
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d106      	bne.n	8003202 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80031f4:	4b8e      	ldr	r3, [pc, #568]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003200:	d00c      	beq.n	800321c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003202:	4b8b      	ldr	r3, [pc, #556]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800320a:	2b0c      	cmp	r3, #12
 800320c:	d112      	bne.n	8003234 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320e:	4b88      	ldr	r3, [pc, #544]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003216:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800321a:	d10b      	bne.n	8003234 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321c:	4b84      	ldr	r3, [pc, #528]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d05b      	beq.n	80032e0 <HAL_RCC_OscConfig+0x124>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d157      	bne.n	80032e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e25a      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800323c:	d106      	bne.n	800324c <HAL_RCC_OscConfig+0x90>
 800323e:	4b7c      	ldr	r3, [pc, #496]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a7b      	ldr	r2, [pc, #492]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e01d      	b.n	8003288 <HAL_RCC_OscConfig+0xcc>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003254:	d10c      	bne.n	8003270 <HAL_RCC_OscConfig+0xb4>
 8003256:	4b76      	ldr	r3, [pc, #472]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a75      	ldr	r2, [pc, #468]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 800325c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	4b73      	ldr	r3, [pc, #460]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a72      	ldr	r2, [pc, #456]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e00b      	b.n	8003288 <HAL_RCC_OscConfig+0xcc>
 8003270:	4b6f      	ldr	r3, [pc, #444]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a6e      	ldr	r2, [pc, #440]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4b6c      	ldr	r3, [pc, #432]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a6b      	ldr	r2, [pc, #428]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d013      	beq.n	80032b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe fb0e 	bl	80018b0 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003298:	f7fe fb0a 	bl	80018b0 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	@ 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e21f      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	4b61      	ldr	r3, [pc, #388]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0xdc>
 80032b6:	e014      	b.n	80032e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fe fafa 	bl	80018b0 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fe faf6 	bl	80018b0 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	@ 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e20b      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d2:	4b57      	ldr	r3, [pc, #348]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x104>
 80032de:	e000      	b.n	80032e2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d06f      	beq.n	80033ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80032ee:	4b50      	ldr	r3, [pc, #320]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d017      	beq.n	800332a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032fa:	4b4d      	ldr	r3, [pc, #308]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
        || \
 8003302:	2b08      	cmp	r3, #8
 8003304:	d105      	bne.n	8003312 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003306:	4b4a      	ldr	r3, [pc, #296]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003312:	4b47      	ldr	r3, [pc, #284]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d11c      	bne.n	8003358 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800331e:	4b44      	ldr	r3, [pc, #272]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d116      	bne.n	8003358 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	4b41      	ldr	r3, [pc, #260]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_RCC_OscConfig+0x186>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d001      	beq.n	8003342 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e1d3      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003342:	4b3b      	ldr	r3, [pc, #236]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4937      	ldr	r1, [pc, #220]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003356:	e03a      	b.n	80033ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d020      	beq.n	80033a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003360:	4b34      	ldr	r3, [pc, #208]	@ (8003434 <HAL_RCC_OscConfig+0x278>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003366:	f7fe faa3 	bl	80018b0 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336e:	f7fe fa9f 	bl	80018b0 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e1b4      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	4b2b      	ldr	r3, [pc, #172]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338c:	4b28      	ldr	r3, [pc, #160]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4925      	ldr	r1, [pc, #148]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
 80033a0:	e015      	b.n	80033ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a2:	4b24      	ldr	r3, [pc, #144]	@ (8003434 <HAL_RCC_OscConfig+0x278>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fe fa82 	bl	80018b0 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b0:	f7fe fa7e 	bl	80018b0 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e193      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d036      	beq.n	8003448 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d016      	beq.n	8003410 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033e2:	4b15      	ldr	r3, [pc, #84]	@ (8003438 <HAL_RCC_OscConfig+0x27c>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fe fa62 	bl	80018b0 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f0:	f7fe fa5e 	bl	80018b0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e173      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	4b0b      	ldr	r3, [pc, #44]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 8003404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x234>
 800340e:	e01b      	b.n	8003448 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003410:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7fe fa4b 	bl	80018b0 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341c:	e00e      	b.n	800343c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341e:	f7fe fa47 	bl	80018b0 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d907      	bls.n	800343c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e15c      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
 8003430:	40023800 	.word	0x40023800
 8003434:	42470000 	.word	0x42470000
 8003438:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343c:	4b8a      	ldr	r3, [pc, #552]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 800343e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ea      	bne.n	800341e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8097 	beq.w	8003584 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003456:	2300      	movs	r3, #0
 8003458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800345a:	4b83      	ldr	r3, [pc, #524]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10f      	bne.n	8003486 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	4b7f      	ldr	r3, [pc, #508]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	4a7e      	ldr	r2, [pc, #504]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 8003470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003474:	6413      	str	r3, [r2, #64]	@ 0x40
 8003476:	4b7c      	ldr	r3, [pc, #496]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003482:	2301      	movs	r3, #1
 8003484:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003486:	4b79      	ldr	r3, [pc, #484]	@ (800366c <HAL_RCC_OscConfig+0x4b0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348e:	2b00      	cmp	r3, #0
 8003490:	d118      	bne.n	80034c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003492:	4b76      	ldr	r3, [pc, #472]	@ (800366c <HAL_RCC_OscConfig+0x4b0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a75      	ldr	r2, [pc, #468]	@ (800366c <HAL_RCC_OscConfig+0x4b0>)
 8003498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800349c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800349e:	f7fe fa07 	bl	80018b0 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a6:	f7fe fa03 	bl	80018b0 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e118      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	4b6c      	ldr	r3, [pc, #432]	@ (800366c <HAL_RCC_OscConfig+0x4b0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d106      	bne.n	80034da <HAL_RCC_OscConfig+0x31e>
 80034cc:	4b66      	ldr	r3, [pc, #408]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d0:	4a65      	ldr	r2, [pc, #404]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d8:	e01c      	b.n	8003514 <HAL_RCC_OscConfig+0x358>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b05      	cmp	r3, #5
 80034e0:	d10c      	bne.n	80034fc <HAL_RCC_OscConfig+0x340>
 80034e2:	4b61      	ldr	r3, [pc, #388]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e6:	4a60      	ldr	r2, [pc, #384]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 80034e8:	f043 0304 	orr.w	r3, r3, #4
 80034ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ee:	4b5e      	ldr	r3, [pc, #376]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f2:	4a5d      	ldr	r2, [pc, #372]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034fa:	e00b      	b.n	8003514 <HAL_RCC_OscConfig+0x358>
 80034fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003500:	4a59      	ldr	r2, [pc, #356]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 8003502:	f023 0301 	bic.w	r3, r3, #1
 8003506:	6713      	str	r3, [r2, #112]	@ 0x70
 8003508:	4b57      	ldr	r3, [pc, #348]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350c:	4a56      	ldr	r2, [pc, #344]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 800350e:	f023 0304 	bic.w	r3, r3, #4
 8003512:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d015      	beq.n	8003548 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fe f9c8 	bl	80018b0 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003522:	e00a      	b.n	800353a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7fe f9c4 	bl	80018b0 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e0d7      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353a:	4b4b      	ldr	r3, [pc, #300]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0ee      	beq.n	8003524 <HAL_RCC_OscConfig+0x368>
 8003546:	e014      	b.n	8003572 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fe f9b2 	bl	80018b0 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354e:	e00a      	b.n	8003566 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003550:	f7fe f9ae 	bl	80018b0 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e0c1      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003566:	4b40      	ldr	r3, [pc, #256]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1ee      	bne.n	8003550 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003572:	7dfb      	ldrb	r3, [r7, #23]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d105      	bne.n	8003584 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003578:	4b3b      	ldr	r3, [pc, #236]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	4a3a      	ldr	r2, [pc, #232]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 800357e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003582:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80ad 	beq.w	80036e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800358e:	4b36      	ldr	r3, [pc, #216]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b08      	cmp	r3, #8
 8003598:	d060      	beq.n	800365c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d145      	bne.n	800362e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a2:	4b33      	ldr	r3, [pc, #204]	@ (8003670 <HAL_RCC_OscConfig+0x4b4>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe f982 	bl	80018b0 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fe f97e 	bl	80018b0 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e093      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	4b29      	ldr	r3, [pc, #164]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69da      	ldr	r2, [r3, #28]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035dc:	019b      	lsls	r3, r3, #6
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	085b      	lsrs	r3, r3, #1
 80035e6:	3b01      	subs	r3, #1
 80035e8:	041b      	lsls	r3, r3, #16
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	061b      	lsls	r3, r3, #24
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	071b      	lsls	r3, r3, #28
 80035fa:	491b      	ldr	r1, [pc, #108]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003600:	4b1b      	ldr	r3, [pc, #108]	@ (8003670 <HAL_RCC_OscConfig+0x4b4>)
 8003602:	2201      	movs	r2, #1
 8003604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7fe f953 	bl	80018b0 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360e:	f7fe f94f 	bl	80018b0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e064      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003620:	4b11      	ldr	r3, [pc, #68]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x452>
 800362c:	e05c      	b.n	80036e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362e:	4b10      	ldr	r3, [pc, #64]	@ (8003670 <HAL_RCC_OscConfig+0x4b4>)
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fe f93c 	bl	80018b0 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363c:	f7fe f938 	bl	80018b0 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e04d      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364e:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <HAL_RCC_OscConfig+0x4ac>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x480>
 800365a:	e045      	b.n	80036e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d107      	bne.n	8003674 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e040      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
 8003668:	40023800 	.word	0x40023800
 800366c:	40007000 	.word	0x40007000
 8003670:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003674:	4b1f      	ldr	r3, [pc, #124]	@ (80036f4 <HAL_RCC_OscConfig+0x538>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d030      	beq.n	80036e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d129      	bne.n	80036e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d122      	bne.n	80036e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036a4:	4013      	ands	r3, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d119      	bne.n	80036e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	3b01      	subs	r3, #1
 80036be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d10f      	bne.n	80036e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d107      	bne.n	80036e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800

080036f8 <__cvt>:
 80036f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036fc:	ec57 6b10 	vmov	r6, r7, d0
 8003700:	2f00      	cmp	r7, #0
 8003702:	460c      	mov	r4, r1
 8003704:	4619      	mov	r1, r3
 8003706:	463b      	mov	r3, r7
 8003708:	bfbb      	ittet	lt
 800370a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800370e:	461f      	movlt	r7, r3
 8003710:	2300      	movge	r3, #0
 8003712:	232d      	movlt	r3, #45	@ 0x2d
 8003714:	700b      	strb	r3, [r1, #0]
 8003716:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003718:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800371c:	4691      	mov	r9, r2
 800371e:	f023 0820 	bic.w	r8, r3, #32
 8003722:	bfbc      	itt	lt
 8003724:	4632      	movlt	r2, r6
 8003726:	4616      	movlt	r6, r2
 8003728:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800372c:	d005      	beq.n	800373a <__cvt+0x42>
 800372e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003732:	d100      	bne.n	8003736 <__cvt+0x3e>
 8003734:	3401      	adds	r4, #1
 8003736:	2102      	movs	r1, #2
 8003738:	e000      	b.n	800373c <__cvt+0x44>
 800373a:	2103      	movs	r1, #3
 800373c:	ab03      	add	r3, sp, #12
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	ab02      	add	r3, sp, #8
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	ec47 6b10 	vmov	d0, r6, r7
 8003748:	4653      	mov	r3, sl
 800374a:	4622      	mov	r2, r4
 800374c:	f000 fe4c 	bl	80043e8 <_dtoa_r>
 8003750:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003754:	4605      	mov	r5, r0
 8003756:	d119      	bne.n	800378c <__cvt+0x94>
 8003758:	f019 0f01 	tst.w	r9, #1
 800375c:	d00e      	beq.n	800377c <__cvt+0x84>
 800375e:	eb00 0904 	add.w	r9, r0, r4
 8003762:	2200      	movs	r2, #0
 8003764:	2300      	movs	r3, #0
 8003766:	4630      	mov	r0, r6
 8003768:	4639      	mov	r1, r7
 800376a:	f7fd f9cd 	bl	8000b08 <__aeabi_dcmpeq>
 800376e:	b108      	cbz	r0, 8003774 <__cvt+0x7c>
 8003770:	f8cd 900c 	str.w	r9, [sp, #12]
 8003774:	2230      	movs	r2, #48	@ 0x30
 8003776:	9b03      	ldr	r3, [sp, #12]
 8003778:	454b      	cmp	r3, r9
 800377a:	d31e      	bcc.n	80037ba <__cvt+0xc2>
 800377c:	9b03      	ldr	r3, [sp, #12]
 800377e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003780:	1b5b      	subs	r3, r3, r5
 8003782:	4628      	mov	r0, r5
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	b004      	add	sp, #16
 8003788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800378c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003790:	eb00 0904 	add.w	r9, r0, r4
 8003794:	d1e5      	bne.n	8003762 <__cvt+0x6a>
 8003796:	7803      	ldrb	r3, [r0, #0]
 8003798:	2b30      	cmp	r3, #48	@ 0x30
 800379a:	d10a      	bne.n	80037b2 <__cvt+0xba>
 800379c:	2200      	movs	r2, #0
 800379e:	2300      	movs	r3, #0
 80037a0:	4630      	mov	r0, r6
 80037a2:	4639      	mov	r1, r7
 80037a4:	f7fd f9b0 	bl	8000b08 <__aeabi_dcmpeq>
 80037a8:	b918      	cbnz	r0, 80037b2 <__cvt+0xba>
 80037aa:	f1c4 0401 	rsb	r4, r4, #1
 80037ae:	f8ca 4000 	str.w	r4, [sl]
 80037b2:	f8da 3000 	ldr.w	r3, [sl]
 80037b6:	4499      	add	r9, r3
 80037b8:	e7d3      	b.n	8003762 <__cvt+0x6a>
 80037ba:	1c59      	adds	r1, r3, #1
 80037bc:	9103      	str	r1, [sp, #12]
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e7d9      	b.n	8003776 <__cvt+0x7e>

080037c2 <__exponent>:
 80037c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037c4:	2900      	cmp	r1, #0
 80037c6:	bfba      	itte	lt
 80037c8:	4249      	neglt	r1, r1
 80037ca:	232d      	movlt	r3, #45	@ 0x2d
 80037cc:	232b      	movge	r3, #43	@ 0x2b
 80037ce:	2909      	cmp	r1, #9
 80037d0:	7002      	strb	r2, [r0, #0]
 80037d2:	7043      	strb	r3, [r0, #1]
 80037d4:	dd29      	ble.n	800382a <__exponent+0x68>
 80037d6:	f10d 0307 	add.w	r3, sp, #7
 80037da:	461d      	mov	r5, r3
 80037dc:	270a      	movs	r7, #10
 80037de:	461a      	mov	r2, r3
 80037e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80037e4:	fb07 1416 	mls	r4, r7, r6, r1
 80037e8:	3430      	adds	r4, #48	@ 0x30
 80037ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80037ee:	460c      	mov	r4, r1
 80037f0:	2c63      	cmp	r4, #99	@ 0x63
 80037f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80037f6:	4631      	mov	r1, r6
 80037f8:	dcf1      	bgt.n	80037de <__exponent+0x1c>
 80037fa:	3130      	adds	r1, #48	@ 0x30
 80037fc:	1e94      	subs	r4, r2, #2
 80037fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003802:	1c41      	adds	r1, r0, #1
 8003804:	4623      	mov	r3, r4
 8003806:	42ab      	cmp	r3, r5
 8003808:	d30a      	bcc.n	8003820 <__exponent+0x5e>
 800380a:	f10d 0309 	add.w	r3, sp, #9
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	42ac      	cmp	r4, r5
 8003812:	bf88      	it	hi
 8003814:	2300      	movhi	r3, #0
 8003816:	3302      	adds	r3, #2
 8003818:	4403      	add	r3, r0
 800381a:	1a18      	subs	r0, r3, r0
 800381c:	b003      	add	sp, #12
 800381e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003820:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003824:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003828:	e7ed      	b.n	8003806 <__exponent+0x44>
 800382a:	2330      	movs	r3, #48	@ 0x30
 800382c:	3130      	adds	r1, #48	@ 0x30
 800382e:	7083      	strb	r3, [r0, #2]
 8003830:	70c1      	strb	r1, [r0, #3]
 8003832:	1d03      	adds	r3, r0, #4
 8003834:	e7f1      	b.n	800381a <__exponent+0x58>
	...

08003838 <_printf_float>:
 8003838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800383c:	b08d      	sub	sp, #52	@ 0x34
 800383e:	460c      	mov	r4, r1
 8003840:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003844:	4616      	mov	r6, r2
 8003846:	461f      	mov	r7, r3
 8003848:	4605      	mov	r5, r0
 800384a:	f000 fccd 	bl	80041e8 <_localeconv_r>
 800384e:	6803      	ldr	r3, [r0, #0]
 8003850:	9304      	str	r3, [sp, #16]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fc fd2c 	bl	80002b0 <strlen>
 8003858:	2300      	movs	r3, #0
 800385a:	930a      	str	r3, [sp, #40]	@ 0x28
 800385c:	f8d8 3000 	ldr.w	r3, [r8]
 8003860:	9005      	str	r0, [sp, #20]
 8003862:	3307      	adds	r3, #7
 8003864:	f023 0307 	bic.w	r3, r3, #7
 8003868:	f103 0208 	add.w	r2, r3, #8
 800386c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003870:	f8d4 b000 	ldr.w	fp, [r4]
 8003874:	f8c8 2000 	str.w	r2, [r8]
 8003878:	e9d3 8900 	ldrd	r8, r9, [r3]
 800387c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003880:	9307      	str	r3, [sp, #28]
 8003882:	f8cd 8018 	str.w	r8, [sp, #24]
 8003886:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800388a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800388e:	4b9c      	ldr	r3, [pc, #624]	@ (8003b00 <_printf_float+0x2c8>)
 8003890:	f04f 32ff 	mov.w	r2, #4294967295
 8003894:	f7fd f96a 	bl	8000b6c <__aeabi_dcmpun>
 8003898:	bb70      	cbnz	r0, 80038f8 <_printf_float+0xc0>
 800389a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800389e:	4b98      	ldr	r3, [pc, #608]	@ (8003b00 <_printf_float+0x2c8>)
 80038a0:	f04f 32ff 	mov.w	r2, #4294967295
 80038a4:	f7fd f944 	bl	8000b30 <__aeabi_dcmple>
 80038a8:	bb30      	cbnz	r0, 80038f8 <_printf_float+0xc0>
 80038aa:	2200      	movs	r2, #0
 80038ac:	2300      	movs	r3, #0
 80038ae:	4640      	mov	r0, r8
 80038b0:	4649      	mov	r1, r9
 80038b2:	f7fd f933 	bl	8000b1c <__aeabi_dcmplt>
 80038b6:	b110      	cbz	r0, 80038be <_printf_float+0x86>
 80038b8:	232d      	movs	r3, #45	@ 0x2d
 80038ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038be:	4a91      	ldr	r2, [pc, #580]	@ (8003b04 <_printf_float+0x2cc>)
 80038c0:	4b91      	ldr	r3, [pc, #580]	@ (8003b08 <_printf_float+0x2d0>)
 80038c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80038c6:	bf94      	ite	ls
 80038c8:	4690      	movls	r8, r2
 80038ca:	4698      	movhi	r8, r3
 80038cc:	2303      	movs	r3, #3
 80038ce:	6123      	str	r3, [r4, #16]
 80038d0:	f02b 0304 	bic.w	r3, fp, #4
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	f04f 0900 	mov.w	r9, #0
 80038da:	9700      	str	r7, [sp, #0]
 80038dc:	4633      	mov	r3, r6
 80038de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80038e0:	4621      	mov	r1, r4
 80038e2:	4628      	mov	r0, r5
 80038e4:	f000 f9d2 	bl	8003c8c <_printf_common>
 80038e8:	3001      	adds	r0, #1
 80038ea:	f040 808d 	bne.w	8003a08 <_printf_float+0x1d0>
 80038ee:	f04f 30ff 	mov.w	r0, #4294967295
 80038f2:	b00d      	add	sp, #52	@ 0x34
 80038f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038f8:	4642      	mov	r2, r8
 80038fa:	464b      	mov	r3, r9
 80038fc:	4640      	mov	r0, r8
 80038fe:	4649      	mov	r1, r9
 8003900:	f7fd f934 	bl	8000b6c <__aeabi_dcmpun>
 8003904:	b140      	cbz	r0, 8003918 <_printf_float+0xe0>
 8003906:	464b      	mov	r3, r9
 8003908:	2b00      	cmp	r3, #0
 800390a:	bfbc      	itt	lt
 800390c:	232d      	movlt	r3, #45	@ 0x2d
 800390e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003912:	4a7e      	ldr	r2, [pc, #504]	@ (8003b0c <_printf_float+0x2d4>)
 8003914:	4b7e      	ldr	r3, [pc, #504]	@ (8003b10 <_printf_float+0x2d8>)
 8003916:	e7d4      	b.n	80038c2 <_printf_float+0x8a>
 8003918:	6863      	ldr	r3, [r4, #4]
 800391a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800391e:	9206      	str	r2, [sp, #24]
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	d13b      	bne.n	800399c <_printf_float+0x164>
 8003924:	2306      	movs	r3, #6
 8003926:	6063      	str	r3, [r4, #4]
 8003928:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800392c:	2300      	movs	r3, #0
 800392e:	6022      	str	r2, [r4, #0]
 8003930:	9303      	str	r3, [sp, #12]
 8003932:	ab0a      	add	r3, sp, #40	@ 0x28
 8003934:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003938:	ab09      	add	r3, sp, #36	@ 0x24
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	6861      	ldr	r1, [r4, #4]
 800393e:	ec49 8b10 	vmov	d0, r8, r9
 8003942:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003946:	4628      	mov	r0, r5
 8003948:	f7ff fed6 	bl	80036f8 <__cvt>
 800394c:	9b06      	ldr	r3, [sp, #24]
 800394e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003950:	2b47      	cmp	r3, #71	@ 0x47
 8003952:	4680      	mov	r8, r0
 8003954:	d129      	bne.n	80039aa <_printf_float+0x172>
 8003956:	1cc8      	adds	r0, r1, #3
 8003958:	db02      	blt.n	8003960 <_printf_float+0x128>
 800395a:	6863      	ldr	r3, [r4, #4]
 800395c:	4299      	cmp	r1, r3
 800395e:	dd41      	ble.n	80039e4 <_printf_float+0x1ac>
 8003960:	f1aa 0a02 	sub.w	sl, sl, #2
 8003964:	fa5f fa8a 	uxtb.w	sl, sl
 8003968:	3901      	subs	r1, #1
 800396a:	4652      	mov	r2, sl
 800396c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003970:	9109      	str	r1, [sp, #36]	@ 0x24
 8003972:	f7ff ff26 	bl	80037c2 <__exponent>
 8003976:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003978:	1813      	adds	r3, r2, r0
 800397a:	2a01      	cmp	r2, #1
 800397c:	4681      	mov	r9, r0
 800397e:	6123      	str	r3, [r4, #16]
 8003980:	dc02      	bgt.n	8003988 <_printf_float+0x150>
 8003982:	6822      	ldr	r2, [r4, #0]
 8003984:	07d2      	lsls	r2, r2, #31
 8003986:	d501      	bpl.n	800398c <_printf_float+0x154>
 8003988:	3301      	adds	r3, #1
 800398a:	6123      	str	r3, [r4, #16]
 800398c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0a2      	beq.n	80038da <_printf_float+0xa2>
 8003994:	232d      	movs	r3, #45	@ 0x2d
 8003996:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800399a:	e79e      	b.n	80038da <_printf_float+0xa2>
 800399c:	9a06      	ldr	r2, [sp, #24]
 800399e:	2a47      	cmp	r2, #71	@ 0x47
 80039a0:	d1c2      	bne.n	8003928 <_printf_float+0xf0>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1c0      	bne.n	8003928 <_printf_float+0xf0>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e7bd      	b.n	8003926 <_printf_float+0xee>
 80039aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80039ae:	d9db      	bls.n	8003968 <_printf_float+0x130>
 80039b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80039b4:	d118      	bne.n	80039e8 <_printf_float+0x1b0>
 80039b6:	2900      	cmp	r1, #0
 80039b8:	6863      	ldr	r3, [r4, #4]
 80039ba:	dd0b      	ble.n	80039d4 <_printf_float+0x19c>
 80039bc:	6121      	str	r1, [r4, #16]
 80039be:	b913      	cbnz	r3, 80039c6 <_printf_float+0x18e>
 80039c0:	6822      	ldr	r2, [r4, #0]
 80039c2:	07d0      	lsls	r0, r2, #31
 80039c4:	d502      	bpl.n	80039cc <_printf_float+0x194>
 80039c6:	3301      	adds	r3, #1
 80039c8:	440b      	add	r3, r1
 80039ca:	6123      	str	r3, [r4, #16]
 80039cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80039ce:	f04f 0900 	mov.w	r9, #0
 80039d2:	e7db      	b.n	800398c <_printf_float+0x154>
 80039d4:	b913      	cbnz	r3, 80039dc <_printf_float+0x1a4>
 80039d6:	6822      	ldr	r2, [r4, #0]
 80039d8:	07d2      	lsls	r2, r2, #31
 80039da:	d501      	bpl.n	80039e0 <_printf_float+0x1a8>
 80039dc:	3302      	adds	r3, #2
 80039de:	e7f4      	b.n	80039ca <_printf_float+0x192>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e7f2      	b.n	80039ca <_printf_float+0x192>
 80039e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80039e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80039ea:	4299      	cmp	r1, r3
 80039ec:	db05      	blt.n	80039fa <_printf_float+0x1c2>
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	6121      	str	r1, [r4, #16]
 80039f2:	07d8      	lsls	r0, r3, #31
 80039f4:	d5ea      	bpl.n	80039cc <_printf_float+0x194>
 80039f6:	1c4b      	adds	r3, r1, #1
 80039f8:	e7e7      	b.n	80039ca <_printf_float+0x192>
 80039fa:	2900      	cmp	r1, #0
 80039fc:	bfd4      	ite	le
 80039fe:	f1c1 0202 	rsble	r2, r1, #2
 8003a02:	2201      	movgt	r2, #1
 8003a04:	4413      	add	r3, r2
 8003a06:	e7e0      	b.n	80039ca <_printf_float+0x192>
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	055a      	lsls	r2, r3, #21
 8003a0c:	d407      	bmi.n	8003a1e <_printf_float+0x1e6>
 8003a0e:	6923      	ldr	r3, [r4, #16]
 8003a10:	4642      	mov	r2, r8
 8003a12:	4631      	mov	r1, r6
 8003a14:	4628      	mov	r0, r5
 8003a16:	47b8      	blx	r7
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d12b      	bne.n	8003a74 <_printf_float+0x23c>
 8003a1c:	e767      	b.n	80038ee <_printf_float+0xb6>
 8003a1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003a22:	f240 80dd 	bls.w	8003be0 <_printf_float+0x3a8>
 8003a26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f7fd f86b 	bl	8000b08 <__aeabi_dcmpeq>
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d033      	beq.n	8003a9e <_printf_float+0x266>
 8003a36:	4a37      	ldr	r2, [pc, #220]	@ (8003b14 <_printf_float+0x2dc>)
 8003a38:	2301      	movs	r3, #1
 8003a3a:	4631      	mov	r1, r6
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	47b8      	blx	r7
 8003a40:	3001      	adds	r0, #1
 8003a42:	f43f af54 	beq.w	80038ee <_printf_float+0xb6>
 8003a46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003a4a:	4543      	cmp	r3, r8
 8003a4c:	db02      	blt.n	8003a54 <_printf_float+0x21c>
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	07d8      	lsls	r0, r3, #31
 8003a52:	d50f      	bpl.n	8003a74 <_printf_float+0x23c>
 8003a54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a58:	4631      	mov	r1, r6
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	47b8      	blx	r7
 8003a5e:	3001      	adds	r0, #1
 8003a60:	f43f af45 	beq.w	80038ee <_printf_float+0xb6>
 8003a64:	f04f 0900 	mov.w	r9, #0
 8003a68:	f108 38ff 	add.w	r8, r8, #4294967295
 8003a6c:	f104 0a1a 	add.w	sl, r4, #26
 8003a70:	45c8      	cmp	r8, r9
 8003a72:	dc09      	bgt.n	8003a88 <_printf_float+0x250>
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	079b      	lsls	r3, r3, #30
 8003a78:	f100 8103 	bmi.w	8003c82 <_printf_float+0x44a>
 8003a7c:	68e0      	ldr	r0, [r4, #12]
 8003a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003a80:	4298      	cmp	r0, r3
 8003a82:	bfb8      	it	lt
 8003a84:	4618      	movlt	r0, r3
 8003a86:	e734      	b.n	80038f2 <_printf_float+0xba>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	4652      	mov	r2, sl
 8003a8c:	4631      	mov	r1, r6
 8003a8e:	4628      	mov	r0, r5
 8003a90:	47b8      	blx	r7
 8003a92:	3001      	adds	r0, #1
 8003a94:	f43f af2b 	beq.w	80038ee <_printf_float+0xb6>
 8003a98:	f109 0901 	add.w	r9, r9, #1
 8003a9c:	e7e8      	b.n	8003a70 <_printf_float+0x238>
 8003a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	dc39      	bgt.n	8003b18 <_printf_float+0x2e0>
 8003aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b14 <_printf_float+0x2dc>)
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	4631      	mov	r1, r6
 8003aaa:	4628      	mov	r0, r5
 8003aac:	47b8      	blx	r7
 8003aae:	3001      	adds	r0, #1
 8003ab0:	f43f af1d 	beq.w	80038ee <_printf_float+0xb6>
 8003ab4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003ab8:	ea59 0303 	orrs.w	r3, r9, r3
 8003abc:	d102      	bne.n	8003ac4 <_printf_float+0x28c>
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	07d9      	lsls	r1, r3, #31
 8003ac2:	d5d7      	bpl.n	8003a74 <_printf_float+0x23c>
 8003ac4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ac8:	4631      	mov	r1, r6
 8003aca:	4628      	mov	r0, r5
 8003acc:	47b8      	blx	r7
 8003ace:	3001      	adds	r0, #1
 8003ad0:	f43f af0d 	beq.w	80038ee <_printf_float+0xb6>
 8003ad4:	f04f 0a00 	mov.w	sl, #0
 8003ad8:	f104 0b1a 	add.w	fp, r4, #26
 8003adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ade:	425b      	negs	r3, r3
 8003ae0:	4553      	cmp	r3, sl
 8003ae2:	dc01      	bgt.n	8003ae8 <_printf_float+0x2b0>
 8003ae4:	464b      	mov	r3, r9
 8003ae6:	e793      	b.n	8003a10 <_printf_float+0x1d8>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	465a      	mov	r2, fp
 8003aec:	4631      	mov	r1, r6
 8003aee:	4628      	mov	r0, r5
 8003af0:	47b8      	blx	r7
 8003af2:	3001      	adds	r0, #1
 8003af4:	f43f aefb 	beq.w	80038ee <_printf_float+0xb6>
 8003af8:	f10a 0a01 	add.w	sl, sl, #1
 8003afc:	e7ee      	b.n	8003adc <_printf_float+0x2a4>
 8003afe:	bf00      	nop
 8003b00:	7fefffff 	.word	0x7fefffff
 8003b04:	080060c4 	.word	0x080060c4
 8003b08:	080060c8 	.word	0x080060c8
 8003b0c:	080060cc 	.word	0x080060cc
 8003b10:	080060d0 	.word	0x080060d0
 8003b14:	080060d4 	.word	0x080060d4
 8003b18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003b1e:	4553      	cmp	r3, sl
 8003b20:	bfa8      	it	ge
 8003b22:	4653      	movge	r3, sl
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	4699      	mov	r9, r3
 8003b28:	dc36      	bgt.n	8003b98 <_printf_float+0x360>
 8003b2a:	f04f 0b00 	mov.w	fp, #0
 8003b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b32:	f104 021a 	add.w	r2, r4, #26
 8003b36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b38:	9306      	str	r3, [sp, #24]
 8003b3a:	eba3 0309 	sub.w	r3, r3, r9
 8003b3e:	455b      	cmp	r3, fp
 8003b40:	dc31      	bgt.n	8003ba6 <_printf_float+0x36e>
 8003b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b44:	459a      	cmp	sl, r3
 8003b46:	dc3a      	bgt.n	8003bbe <_printf_float+0x386>
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	07da      	lsls	r2, r3, #31
 8003b4c:	d437      	bmi.n	8003bbe <_printf_float+0x386>
 8003b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b50:	ebaa 0903 	sub.w	r9, sl, r3
 8003b54:	9b06      	ldr	r3, [sp, #24]
 8003b56:	ebaa 0303 	sub.w	r3, sl, r3
 8003b5a:	4599      	cmp	r9, r3
 8003b5c:	bfa8      	it	ge
 8003b5e:	4699      	movge	r9, r3
 8003b60:	f1b9 0f00 	cmp.w	r9, #0
 8003b64:	dc33      	bgt.n	8003bce <_printf_float+0x396>
 8003b66:	f04f 0800 	mov.w	r8, #0
 8003b6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b6e:	f104 0b1a 	add.w	fp, r4, #26
 8003b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b74:	ebaa 0303 	sub.w	r3, sl, r3
 8003b78:	eba3 0309 	sub.w	r3, r3, r9
 8003b7c:	4543      	cmp	r3, r8
 8003b7e:	f77f af79 	ble.w	8003a74 <_printf_float+0x23c>
 8003b82:	2301      	movs	r3, #1
 8003b84:	465a      	mov	r2, fp
 8003b86:	4631      	mov	r1, r6
 8003b88:	4628      	mov	r0, r5
 8003b8a:	47b8      	blx	r7
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	f43f aeae 	beq.w	80038ee <_printf_float+0xb6>
 8003b92:	f108 0801 	add.w	r8, r8, #1
 8003b96:	e7ec      	b.n	8003b72 <_printf_float+0x33a>
 8003b98:	4642      	mov	r2, r8
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	47b8      	blx	r7
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d1c2      	bne.n	8003b2a <_printf_float+0x2f2>
 8003ba4:	e6a3      	b.n	80038ee <_printf_float+0xb6>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	4631      	mov	r1, r6
 8003baa:	4628      	mov	r0, r5
 8003bac:	9206      	str	r2, [sp, #24]
 8003bae:	47b8      	blx	r7
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	f43f ae9c 	beq.w	80038ee <_printf_float+0xb6>
 8003bb6:	9a06      	ldr	r2, [sp, #24]
 8003bb8:	f10b 0b01 	add.w	fp, fp, #1
 8003bbc:	e7bb      	b.n	8003b36 <_printf_float+0x2fe>
 8003bbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bc2:	4631      	mov	r1, r6
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	47b8      	blx	r7
 8003bc8:	3001      	adds	r0, #1
 8003bca:	d1c0      	bne.n	8003b4e <_printf_float+0x316>
 8003bcc:	e68f      	b.n	80038ee <_printf_float+0xb6>
 8003bce:	9a06      	ldr	r2, [sp, #24]
 8003bd0:	464b      	mov	r3, r9
 8003bd2:	4442      	add	r2, r8
 8003bd4:	4631      	mov	r1, r6
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	47b8      	blx	r7
 8003bda:	3001      	adds	r0, #1
 8003bdc:	d1c3      	bne.n	8003b66 <_printf_float+0x32e>
 8003bde:	e686      	b.n	80038ee <_printf_float+0xb6>
 8003be0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003be4:	f1ba 0f01 	cmp.w	sl, #1
 8003be8:	dc01      	bgt.n	8003bee <_printf_float+0x3b6>
 8003bea:	07db      	lsls	r3, r3, #31
 8003bec:	d536      	bpl.n	8003c5c <_printf_float+0x424>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	4642      	mov	r2, r8
 8003bf2:	4631      	mov	r1, r6
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	47b8      	blx	r7
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	f43f ae78 	beq.w	80038ee <_printf_float+0xb6>
 8003bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c02:	4631      	mov	r1, r6
 8003c04:	4628      	mov	r0, r5
 8003c06:	47b8      	blx	r7
 8003c08:	3001      	adds	r0, #1
 8003c0a:	f43f ae70 	beq.w	80038ee <_printf_float+0xb6>
 8003c0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003c12:	2200      	movs	r2, #0
 8003c14:	2300      	movs	r3, #0
 8003c16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c1a:	f7fc ff75 	bl	8000b08 <__aeabi_dcmpeq>
 8003c1e:	b9c0      	cbnz	r0, 8003c52 <_printf_float+0x41a>
 8003c20:	4653      	mov	r3, sl
 8003c22:	f108 0201 	add.w	r2, r8, #1
 8003c26:	4631      	mov	r1, r6
 8003c28:	4628      	mov	r0, r5
 8003c2a:	47b8      	blx	r7
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	d10c      	bne.n	8003c4a <_printf_float+0x412>
 8003c30:	e65d      	b.n	80038ee <_printf_float+0xb6>
 8003c32:	2301      	movs	r3, #1
 8003c34:	465a      	mov	r2, fp
 8003c36:	4631      	mov	r1, r6
 8003c38:	4628      	mov	r0, r5
 8003c3a:	47b8      	blx	r7
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	f43f ae56 	beq.w	80038ee <_printf_float+0xb6>
 8003c42:	f108 0801 	add.w	r8, r8, #1
 8003c46:	45d0      	cmp	r8, sl
 8003c48:	dbf3      	blt.n	8003c32 <_printf_float+0x3fa>
 8003c4a:	464b      	mov	r3, r9
 8003c4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003c50:	e6df      	b.n	8003a12 <_printf_float+0x1da>
 8003c52:	f04f 0800 	mov.w	r8, #0
 8003c56:	f104 0b1a 	add.w	fp, r4, #26
 8003c5a:	e7f4      	b.n	8003c46 <_printf_float+0x40e>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	4642      	mov	r2, r8
 8003c60:	e7e1      	b.n	8003c26 <_printf_float+0x3ee>
 8003c62:	2301      	movs	r3, #1
 8003c64:	464a      	mov	r2, r9
 8003c66:	4631      	mov	r1, r6
 8003c68:	4628      	mov	r0, r5
 8003c6a:	47b8      	blx	r7
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	f43f ae3e 	beq.w	80038ee <_printf_float+0xb6>
 8003c72:	f108 0801 	add.w	r8, r8, #1
 8003c76:	68e3      	ldr	r3, [r4, #12]
 8003c78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003c7a:	1a5b      	subs	r3, r3, r1
 8003c7c:	4543      	cmp	r3, r8
 8003c7e:	dcf0      	bgt.n	8003c62 <_printf_float+0x42a>
 8003c80:	e6fc      	b.n	8003a7c <_printf_float+0x244>
 8003c82:	f04f 0800 	mov.w	r8, #0
 8003c86:	f104 0919 	add.w	r9, r4, #25
 8003c8a:	e7f4      	b.n	8003c76 <_printf_float+0x43e>

08003c8c <_printf_common>:
 8003c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c90:	4616      	mov	r6, r2
 8003c92:	4698      	mov	r8, r3
 8003c94:	688a      	ldr	r2, [r1, #8]
 8003c96:	690b      	ldr	r3, [r1, #16]
 8003c98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	bfb8      	it	lt
 8003ca0:	4613      	movlt	r3, r2
 8003ca2:	6033      	str	r3, [r6, #0]
 8003ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ca8:	4607      	mov	r7, r0
 8003caa:	460c      	mov	r4, r1
 8003cac:	b10a      	cbz	r2, 8003cb2 <_printf_common+0x26>
 8003cae:	3301      	adds	r3, #1
 8003cb0:	6033      	str	r3, [r6, #0]
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	0699      	lsls	r1, r3, #26
 8003cb6:	bf42      	ittt	mi
 8003cb8:	6833      	ldrmi	r3, [r6, #0]
 8003cba:	3302      	addmi	r3, #2
 8003cbc:	6033      	strmi	r3, [r6, #0]
 8003cbe:	6825      	ldr	r5, [r4, #0]
 8003cc0:	f015 0506 	ands.w	r5, r5, #6
 8003cc4:	d106      	bne.n	8003cd4 <_printf_common+0x48>
 8003cc6:	f104 0a19 	add.w	sl, r4, #25
 8003cca:	68e3      	ldr	r3, [r4, #12]
 8003ccc:	6832      	ldr	r2, [r6, #0]
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	42ab      	cmp	r3, r5
 8003cd2:	dc26      	bgt.n	8003d22 <_printf_common+0x96>
 8003cd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cd8:	6822      	ldr	r2, [r4, #0]
 8003cda:	3b00      	subs	r3, #0
 8003cdc:	bf18      	it	ne
 8003cde:	2301      	movne	r3, #1
 8003ce0:	0692      	lsls	r2, r2, #26
 8003ce2:	d42b      	bmi.n	8003d3c <_printf_common+0xb0>
 8003ce4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ce8:	4641      	mov	r1, r8
 8003cea:	4638      	mov	r0, r7
 8003cec:	47c8      	blx	r9
 8003cee:	3001      	adds	r0, #1
 8003cf0:	d01e      	beq.n	8003d30 <_printf_common+0xa4>
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	6922      	ldr	r2, [r4, #16]
 8003cf6:	f003 0306 	and.w	r3, r3, #6
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	bf02      	ittt	eq
 8003cfe:	68e5      	ldreq	r5, [r4, #12]
 8003d00:	6833      	ldreq	r3, [r6, #0]
 8003d02:	1aed      	subeq	r5, r5, r3
 8003d04:	68a3      	ldr	r3, [r4, #8]
 8003d06:	bf0c      	ite	eq
 8003d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d0c:	2500      	movne	r5, #0
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	bfc4      	itt	gt
 8003d12:	1a9b      	subgt	r3, r3, r2
 8003d14:	18ed      	addgt	r5, r5, r3
 8003d16:	2600      	movs	r6, #0
 8003d18:	341a      	adds	r4, #26
 8003d1a:	42b5      	cmp	r5, r6
 8003d1c:	d11a      	bne.n	8003d54 <_printf_common+0xc8>
 8003d1e:	2000      	movs	r0, #0
 8003d20:	e008      	b.n	8003d34 <_printf_common+0xa8>
 8003d22:	2301      	movs	r3, #1
 8003d24:	4652      	mov	r2, sl
 8003d26:	4641      	mov	r1, r8
 8003d28:	4638      	mov	r0, r7
 8003d2a:	47c8      	blx	r9
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d103      	bne.n	8003d38 <_printf_common+0xac>
 8003d30:	f04f 30ff 	mov.w	r0, #4294967295
 8003d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d38:	3501      	adds	r5, #1
 8003d3a:	e7c6      	b.n	8003cca <_printf_common+0x3e>
 8003d3c:	18e1      	adds	r1, r4, r3
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	2030      	movs	r0, #48	@ 0x30
 8003d42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d46:	4422      	add	r2, r4
 8003d48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d50:	3302      	adds	r3, #2
 8003d52:	e7c7      	b.n	8003ce4 <_printf_common+0x58>
 8003d54:	2301      	movs	r3, #1
 8003d56:	4622      	mov	r2, r4
 8003d58:	4641      	mov	r1, r8
 8003d5a:	4638      	mov	r0, r7
 8003d5c:	47c8      	blx	r9
 8003d5e:	3001      	adds	r0, #1
 8003d60:	d0e6      	beq.n	8003d30 <_printf_common+0xa4>
 8003d62:	3601      	adds	r6, #1
 8003d64:	e7d9      	b.n	8003d1a <_printf_common+0x8e>
	...

08003d68 <_printf_i>:
 8003d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d6c:	7e0f      	ldrb	r7, [r1, #24]
 8003d6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d70:	2f78      	cmp	r7, #120	@ 0x78
 8003d72:	4691      	mov	r9, r2
 8003d74:	4680      	mov	r8, r0
 8003d76:	460c      	mov	r4, r1
 8003d78:	469a      	mov	sl, r3
 8003d7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d7e:	d807      	bhi.n	8003d90 <_printf_i+0x28>
 8003d80:	2f62      	cmp	r7, #98	@ 0x62
 8003d82:	d80a      	bhi.n	8003d9a <_printf_i+0x32>
 8003d84:	2f00      	cmp	r7, #0
 8003d86:	f000 80d2 	beq.w	8003f2e <_printf_i+0x1c6>
 8003d8a:	2f58      	cmp	r7, #88	@ 0x58
 8003d8c:	f000 80b9 	beq.w	8003f02 <_printf_i+0x19a>
 8003d90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d98:	e03a      	b.n	8003e10 <_printf_i+0xa8>
 8003d9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d9e:	2b15      	cmp	r3, #21
 8003da0:	d8f6      	bhi.n	8003d90 <_printf_i+0x28>
 8003da2:	a101      	add	r1, pc, #4	@ (adr r1, 8003da8 <_printf_i+0x40>)
 8003da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003da8:	08003e01 	.word	0x08003e01
 8003dac:	08003e15 	.word	0x08003e15
 8003db0:	08003d91 	.word	0x08003d91
 8003db4:	08003d91 	.word	0x08003d91
 8003db8:	08003d91 	.word	0x08003d91
 8003dbc:	08003d91 	.word	0x08003d91
 8003dc0:	08003e15 	.word	0x08003e15
 8003dc4:	08003d91 	.word	0x08003d91
 8003dc8:	08003d91 	.word	0x08003d91
 8003dcc:	08003d91 	.word	0x08003d91
 8003dd0:	08003d91 	.word	0x08003d91
 8003dd4:	08003f15 	.word	0x08003f15
 8003dd8:	08003e3f 	.word	0x08003e3f
 8003ddc:	08003ecf 	.word	0x08003ecf
 8003de0:	08003d91 	.word	0x08003d91
 8003de4:	08003d91 	.word	0x08003d91
 8003de8:	08003f37 	.word	0x08003f37
 8003dec:	08003d91 	.word	0x08003d91
 8003df0:	08003e3f 	.word	0x08003e3f
 8003df4:	08003d91 	.word	0x08003d91
 8003df8:	08003d91 	.word	0x08003d91
 8003dfc:	08003ed7 	.word	0x08003ed7
 8003e00:	6833      	ldr	r3, [r6, #0]
 8003e02:	1d1a      	adds	r2, r3, #4
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6032      	str	r2, [r6, #0]
 8003e08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e10:	2301      	movs	r3, #1
 8003e12:	e09d      	b.n	8003f50 <_printf_i+0x1e8>
 8003e14:	6833      	ldr	r3, [r6, #0]
 8003e16:	6820      	ldr	r0, [r4, #0]
 8003e18:	1d19      	adds	r1, r3, #4
 8003e1a:	6031      	str	r1, [r6, #0]
 8003e1c:	0606      	lsls	r6, r0, #24
 8003e1e:	d501      	bpl.n	8003e24 <_printf_i+0xbc>
 8003e20:	681d      	ldr	r5, [r3, #0]
 8003e22:	e003      	b.n	8003e2c <_printf_i+0xc4>
 8003e24:	0645      	lsls	r5, r0, #25
 8003e26:	d5fb      	bpl.n	8003e20 <_printf_i+0xb8>
 8003e28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e2c:	2d00      	cmp	r5, #0
 8003e2e:	da03      	bge.n	8003e38 <_printf_i+0xd0>
 8003e30:	232d      	movs	r3, #45	@ 0x2d
 8003e32:	426d      	negs	r5, r5
 8003e34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e38:	4859      	ldr	r0, [pc, #356]	@ (8003fa0 <_printf_i+0x238>)
 8003e3a:	230a      	movs	r3, #10
 8003e3c:	e011      	b.n	8003e62 <_printf_i+0xfa>
 8003e3e:	6821      	ldr	r1, [r4, #0]
 8003e40:	6833      	ldr	r3, [r6, #0]
 8003e42:	0608      	lsls	r0, r1, #24
 8003e44:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e48:	d402      	bmi.n	8003e50 <_printf_i+0xe8>
 8003e4a:	0649      	lsls	r1, r1, #25
 8003e4c:	bf48      	it	mi
 8003e4e:	b2ad      	uxthmi	r5, r5
 8003e50:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e52:	4853      	ldr	r0, [pc, #332]	@ (8003fa0 <_printf_i+0x238>)
 8003e54:	6033      	str	r3, [r6, #0]
 8003e56:	bf14      	ite	ne
 8003e58:	230a      	movne	r3, #10
 8003e5a:	2308      	moveq	r3, #8
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e62:	6866      	ldr	r6, [r4, #4]
 8003e64:	60a6      	str	r6, [r4, #8]
 8003e66:	2e00      	cmp	r6, #0
 8003e68:	bfa2      	ittt	ge
 8003e6a:	6821      	ldrge	r1, [r4, #0]
 8003e6c:	f021 0104 	bicge.w	r1, r1, #4
 8003e70:	6021      	strge	r1, [r4, #0]
 8003e72:	b90d      	cbnz	r5, 8003e78 <_printf_i+0x110>
 8003e74:	2e00      	cmp	r6, #0
 8003e76:	d04b      	beq.n	8003f10 <_printf_i+0x1a8>
 8003e78:	4616      	mov	r6, r2
 8003e7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e7e:	fb03 5711 	mls	r7, r3, r1, r5
 8003e82:	5dc7      	ldrb	r7, [r0, r7]
 8003e84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e88:	462f      	mov	r7, r5
 8003e8a:	42bb      	cmp	r3, r7
 8003e8c:	460d      	mov	r5, r1
 8003e8e:	d9f4      	bls.n	8003e7a <_printf_i+0x112>
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d10b      	bne.n	8003eac <_printf_i+0x144>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	07df      	lsls	r7, r3, #31
 8003e98:	d508      	bpl.n	8003eac <_printf_i+0x144>
 8003e9a:	6923      	ldr	r3, [r4, #16]
 8003e9c:	6861      	ldr	r1, [r4, #4]
 8003e9e:	4299      	cmp	r1, r3
 8003ea0:	bfde      	ittt	le
 8003ea2:	2330      	movle	r3, #48	@ 0x30
 8003ea4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ea8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003eac:	1b92      	subs	r2, r2, r6
 8003eae:	6122      	str	r2, [r4, #16]
 8003eb0:	f8cd a000 	str.w	sl, [sp]
 8003eb4:	464b      	mov	r3, r9
 8003eb6:	aa03      	add	r2, sp, #12
 8003eb8:	4621      	mov	r1, r4
 8003eba:	4640      	mov	r0, r8
 8003ebc:	f7ff fee6 	bl	8003c8c <_printf_common>
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	d14a      	bne.n	8003f5a <_printf_i+0x1f2>
 8003ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec8:	b004      	add	sp, #16
 8003eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	f043 0320 	orr.w	r3, r3, #32
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	4833      	ldr	r0, [pc, #204]	@ (8003fa4 <_printf_i+0x23c>)
 8003ed8:	2778      	movs	r7, #120	@ 0x78
 8003eda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	6831      	ldr	r1, [r6, #0]
 8003ee2:	061f      	lsls	r7, r3, #24
 8003ee4:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ee8:	d402      	bmi.n	8003ef0 <_printf_i+0x188>
 8003eea:	065f      	lsls	r7, r3, #25
 8003eec:	bf48      	it	mi
 8003eee:	b2ad      	uxthmi	r5, r5
 8003ef0:	6031      	str	r1, [r6, #0]
 8003ef2:	07d9      	lsls	r1, r3, #31
 8003ef4:	bf44      	itt	mi
 8003ef6:	f043 0320 	orrmi.w	r3, r3, #32
 8003efa:	6023      	strmi	r3, [r4, #0]
 8003efc:	b11d      	cbz	r5, 8003f06 <_printf_i+0x19e>
 8003efe:	2310      	movs	r3, #16
 8003f00:	e7ac      	b.n	8003e5c <_printf_i+0xf4>
 8003f02:	4827      	ldr	r0, [pc, #156]	@ (8003fa0 <_printf_i+0x238>)
 8003f04:	e7e9      	b.n	8003eda <_printf_i+0x172>
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	f023 0320 	bic.w	r3, r3, #32
 8003f0c:	6023      	str	r3, [r4, #0]
 8003f0e:	e7f6      	b.n	8003efe <_printf_i+0x196>
 8003f10:	4616      	mov	r6, r2
 8003f12:	e7bd      	b.n	8003e90 <_printf_i+0x128>
 8003f14:	6833      	ldr	r3, [r6, #0]
 8003f16:	6825      	ldr	r5, [r4, #0]
 8003f18:	6961      	ldr	r1, [r4, #20]
 8003f1a:	1d18      	adds	r0, r3, #4
 8003f1c:	6030      	str	r0, [r6, #0]
 8003f1e:	062e      	lsls	r6, r5, #24
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	d501      	bpl.n	8003f28 <_printf_i+0x1c0>
 8003f24:	6019      	str	r1, [r3, #0]
 8003f26:	e002      	b.n	8003f2e <_printf_i+0x1c6>
 8003f28:	0668      	lsls	r0, r5, #25
 8003f2a:	d5fb      	bpl.n	8003f24 <_printf_i+0x1bc>
 8003f2c:	8019      	strh	r1, [r3, #0]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	6123      	str	r3, [r4, #16]
 8003f32:	4616      	mov	r6, r2
 8003f34:	e7bc      	b.n	8003eb0 <_printf_i+0x148>
 8003f36:	6833      	ldr	r3, [r6, #0]
 8003f38:	1d1a      	adds	r2, r3, #4
 8003f3a:	6032      	str	r2, [r6, #0]
 8003f3c:	681e      	ldr	r6, [r3, #0]
 8003f3e:	6862      	ldr	r2, [r4, #4]
 8003f40:	2100      	movs	r1, #0
 8003f42:	4630      	mov	r0, r6
 8003f44:	f7fc f964 	bl	8000210 <memchr>
 8003f48:	b108      	cbz	r0, 8003f4e <_printf_i+0x1e6>
 8003f4a:	1b80      	subs	r0, r0, r6
 8003f4c:	6060      	str	r0, [r4, #4]
 8003f4e:	6863      	ldr	r3, [r4, #4]
 8003f50:	6123      	str	r3, [r4, #16]
 8003f52:	2300      	movs	r3, #0
 8003f54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f58:	e7aa      	b.n	8003eb0 <_printf_i+0x148>
 8003f5a:	6923      	ldr	r3, [r4, #16]
 8003f5c:	4632      	mov	r2, r6
 8003f5e:	4649      	mov	r1, r9
 8003f60:	4640      	mov	r0, r8
 8003f62:	47d0      	blx	sl
 8003f64:	3001      	adds	r0, #1
 8003f66:	d0ad      	beq.n	8003ec4 <_printf_i+0x15c>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	079b      	lsls	r3, r3, #30
 8003f6c:	d413      	bmi.n	8003f96 <_printf_i+0x22e>
 8003f6e:	68e0      	ldr	r0, [r4, #12]
 8003f70:	9b03      	ldr	r3, [sp, #12]
 8003f72:	4298      	cmp	r0, r3
 8003f74:	bfb8      	it	lt
 8003f76:	4618      	movlt	r0, r3
 8003f78:	e7a6      	b.n	8003ec8 <_printf_i+0x160>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	4632      	mov	r2, r6
 8003f7e:	4649      	mov	r1, r9
 8003f80:	4640      	mov	r0, r8
 8003f82:	47d0      	blx	sl
 8003f84:	3001      	adds	r0, #1
 8003f86:	d09d      	beq.n	8003ec4 <_printf_i+0x15c>
 8003f88:	3501      	adds	r5, #1
 8003f8a:	68e3      	ldr	r3, [r4, #12]
 8003f8c:	9903      	ldr	r1, [sp, #12]
 8003f8e:	1a5b      	subs	r3, r3, r1
 8003f90:	42ab      	cmp	r3, r5
 8003f92:	dcf2      	bgt.n	8003f7a <_printf_i+0x212>
 8003f94:	e7eb      	b.n	8003f6e <_printf_i+0x206>
 8003f96:	2500      	movs	r5, #0
 8003f98:	f104 0619 	add.w	r6, r4, #25
 8003f9c:	e7f5      	b.n	8003f8a <_printf_i+0x222>
 8003f9e:	bf00      	nop
 8003fa0:	080060d6 	.word	0x080060d6
 8003fa4:	080060e7 	.word	0x080060e7

08003fa8 <std>:
 8003fa8:	2300      	movs	r3, #0
 8003faa:	b510      	push	{r4, lr}
 8003fac:	4604      	mov	r4, r0
 8003fae:	e9c0 3300 	strd	r3, r3, [r0]
 8003fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fb6:	6083      	str	r3, [r0, #8]
 8003fb8:	8181      	strh	r1, [r0, #12]
 8003fba:	6643      	str	r3, [r0, #100]	@ 0x64
 8003fbc:	81c2      	strh	r2, [r0, #14]
 8003fbe:	6183      	str	r3, [r0, #24]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	2208      	movs	r2, #8
 8003fc4:	305c      	adds	r0, #92	@ 0x5c
 8003fc6:	f000 f906 	bl	80041d6 <memset>
 8003fca:	4b0d      	ldr	r3, [pc, #52]	@ (8004000 <std+0x58>)
 8003fcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8003fce:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <std+0x5c>)
 8003fd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004008 <std+0x60>)
 8003fd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800400c <std+0x64>)
 8003fd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003fda:	4b0d      	ldr	r3, [pc, #52]	@ (8004010 <std+0x68>)
 8003fdc:	6224      	str	r4, [r4, #32]
 8003fde:	429c      	cmp	r4, r3
 8003fe0:	d006      	beq.n	8003ff0 <std+0x48>
 8003fe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003fe6:	4294      	cmp	r4, r2
 8003fe8:	d002      	beq.n	8003ff0 <std+0x48>
 8003fea:	33d0      	adds	r3, #208	@ 0xd0
 8003fec:	429c      	cmp	r4, r3
 8003fee:	d105      	bne.n	8003ffc <std+0x54>
 8003ff0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ff8:	f000 b96a 	b.w	80042d0 <__retarget_lock_init_recursive>
 8003ffc:	bd10      	pop	{r4, pc}
 8003ffe:	bf00      	nop
 8004000:	08004151 	.word	0x08004151
 8004004:	08004173 	.word	0x08004173
 8004008:	080041ab 	.word	0x080041ab
 800400c:	080041cf 	.word	0x080041cf
 8004010:	20000290 	.word	0x20000290

08004014 <stdio_exit_handler>:
 8004014:	4a02      	ldr	r2, [pc, #8]	@ (8004020 <stdio_exit_handler+0xc>)
 8004016:	4903      	ldr	r1, [pc, #12]	@ (8004024 <stdio_exit_handler+0x10>)
 8004018:	4803      	ldr	r0, [pc, #12]	@ (8004028 <stdio_exit_handler+0x14>)
 800401a:	f000 b869 	b.w	80040f0 <_fwalk_sglue>
 800401e:	bf00      	nop
 8004020:	2000000c 	.word	0x2000000c
 8004024:	08005c01 	.word	0x08005c01
 8004028:	2000001c 	.word	0x2000001c

0800402c <cleanup_stdio>:
 800402c:	6841      	ldr	r1, [r0, #4]
 800402e:	4b0c      	ldr	r3, [pc, #48]	@ (8004060 <cleanup_stdio+0x34>)
 8004030:	4299      	cmp	r1, r3
 8004032:	b510      	push	{r4, lr}
 8004034:	4604      	mov	r4, r0
 8004036:	d001      	beq.n	800403c <cleanup_stdio+0x10>
 8004038:	f001 fde2 	bl	8005c00 <_fflush_r>
 800403c:	68a1      	ldr	r1, [r4, #8]
 800403e:	4b09      	ldr	r3, [pc, #36]	@ (8004064 <cleanup_stdio+0x38>)
 8004040:	4299      	cmp	r1, r3
 8004042:	d002      	beq.n	800404a <cleanup_stdio+0x1e>
 8004044:	4620      	mov	r0, r4
 8004046:	f001 fddb 	bl	8005c00 <_fflush_r>
 800404a:	68e1      	ldr	r1, [r4, #12]
 800404c:	4b06      	ldr	r3, [pc, #24]	@ (8004068 <cleanup_stdio+0x3c>)
 800404e:	4299      	cmp	r1, r3
 8004050:	d004      	beq.n	800405c <cleanup_stdio+0x30>
 8004052:	4620      	mov	r0, r4
 8004054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004058:	f001 bdd2 	b.w	8005c00 <_fflush_r>
 800405c:	bd10      	pop	{r4, pc}
 800405e:	bf00      	nop
 8004060:	20000290 	.word	0x20000290
 8004064:	200002f8 	.word	0x200002f8
 8004068:	20000360 	.word	0x20000360

0800406c <global_stdio_init.part.0>:
 800406c:	b510      	push	{r4, lr}
 800406e:	4b0b      	ldr	r3, [pc, #44]	@ (800409c <global_stdio_init.part.0+0x30>)
 8004070:	4c0b      	ldr	r4, [pc, #44]	@ (80040a0 <global_stdio_init.part.0+0x34>)
 8004072:	4a0c      	ldr	r2, [pc, #48]	@ (80040a4 <global_stdio_init.part.0+0x38>)
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	4620      	mov	r0, r4
 8004078:	2200      	movs	r2, #0
 800407a:	2104      	movs	r1, #4
 800407c:	f7ff ff94 	bl	8003fa8 <std>
 8004080:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004084:	2201      	movs	r2, #1
 8004086:	2109      	movs	r1, #9
 8004088:	f7ff ff8e 	bl	8003fa8 <std>
 800408c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004090:	2202      	movs	r2, #2
 8004092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004096:	2112      	movs	r1, #18
 8004098:	f7ff bf86 	b.w	8003fa8 <std>
 800409c:	200003c8 	.word	0x200003c8
 80040a0:	20000290 	.word	0x20000290
 80040a4:	08004015 	.word	0x08004015

080040a8 <__sfp_lock_acquire>:
 80040a8:	4801      	ldr	r0, [pc, #4]	@ (80040b0 <__sfp_lock_acquire+0x8>)
 80040aa:	f000 b912 	b.w	80042d2 <__retarget_lock_acquire_recursive>
 80040ae:	bf00      	nop
 80040b0:	200003d1 	.word	0x200003d1

080040b4 <__sfp_lock_release>:
 80040b4:	4801      	ldr	r0, [pc, #4]	@ (80040bc <__sfp_lock_release+0x8>)
 80040b6:	f000 b90d 	b.w	80042d4 <__retarget_lock_release_recursive>
 80040ba:	bf00      	nop
 80040bc:	200003d1 	.word	0x200003d1

080040c0 <__sinit>:
 80040c0:	b510      	push	{r4, lr}
 80040c2:	4604      	mov	r4, r0
 80040c4:	f7ff fff0 	bl	80040a8 <__sfp_lock_acquire>
 80040c8:	6a23      	ldr	r3, [r4, #32]
 80040ca:	b11b      	cbz	r3, 80040d4 <__sinit+0x14>
 80040cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040d0:	f7ff bff0 	b.w	80040b4 <__sfp_lock_release>
 80040d4:	4b04      	ldr	r3, [pc, #16]	@ (80040e8 <__sinit+0x28>)
 80040d6:	6223      	str	r3, [r4, #32]
 80040d8:	4b04      	ldr	r3, [pc, #16]	@ (80040ec <__sinit+0x2c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f5      	bne.n	80040cc <__sinit+0xc>
 80040e0:	f7ff ffc4 	bl	800406c <global_stdio_init.part.0>
 80040e4:	e7f2      	b.n	80040cc <__sinit+0xc>
 80040e6:	bf00      	nop
 80040e8:	0800402d 	.word	0x0800402d
 80040ec:	200003c8 	.word	0x200003c8

080040f0 <_fwalk_sglue>:
 80040f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040f4:	4607      	mov	r7, r0
 80040f6:	4688      	mov	r8, r1
 80040f8:	4614      	mov	r4, r2
 80040fa:	2600      	movs	r6, #0
 80040fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004100:	f1b9 0901 	subs.w	r9, r9, #1
 8004104:	d505      	bpl.n	8004112 <_fwalk_sglue+0x22>
 8004106:	6824      	ldr	r4, [r4, #0]
 8004108:	2c00      	cmp	r4, #0
 800410a:	d1f7      	bne.n	80040fc <_fwalk_sglue+0xc>
 800410c:	4630      	mov	r0, r6
 800410e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004112:	89ab      	ldrh	r3, [r5, #12]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d907      	bls.n	8004128 <_fwalk_sglue+0x38>
 8004118:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800411c:	3301      	adds	r3, #1
 800411e:	d003      	beq.n	8004128 <_fwalk_sglue+0x38>
 8004120:	4629      	mov	r1, r5
 8004122:	4638      	mov	r0, r7
 8004124:	47c0      	blx	r8
 8004126:	4306      	orrs	r6, r0
 8004128:	3568      	adds	r5, #104	@ 0x68
 800412a:	e7e9      	b.n	8004100 <_fwalk_sglue+0x10>

0800412c <iprintf>:
 800412c:	b40f      	push	{r0, r1, r2, r3}
 800412e:	b507      	push	{r0, r1, r2, lr}
 8004130:	4906      	ldr	r1, [pc, #24]	@ (800414c <iprintf+0x20>)
 8004132:	ab04      	add	r3, sp, #16
 8004134:	6808      	ldr	r0, [r1, #0]
 8004136:	f853 2b04 	ldr.w	r2, [r3], #4
 800413a:	6881      	ldr	r1, [r0, #8]
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	f001 fbc3 	bl	80058c8 <_vfiprintf_r>
 8004142:	b003      	add	sp, #12
 8004144:	f85d eb04 	ldr.w	lr, [sp], #4
 8004148:	b004      	add	sp, #16
 800414a:	4770      	bx	lr
 800414c:	20000018 	.word	0x20000018

08004150 <__sread>:
 8004150:	b510      	push	{r4, lr}
 8004152:	460c      	mov	r4, r1
 8004154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004158:	f000 f86c 	bl	8004234 <_read_r>
 800415c:	2800      	cmp	r0, #0
 800415e:	bfab      	itete	ge
 8004160:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004162:	89a3      	ldrhlt	r3, [r4, #12]
 8004164:	181b      	addge	r3, r3, r0
 8004166:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800416a:	bfac      	ite	ge
 800416c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800416e:	81a3      	strhlt	r3, [r4, #12]
 8004170:	bd10      	pop	{r4, pc}

08004172 <__swrite>:
 8004172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004176:	461f      	mov	r7, r3
 8004178:	898b      	ldrh	r3, [r1, #12]
 800417a:	05db      	lsls	r3, r3, #23
 800417c:	4605      	mov	r5, r0
 800417e:	460c      	mov	r4, r1
 8004180:	4616      	mov	r6, r2
 8004182:	d505      	bpl.n	8004190 <__swrite+0x1e>
 8004184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004188:	2302      	movs	r3, #2
 800418a:	2200      	movs	r2, #0
 800418c:	f000 f840 	bl	8004210 <_lseek_r>
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004196:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800419a:	81a3      	strh	r3, [r4, #12]
 800419c:	4632      	mov	r2, r6
 800419e:	463b      	mov	r3, r7
 80041a0:	4628      	mov	r0, r5
 80041a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041a6:	f000 b857 	b.w	8004258 <_write_r>

080041aa <__sseek>:
 80041aa:	b510      	push	{r4, lr}
 80041ac:	460c      	mov	r4, r1
 80041ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041b2:	f000 f82d 	bl	8004210 <_lseek_r>
 80041b6:	1c43      	adds	r3, r0, #1
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	bf15      	itete	ne
 80041bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041c6:	81a3      	strheq	r3, [r4, #12]
 80041c8:	bf18      	it	ne
 80041ca:	81a3      	strhne	r3, [r4, #12]
 80041cc:	bd10      	pop	{r4, pc}

080041ce <__sclose>:
 80041ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d2:	f000 b80d 	b.w	80041f0 <_close_r>

080041d6 <memset>:
 80041d6:	4402      	add	r2, r0
 80041d8:	4603      	mov	r3, r0
 80041da:	4293      	cmp	r3, r2
 80041dc:	d100      	bne.n	80041e0 <memset+0xa>
 80041de:	4770      	bx	lr
 80041e0:	f803 1b01 	strb.w	r1, [r3], #1
 80041e4:	e7f9      	b.n	80041da <memset+0x4>
	...

080041e8 <_localeconv_r>:
 80041e8:	4800      	ldr	r0, [pc, #0]	@ (80041ec <_localeconv_r+0x4>)
 80041ea:	4770      	bx	lr
 80041ec:	20000158 	.word	0x20000158

080041f0 <_close_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4d06      	ldr	r5, [pc, #24]	@ (800420c <_close_r+0x1c>)
 80041f4:	2300      	movs	r3, #0
 80041f6:	4604      	mov	r4, r0
 80041f8:	4608      	mov	r0, r1
 80041fa:	602b      	str	r3, [r5, #0]
 80041fc:	f7fd fa4c 	bl	8001698 <_close>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_close_r+0x1a>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	b103      	cbz	r3, 800420a <_close_r+0x1a>
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	200003cc 	.word	0x200003cc

08004210 <_lseek_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4d07      	ldr	r5, [pc, #28]	@ (8004230 <_lseek_r+0x20>)
 8004214:	4604      	mov	r4, r0
 8004216:	4608      	mov	r0, r1
 8004218:	4611      	mov	r1, r2
 800421a:	2200      	movs	r2, #0
 800421c:	602a      	str	r2, [r5, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	f7fd fa61 	bl	80016e6 <_lseek>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	d102      	bne.n	800422e <_lseek_r+0x1e>
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	b103      	cbz	r3, 800422e <_lseek_r+0x1e>
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	200003cc 	.word	0x200003cc

08004234 <_read_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4d07      	ldr	r5, [pc, #28]	@ (8004254 <_read_r+0x20>)
 8004238:	4604      	mov	r4, r0
 800423a:	4608      	mov	r0, r1
 800423c:	4611      	mov	r1, r2
 800423e:	2200      	movs	r2, #0
 8004240:	602a      	str	r2, [r5, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	f7fd f9ef 	bl	8001626 <_read>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d102      	bne.n	8004252 <_read_r+0x1e>
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	b103      	cbz	r3, 8004252 <_read_r+0x1e>
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	bd38      	pop	{r3, r4, r5, pc}
 8004254:	200003cc 	.word	0x200003cc

08004258 <_write_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4d07      	ldr	r5, [pc, #28]	@ (8004278 <_write_r+0x20>)
 800425c:	4604      	mov	r4, r0
 800425e:	4608      	mov	r0, r1
 8004260:	4611      	mov	r1, r2
 8004262:	2200      	movs	r2, #0
 8004264:	602a      	str	r2, [r5, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	f7fd f9fa 	bl	8001660 <_write>
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	d102      	bne.n	8004276 <_write_r+0x1e>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	b103      	cbz	r3, 8004276 <_write_r+0x1e>
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	bd38      	pop	{r3, r4, r5, pc}
 8004278:	200003cc 	.word	0x200003cc

0800427c <__errno>:
 800427c:	4b01      	ldr	r3, [pc, #4]	@ (8004284 <__errno+0x8>)
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	20000018 	.word	0x20000018

08004288 <__libc_init_array>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	4d0d      	ldr	r5, [pc, #52]	@ (80042c0 <__libc_init_array+0x38>)
 800428c:	4c0d      	ldr	r4, [pc, #52]	@ (80042c4 <__libc_init_array+0x3c>)
 800428e:	1b64      	subs	r4, r4, r5
 8004290:	10a4      	asrs	r4, r4, #2
 8004292:	2600      	movs	r6, #0
 8004294:	42a6      	cmp	r6, r4
 8004296:	d109      	bne.n	80042ac <__libc_init_array+0x24>
 8004298:	4d0b      	ldr	r5, [pc, #44]	@ (80042c8 <__libc_init_array+0x40>)
 800429a:	4c0c      	ldr	r4, [pc, #48]	@ (80042cc <__libc_init_array+0x44>)
 800429c:	f001 febe 	bl	800601c <_init>
 80042a0:	1b64      	subs	r4, r4, r5
 80042a2:	10a4      	asrs	r4, r4, #2
 80042a4:	2600      	movs	r6, #0
 80042a6:	42a6      	cmp	r6, r4
 80042a8:	d105      	bne.n	80042b6 <__libc_init_array+0x2e>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b0:	4798      	blx	r3
 80042b2:	3601      	adds	r6, #1
 80042b4:	e7ee      	b.n	8004294 <__libc_init_array+0xc>
 80042b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ba:	4798      	blx	r3
 80042bc:	3601      	adds	r6, #1
 80042be:	e7f2      	b.n	80042a6 <__libc_init_array+0x1e>
 80042c0:	08006440 	.word	0x08006440
 80042c4:	08006440 	.word	0x08006440
 80042c8:	08006440 	.word	0x08006440
 80042cc:	08006444 	.word	0x08006444

080042d0 <__retarget_lock_init_recursive>:
 80042d0:	4770      	bx	lr

080042d2 <__retarget_lock_acquire_recursive>:
 80042d2:	4770      	bx	lr

080042d4 <__retarget_lock_release_recursive>:
 80042d4:	4770      	bx	lr

080042d6 <quorem>:
 80042d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042da:	6903      	ldr	r3, [r0, #16]
 80042dc:	690c      	ldr	r4, [r1, #16]
 80042de:	42a3      	cmp	r3, r4
 80042e0:	4607      	mov	r7, r0
 80042e2:	db7e      	blt.n	80043e2 <quorem+0x10c>
 80042e4:	3c01      	subs	r4, #1
 80042e6:	f101 0814 	add.w	r8, r1, #20
 80042ea:	00a3      	lsls	r3, r4, #2
 80042ec:	f100 0514 	add.w	r5, r0, #20
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80042fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004300:	3301      	adds	r3, #1
 8004302:	429a      	cmp	r2, r3
 8004304:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004308:	fbb2 f6f3 	udiv	r6, r2, r3
 800430c:	d32e      	bcc.n	800436c <quorem+0x96>
 800430e:	f04f 0a00 	mov.w	sl, #0
 8004312:	46c4      	mov	ip, r8
 8004314:	46ae      	mov	lr, r5
 8004316:	46d3      	mov	fp, sl
 8004318:	f85c 3b04 	ldr.w	r3, [ip], #4
 800431c:	b298      	uxth	r0, r3
 800431e:	fb06 a000 	mla	r0, r6, r0, sl
 8004322:	0c02      	lsrs	r2, r0, #16
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	fb06 2303 	mla	r3, r6, r3, r2
 800432a:	f8de 2000 	ldr.w	r2, [lr]
 800432e:	b280      	uxth	r0, r0
 8004330:	b292      	uxth	r2, r2
 8004332:	1a12      	subs	r2, r2, r0
 8004334:	445a      	add	r2, fp
 8004336:	f8de 0000 	ldr.w	r0, [lr]
 800433a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800433e:	b29b      	uxth	r3, r3
 8004340:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004344:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004348:	b292      	uxth	r2, r2
 800434a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800434e:	45e1      	cmp	r9, ip
 8004350:	f84e 2b04 	str.w	r2, [lr], #4
 8004354:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004358:	d2de      	bcs.n	8004318 <quorem+0x42>
 800435a:	9b00      	ldr	r3, [sp, #0]
 800435c:	58eb      	ldr	r3, [r5, r3]
 800435e:	b92b      	cbnz	r3, 800436c <quorem+0x96>
 8004360:	9b01      	ldr	r3, [sp, #4]
 8004362:	3b04      	subs	r3, #4
 8004364:	429d      	cmp	r5, r3
 8004366:	461a      	mov	r2, r3
 8004368:	d32f      	bcc.n	80043ca <quorem+0xf4>
 800436a:	613c      	str	r4, [r7, #16]
 800436c:	4638      	mov	r0, r7
 800436e:	f001 f979 	bl	8005664 <__mcmp>
 8004372:	2800      	cmp	r0, #0
 8004374:	db25      	blt.n	80043c2 <quorem+0xec>
 8004376:	4629      	mov	r1, r5
 8004378:	2000      	movs	r0, #0
 800437a:	f858 2b04 	ldr.w	r2, [r8], #4
 800437e:	f8d1 c000 	ldr.w	ip, [r1]
 8004382:	fa1f fe82 	uxth.w	lr, r2
 8004386:	fa1f f38c 	uxth.w	r3, ip
 800438a:	eba3 030e 	sub.w	r3, r3, lr
 800438e:	4403      	add	r3, r0
 8004390:	0c12      	lsrs	r2, r2, #16
 8004392:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004396:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800439a:	b29b      	uxth	r3, r3
 800439c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043a0:	45c1      	cmp	r9, r8
 80043a2:	f841 3b04 	str.w	r3, [r1], #4
 80043a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80043aa:	d2e6      	bcs.n	800437a <quorem+0xa4>
 80043ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043b4:	b922      	cbnz	r2, 80043c0 <quorem+0xea>
 80043b6:	3b04      	subs	r3, #4
 80043b8:	429d      	cmp	r5, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	d30b      	bcc.n	80043d6 <quorem+0x100>
 80043be:	613c      	str	r4, [r7, #16]
 80043c0:	3601      	adds	r6, #1
 80043c2:	4630      	mov	r0, r6
 80043c4:	b003      	add	sp, #12
 80043c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	3b04      	subs	r3, #4
 80043ce:	2a00      	cmp	r2, #0
 80043d0:	d1cb      	bne.n	800436a <quorem+0x94>
 80043d2:	3c01      	subs	r4, #1
 80043d4:	e7c6      	b.n	8004364 <quorem+0x8e>
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	3b04      	subs	r3, #4
 80043da:	2a00      	cmp	r2, #0
 80043dc:	d1ef      	bne.n	80043be <quorem+0xe8>
 80043de:	3c01      	subs	r4, #1
 80043e0:	e7ea      	b.n	80043b8 <quorem+0xe2>
 80043e2:	2000      	movs	r0, #0
 80043e4:	e7ee      	b.n	80043c4 <quorem+0xee>
	...

080043e8 <_dtoa_r>:
 80043e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ec:	69c7      	ldr	r7, [r0, #28]
 80043ee:	b099      	sub	sp, #100	@ 0x64
 80043f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80043f4:	ec55 4b10 	vmov	r4, r5, d0
 80043f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80043fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80043fc:	4683      	mov	fp, r0
 80043fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8004400:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004402:	b97f      	cbnz	r7, 8004424 <_dtoa_r+0x3c>
 8004404:	2010      	movs	r0, #16
 8004406:	f000 fdfd 	bl	8005004 <malloc>
 800440a:	4602      	mov	r2, r0
 800440c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004410:	b920      	cbnz	r0, 800441c <_dtoa_r+0x34>
 8004412:	4ba7      	ldr	r3, [pc, #668]	@ (80046b0 <_dtoa_r+0x2c8>)
 8004414:	21ef      	movs	r1, #239	@ 0xef
 8004416:	48a7      	ldr	r0, [pc, #668]	@ (80046b4 <_dtoa_r+0x2cc>)
 8004418:	f001 fccc 	bl	8005db4 <__assert_func>
 800441c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004420:	6007      	str	r7, [r0, #0]
 8004422:	60c7      	str	r7, [r0, #12]
 8004424:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004428:	6819      	ldr	r1, [r3, #0]
 800442a:	b159      	cbz	r1, 8004444 <_dtoa_r+0x5c>
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	604a      	str	r2, [r1, #4]
 8004430:	2301      	movs	r3, #1
 8004432:	4093      	lsls	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
 8004436:	4658      	mov	r0, fp
 8004438:	f000 feda 	bl	80051f0 <_Bfree>
 800443c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	1e2b      	subs	r3, r5, #0
 8004446:	bfb9      	ittee	lt
 8004448:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800444c:	9303      	strlt	r3, [sp, #12]
 800444e:	2300      	movge	r3, #0
 8004450:	6033      	strge	r3, [r6, #0]
 8004452:	9f03      	ldr	r7, [sp, #12]
 8004454:	4b98      	ldr	r3, [pc, #608]	@ (80046b8 <_dtoa_r+0x2d0>)
 8004456:	bfbc      	itt	lt
 8004458:	2201      	movlt	r2, #1
 800445a:	6032      	strlt	r2, [r6, #0]
 800445c:	43bb      	bics	r3, r7
 800445e:	d112      	bne.n	8004486 <_dtoa_r+0x9e>
 8004460:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004462:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800446c:	4323      	orrs	r3, r4
 800446e:	f000 854d 	beq.w	8004f0c <_dtoa_r+0xb24>
 8004472:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004474:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80046cc <_dtoa_r+0x2e4>
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 854f 	beq.w	8004f1c <_dtoa_r+0xb34>
 800447e:	f10a 0303 	add.w	r3, sl, #3
 8004482:	f000 bd49 	b.w	8004f18 <_dtoa_r+0xb30>
 8004486:	ed9d 7b02 	vldr	d7, [sp, #8]
 800448a:	2200      	movs	r2, #0
 800448c:	ec51 0b17 	vmov	r0, r1, d7
 8004490:	2300      	movs	r3, #0
 8004492:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004496:	f7fc fb37 	bl	8000b08 <__aeabi_dcmpeq>
 800449a:	4680      	mov	r8, r0
 800449c:	b158      	cbz	r0, 80044b6 <_dtoa_r+0xce>
 800449e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80044a0:	2301      	movs	r3, #1
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80044a6:	b113      	cbz	r3, 80044ae <_dtoa_r+0xc6>
 80044a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80044aa:	4b84      	ldr	r3, [pc, #528]	@ (80046bc <_dtoa_r+0x2d4>)
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80046d0 <_dtoa_r+0x2e8>
 80044b2:	f000 bd33 	b.w	8004f1c <_dtoa_r+0xb34>
 80044b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80044ba:	aa16      	add	r2, sp, #88	@ 0x58
 80044bc:	a917      	add	r1, sp, #92	@ 0x5c
 80044be:	4658      	mov	r0, fp
 80044c0:	f001 f980 	bl	80057c4 <__d2b>
 80044c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80044c8:	4681      	mov	r9, r0
 80044ca:	2e00      	cmp	r6, #0
 80044cc:	d077      	beq.n	80045be <_dtoa_r+0x1d6>
 80044ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80044d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80044dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80044e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80044e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80044e8:	4619      	mov	r1, r3
 80044ea:	2200      	movs	r2, #0
 80044ec:	4b74      	ldr	r3, [pc, #464]	@ (80046c0 <_dtoa_r+0x2d8>)
 80044ee:	f7fb feeb 	bl	80002c8 <__aeabi_dsub>
 80044f2:	a369      	add	r3, pc, #420	@ (adr r3, 8004698 <_dtoa_r+0x2b0>)
 80044f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f8:	f7fc f89e 	bl	8000638 <__aeabi_dmul>
 80044fc:	a368      	add	r3, pc, #416	@ (adr r3, 80046a0 <_dtoa_r+0x2b8>)
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	f7fb fee3 	bl	80002cc <__adddf3>
 8004506:	4604      	mov	r4, r0
 8004508:	4630      	mov	r0, r6
 800450a:	460d      	mov	r5, r1
 800450c:	f7fc f82a 	bl	8000564 <__aeabi_i2d>
 8004510:	a365      	add	r3, pc, #404	@ (adr r3, 80046a8 <_dtoa_r+0x2c0>)
 8004512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004516:	f7fc f88f 	bl	8000638 <__aeabi_dmul>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4620      	mov	r0, r4
 8004520:	4629      	mov	r1, r5
 8004522:	f7fb fed3 	bl	80002cc <__adddf3>
 8004526:	4604      	mov	r4, r0
 8004528:	460d      	mov	r5, r1
 800452a:	f7fc fb35 	bl	8000b98 <__aeabi_d2iz>
 800452e:	2200      	movs	r2, #0
 8004530:	4607      	mov	r7, r0
 8004532:	2300      	movs	r3, #0
 8004534:	4620      	mov	r0, r4
 8004536:	4629      	mov	r1, r5
 8004538:	f7fc faf0 	bl	8000b1c <__aeabi_dcmplt>
 800453c:	b140      	cbz	r0, 8004550 <_dtoa_r+0x168>
 800453e:	4638      	mov	r0, r7
 8004540:	f7fc f810 	bl	8000564 <__aeabi_i2d>
 8004544:	4622      	mov	r2, r4
 8004546:	462b      	mov	r3, r5
 8004548:	f7fc fade 	bl	8000b08 <__aeabi_dcmpeq>
 800454c:	b900      	cbnz	r0, 8004550 <_dtoa_r+0x168>
 800454e:	3f01      	subs	r7, #1
 8004550:	2f16      	cmp	r7, #22
 8004552:	d851      	bhi.n	80045f8 <_dtoa_r+0x210>
 8004554:	4b5b      	ldr	r3, [pc, #364]	@ (80046c4 <_dtoa_r+0x2dc>)
 8004556:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004562:	f7fc fadb 	bl	8000b1c <__aeabi_dcmplt>
 8004566:	2800      	cmp	r0, #0
 8004568:	d048      	beq.n	80045fc <_dtoa_r+0x214>
 800456a:	3f01      	subs	r7, #1
 800456c:	2300      	movs	r3, #0
 800456e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004570:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004572:	1b9b      	subs	r3, r3, r6
 8004574:	1e5a      	subs	r2, r3, #1
 8004576:	bf44      	itt	mi
 8004578:	f1c3 0801 	rsbmi	r8, r3, #1
 800457c:	2300      	movmi	r3, #0
 800457e:	9208      	str	r2, [sp, #32]
 8004580:	bf54      	ite	pl
 8004582:	f04f 0800 	movpl.w	r8, #0
 8004586:	9308      	strmi	r3, [sp, #32]
 8004588:	2f00      	cmp	r7, #0
 800458a:	db39      	blt.n	8004600 <_dtoa_r+0x218>
 800458c:	9b08      	ldr	r3, [sp, #32]
 800458e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004590:	443b      	add	r3, r7
 8004592:	9308      	str	r3, [sp, #32]
 8004594:	2300      	movs	r3, #0
 8004596:	930a      	str	r3, [sp, #40]	@ 0x28
 8004598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800459a:	2b09      	cmp	r3, #9
 800459c:	d864      	bhi.n	8004668 <_dtoa_r+0x280>
 800459e:	2b05      	cmp	r3, #5
 80045a0:	bfc4      	itt	gt
 80045a2:	3b04      	subgt	r3, #4
 80045a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80045a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045a8:	f1a3 0302 	sub.w	r3, r3, #2
 80045ac:	bfcc      	ite	gt
 80045ae:	2400      	movgt	r4, #0
 80045b0:	2401      	movle	r4, #1
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d863      	bhi.n	800467e <_dtoa_r+0x296>
 80045b6:	e8df f003 	tbb	[pc, r3]
 80045ba:	372a      	.short	0x372a
 80045bc:	5535      	.short	0x5535
 80045be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80045c2:	441e      	add	r6, r3
 80045c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	bfc1      	itttt	gt
 80045cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80045d0:	409f      	lslgt	r7, r3
 80045d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80045d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80045da:	bfd6      	itet	le
 80045dc:	f1c3 0320 	rsble	r3, r3, #32
 80045e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80045e4:	fa04 f003 	lslle.w	r0, r4, r3
 80045e8:	f7fb ffac 	bl	8000544 <__aeabi_ui2d>
 80045ec:	2201      	movs	r2, #1
 80045ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80045f2:	3e01      	subs	r6, #1
 80045f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80045f6:	e777      	b.n	80044e8 <_dtoa_r+0x100>
 80045f8:	2301      	movs	r3, #1
 80045fa:	e7b8      	b.n	800456e <_dtoa_r+0x186>
 80045fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80045fe:	e7b7      	b.n	8004570 <_dtoa_r+0x188>
 8004600:	427b      	negs	r3, r7
 8004602:	930a      	str	r3, [sp, #40]	@ 0x28
 8004604:	2300      	movs	r3, #0
 8004606:	eba8 0807 	sub.w	r8, r8, r7
 800460a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800460c:	e7c4      	b.n	8004598 <_dtoa_r+0x1b0>
 800460e:	2300      	movs	r3, #0
 8004610:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004612:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004614:	2b00      	cmp	r3, #0
 8004616:	dc35      	bgt.n	8004684 <_dtoa_r+0x29c>
 8004618:	2301      	movs	r3, #1
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	9307      	str	r3, [sp, #28]
 800461e:	461a      	mov	r2, r3
 8004620:	920e      	str	r2, [sp, #56]	@ 0x38
 8004622:	e00b      	b.n	800463c <_dtoa_r+0x254>
 8004624:	2301      	movs	r3, #1
 8004626:	e7f3      	b.n	8004610 <_dtoa_r+0x228>
 8004628:	2300      	movs	r3, #0
 800462a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800462c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	3301      	adds	r3, #1
 8004634:	2b01      	cmp	r3, #1
 8004636:	9307      	str	r3, [sp, #28]
 8004638:	bfb8      	it	lt
 800463a:	2301      	movlt	r3, #1
 800463c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004640:	2100      	movs	r1, #0
 8004642:	2204      	movs	r2, #4
 8004644:	f102 0514 	add.w	r5, r2, #20
 8004648:	429d      	cmp	r5, r3
 800464a:	d91f      	bls.n	800468c <_dtoa_r+0x2a4>
 800464c:	6041      	str	r1, [r0, #4]
 800464e:	4658      	mov	r0, fp
 8004650:	f000 fd8e 	bl	8005170 <_Balloc>
 8004654:	4682      	mov	sl, r0
 8004656:	2800      	cmp	r0, #0
 8004658:	d13c      	bne.n	80046d4 <_dtoa_r+0x2ec>
 800465a:	4b1b      	ldr	r3, [pc, #108]	@ (80046c8 <_dtoa_r+0x2e0>)
 800465c:	4602      	mov	r2, r0
 800465e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004662:	e6d8      	b.n	8004416 <_dtoa_r+0x2e>
 8004664:	2301      	movs	r3, #1
 8004666:	e7e0      	b.n	800462a <_dtoa_r+0x242>
 8004668:	2401      	movs	r4, #1
 800466a:	2300      	movs	r3, #0
 800466c:	9309      	str	r3, [sp, #36]	@ 0x24
 800466e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004670:	f04f 33ff 	mov.w	r3, #4294967295
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	9307      	str	r3, [sp, #28]
 8004678:	2200      	movs	r2, #0
 800467a:	2312      	movs	r3, #18
 800467c:	e7d0      	b.n	8004620 <_dtoa_r+0x238>
 800467e:	2301      	movs	r3, #1
 8004680:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004682:	e7f5      	b.n	8004670 <_dtoa_r+0x288>
 8004684:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	9307      	str	r3, [sp, #28]
 800468a:	e7d7      	b.n	800463c <_dtoa_r+0x254>
 800468c:	3101      	adds	r1, #1
 800468e:	0052      	lsls	r2, r2, #1
 8004690:	e7d8      	b.n	8004644 <_dtoa_r+0x25c>
 8004692:	bf00      	nop
 8004694:	f3af 8000 	nop.w
 8004698:	636f4361 	.word	0x636f4361
 800469c:	3fd287a7 	.word	0x3fd287a7
 80046a0:	8b60c8b3 	.word	0x8b60c8b3
 80046a4:	3fc68a28 	.word	0x3fc68a28
 80046a8:	509f79fb 	.word	0x509f79fb
 80046ac:	3fd34413 	.word	0x3fd34413
 80046b0:	08006105 	.word	0x08006105
 80046b4:	0800611c 	.word	0x0800611c
 80046b8:	7ff00000 	.word	0x7ff00000
 80046bc:	080060d5 	.word	0x080060d5
 80046c0:	3ff80000 	.word	0x3ff80000
 80046c4:	08006218 	.word	0x08006218
 80046c8:	08006174 	.word	0x08006174
 80046cc:	08006101 	.word	0x08006101
 80046d0:	080060d4 	.word	0x080060d4
 80046d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80046d8:	6018      	str	r0, [r3, #0]
 80046da:	9b07      	ldr	r3, [sp, #28]
 80046dc:	2b0e      	cmp	r3, #14
 80046de:	f200 80a4 	bhi.w	800482a <_dtoa_r+0x442>
 80046e2:	2c00      	cmp	r4, #0
 80046e4:	f000 80a1 	beq.w	800482a <_dtoa_r+0x442>
 80046e8:	2f00      	cmp	r7, #0
 80046ea:	dd33      	ble.n	8004754 <_dtoa_r+0x36c>
 80046ec:	4bad      	ldr	r3, [pc, #692]	@ (80049a4 <_dtoa_r+0x5bc>)
 80046ee:	f007 020f 	and.w	r2, r7, #15
 80046f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046f6:	ed93 7b00 	vldr	d7, [r3]
 80046fa:	05f8      	lsls	r0, r7, #23
 80046fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004700:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004704:	d516      	bpl.n	8004734 <_dtoa_r+0x34c>
 8004706:	4ba8      	ldr	r3, [pc, #672]	@ (80049a8 <_dtoa_r+0x5c0>)
 8004708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800470c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004710:	f7fc f8bc 	bl	800088c <__aeabi_ddiv>
 8004714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004718:	f004 040f 	and.w	r4, r4, #15
 800471c:	2603      	movs	r6, #3
 800471e:	4da2      	ldr	r5, [pc, #648]	@ (80049a8 <_dtoa_r+0x5c0>)
 8004720:	b954      	cbnz	r4, 8004738 <_dtoa_r+0x350>
 8004722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800472a:	f7fc f8af 	bl	800088c <__aeabi_ddiv>
 800472e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004732:	e028      	b.n	8004786 <_dtoa_r+0x39e>
 8004734:	2602      	movs	r6, #2
 8004736:	e7f2      	b.n	800471e <_dtoa_r+0x336>
 8004738:	07e1      	lsls	r1, r4, #31
 800473a:	d508      	bpl.n	800474e <_dtoa_r+0x366>
 800473c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004740:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004744:	f7fb ff78 	bl	8000638 <__aeabi_dmul>
 8004748:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800474c:	3601      	adds	r6, #1
 800474e:	1064      	asrs	r4, r4, #1
 8004750:	3508      	adds	r5, #8
 8004752:	e7e5      	b.n	8004720 <_dtoa_r+0x338>
 8004754:	f000 80d2 	beq.w	80048fc <_dtoa_r+0x514>
 8004758:	427c      	negs	r4, r7
 800475a:	4b92      	ldr	r3, [pc, #584]	@ (80049a4 <_dtoa_r+0x5bc>)
 800475c:	4d92      	ldr	r5, [pc, #584]	@ (80049a8 <_dtoa_r+0x5c0>)
 800475e:	f004 020f 	and.w	r2, r4, #15
 8004762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800476e:	f7fb ff63 	bl	8000638 <__aeabi_dmul>
 8004772:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004776:	1124      	asrs	r4, r4, #4
 8004778:	2300      	movs	r3, #0
 800477a:	2602      	movs	r6, #2
 800477c:	2c00      	cmp	r4, #0
 800477e:	f040 80b2 	bne.w	80048e6 <_dtoa_r+0x4fe>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1d3      	bne.n	800472e <_dtoa_r+0x346>
 8004786:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004788:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80b7 	beq.w	8004900 <_dtoa_r+0x518>
 8004792:	4b86      	ldr	r3, [pc, #536]	@ (80049ac <_dtoa_r+0x5c4>)
 8004794:	2200      	movs	r2, #0
 8004796:	4620      	mov	r0, r4
 8004798:	4629      	mov	r1, r5
 800479a:	f7fc f9bf 	bl	8000b1c <__aeabi_dcmplt>
 800479e:	2800      	cmp	r0, #0
 80047a0:	f000 80ae 	beq.w	8004900 <_dtoa_r+0x518>
 80047a4:	9b07      	ldr	r3, [sp, #28]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80aa 	beq.w	8004900 <_dtoa_r+0x518>
 80047ac:	9b00      	ldr	r3, [sp, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	dd37      	ble.n	8004822 <_dtoa_r+0x43a>
 80047b2:	1e7b      	subs	r3, r7, #1
 80047b4:	9304      	str	r3, [sp, #16]
 80047b6:	4620      	mov	r0, r4
 80047b8:	4b7d      	ldr	r3, [pc, #500]	@ (80049b0 <_dtoa_r+0x5c8>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	4629      	mov	r1, r5
 80047be:	f7fb ff3b 	bl	8000638 <__aeabi_dmul>
 80047c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047c6:	9c00      	ldr	r4, [sp, #0]
 80047c8:	3601      	adds	r6, #1
 80047ca:	4630      	mov	r0, r6
 80047cc:	f7fb feca 	bl	8000564 <__aeabi_i2d>
 80047d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047d4:	f7fb ff30 	bl	8000638 <__aeabi_dmul>
 80047d8:	4b76      	ldr	r3, [pc, #472]	@ (80049b4 <_dtoa_r+0x5cc>)
 80047da:	2200      	movs	r2, #0
 80047dc:	f7fb fd76 	bl	80002cc <__adddf3>
 80047e0:	4605      	mov	r5, r0
 80047e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80047e6:	2c00      	cmp	r4, #0
 80047e8:	f040 808d 	bne.w	8004906 <_dtoa_r+0x51e>
 80047ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047f0:	4b71      	ldr	r3, [pc, #452]	@ (80049b8 <_dtoa_r+0x5d0>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	f7fb fd68 	bl	80002c8 <__aeabi_dsub>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004800:	462a      	mov	r2, r5
 8004802:	4633      	mov	r3, r6
 8004804:	f7fc f9a8 	bl	8000b58 <__aeabi_dcmpgt>
 8004808:	2800      	cmp	r0, #0
 800480a:	f040 828b 	bne.w	8004d24 <_dtoa_r+0x93c>
 800480e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004812:	462a      	mov	r2, r5
 8004814:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004818:	f7fc f980 	bl	8000b1c <__aeabi_dcmplt>
 800481c:	2800      	cmp	r0, #0
 800481e:	f040 8128 	bne.w	8004a72 <_dtoa_r+0x68a>
 8004822:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004826:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800482a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800482c:	2b00      	cmp	r3, #0
 800482e:	f2c0 815a 	blt.w	8004ae6 <_dtoa_r+0x6fe>
 8004832:	2f0e      	cmp	r7, #14
 8004834:	f300 8157 	bgt.w	8004ae6 <_dtoa_r+0x6fe>
 8004838:	4b5a      	ldr	r3, [pc, #360]	@ (80049a4 <_dtoa_r+0x5bc>)
 800483a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800483e:	ed93 7b00 	vldr	d7, [r3]
 8004842:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004844:	2b00      	cmp	r3, #0
 8004846:	ed8d 7b00 	vstr	d7, [sp]
 800484a:	da03      	bge.n	8004854 <_dtoa_r+0x46c>
 800484c:	9b07      	ldr	r3, [sp, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f340 8101 	ble.w	8004a56 <_dtoa_r+0x66e>
 8004854:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004858:	4656      	mov	r6, sl
 800485a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800485e:	4620      	mov	r0, r4
 8004860:	4629      	mov	r1, r5
 8004862:	f7fc f813 	bl	800088c <__aeabi_ddiv>
 8004866:	f7fc f997 	bl	8000b98 <__aeabi_d2iz>
 800486a:	4680      	mov	r8, r0
 800486c:	f7fb fe7a 	bl	8000564 <__aeabi_i2d>
 8004870:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004874:	f7fb fee0 	bl	8000638 <__aeabi_dmul>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4620      	mov	r0, r4
 800487e:	4629      	mov	r1, r5
 8004880:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004884:	f7fb fd20 	bl	80002c8 <__aeabi_dsub>
 8004888:	f806 4b01 	strb.w	r4, [r6], #1
 800488c:	9d07      	ldr	r5, [sp, #28]
 800488e:	eba6 040a 	sub.w	r4, r6, sl
 8004892:	42a5      	cmp	r5, r4
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	f040 8117 	bne.w	8004aca <_dtoa_r+0x6e2>
 800489c:	f7fb fd16 	bl	80002cc <__adddf3>
 80048a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048a4:	4604      	mov	r4, r0
 80048a6:	460d      	mov	r5, r1
 80048a8:	f7fc f956 	bl	8000b58 <__aeabi_dcmpgt>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	f040 80f9 	bne.w	8004aa4 <_dtoa_r+0x6bc>
 80048b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048b6:	4620      	mov	r0, r4
 80048b8:	4629      	mov	r1, r5
 80048ba:	f7fc f925 	bl	8000b08 <__aeabi_dcmpeq>
 80048be:	b118      	cbz	r0, 80048c8 <_dtoa_r+0x4e0>
 80048c0:	f018 0f01 	tst.w	r8, #1
 80048c4:	f040 80ee 	bne.w	8004aa4 <_dtoa_r+0x6bc>
 80048c8:	4649      	mov	r1, r9
 80048ca:	4658      	mov	r0, fp
 80048cc:	f000 fc90 	bl	80051f0 <_Bfree>
 80048d0:	2300      	movs	r3, #0
 80048d2:	7033      	strb	r3, [r6, #0]
 80048d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80048d6:	3701      	adds	r7, #1
 80048d8:	601f      	str	r7, [r3, #0]
 80048da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 831d 	beq.w	8004f1c <_dtoa_r+0xb34>
 80048e2:	601e      	str	r6, [r3, #0]
 80048e4:	e31a      	b.n	8004f1c <_dtoa_r+0xb34>
 80048e6:	07e2      	lsls	r2, r4, #31
 80048e8:	d505      	bpl.n	80048f6 <_dtoa_r+0x50e>
 80048ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80048ee:	f7fb fea3 	bl	8000638 <__aeabi_dmul>
 80048f2:	3601      	adds	r6, #1
 80048f4:	2301      	movs	r3, #1
 80048f6:	1064      	asrs	r4, r4, #1
 80048f8:	3508      	adds	r5, #8
 80048fa:	e73f      	b.n	800477c <_dtoa_r+0x394>
 80048fc:	2602      	movs	r6, #2
 80048fe:	e742      	b.n	8004786 <_dtoa_r+0x39e>
 8004900:	9c07      	ldr	r4, [sp, #28]
 8004902:	9704      	str	r7, [sp, #16]
 8004904:	e761      	b.n	80047ca <_dtoa_r+0x3e2>
 8004906:	4b27      	ldr	r3, [pc, #156]	@ (80049a4 <_dtoa_r+0x5bc>)
 8004908:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800490a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800490e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004912:	4454      	add	r4, sl
 8004914:	2900      	cmp	r1, #0
 8004916:	d053      	beq.n	80049c0 <_dtoa_r+0x5d8>
 8004918:	4928      	ldr	r1, [pc, #160]	@ (80049bc <_dtoa_r+0x5d4>)
 800491a:	2000      	movs	r0, #0
 800491c:	f7fb ffb6 	bl	800088c <__aeabi_ddiv>
 8004920:	4633      	mov	r3, r6
 8004922:	462a      	mov	r2, r5
 8004924:	f7fb fcd0 	bl	80002c8 <__aeabi_dsub>
 8004928:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800492c:	4656      	mov	r6, sl
 800492e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004932:	f7fc f931 	bl	8000b98 <__aeabi_d2iz>
 8004936:	4605      	mov	r5, r0
 8004938:	f7fb fe14 	bl	8000564 <__aeabi_i2d>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004944:	f7fb fcc0 	bl	80002c8 <__aeabi_dsub>
 8004948:	3530      	adds	r5, #48	@ 0x30
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004952:	f806 5b01 	strb.w	r5, [r6], #1
 8004956:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800495a:	f7fc f8df 	bl	8000b1c <__aeabi_dcmplt>
 800495e:	2800      	cmp	r0, #0
 8004960:	d171      	bne.n	8004a46 <_dtoa_r+0x65e>
 8004962:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004966:	4911      	ldr	r1, [pc, #68]	@ (80049ac <_dtoa_r+0x5c4>)
 8004968:	2000      	movs	r0, #0
 800496a:	f7fb fcad 	bl	80002c8 <__aeabi_dsub>
 800496e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004972:	f7fc f8d3 	bl	8000b1c <__aeabi_dcmplt>
 8004976:	2800      	cmp	r0, #0
 8004978:	f040 8095 	bne.w	8004aa6 <_dtoa_r+0x6be>
 800497c:	42a6      	cmp	r6, r4
 800497e:	f43f af50 	beq.w	8004822 <_dtoa_r+0x43a>
 8004982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004986:	4b0a      	ldr	r3, [pc, #40]	@ (80049b0 <_dtoa_r+0x5c8>)
 8004988:	2200      	movs	r2, #0
 800498a:	f7fb fe55 	bl	8000638 <__aeabi_dmul>
 800498e:	4b08      	ldr	r3, [pc, #32]	@ (80049b0 <_dtoa_r+0x5c8>)
 8004990:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004994:	2200      	movs	r2, #0
 8004996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800499a:	f7fb fe4d 	bl	8000638 <__aeabi_dmul>
 800499e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049a2:	e7c4      	b.n	800492e <_dtoa_r+0x546>
 80049a4:	08006218 	.word	0x08006218
 80049a8:	080061f0 	.word	0x080061f0
 80049ac:	3ff00000 	.word	0x3ff00000
 80049b0:	40240000 	.word	0x40240000
 80049b4:	401c0000 	.word	0x401c0000
 80049b8:	40140000 	.word	0x40140000
 80049bc:	3fe00000 	.word	0x3fe00000
 80049c0:	4631      	mov	r1, r6
 80049c2:	4628      	mov	r0, r5
 80049c4:	f7fb fe38 	bl	8000638 <__aeabi_dmul>
 80049c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80049cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80049ce:	4656      	mov	r6, sl
 80049d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049d4:	f7fc f8e0 	bl	8000b98 <__aeabi_d2iz>
 80049d8:	4605      	mov	r5, r0
 80049da:	f7fb fdc3 	bl	8000564 <__aeabi_i2d>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049e6:	f7fb fc6f 	bl	80002c8 <__aeabi_dsub>
 80049ea:	3530      	adds	r5, #48	@ 0x30
 80049ec:	f806 5b01 	strb.w	r5, [r6], #1
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	42a6      	cmp	r6, r4
 80049f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	d124      	bne.n	8004a4a <_dtoa_r+0x662>
 8004a00:	4bac      	ldr	r3, [pc, #688]	@ (8004cb4 <_dtoa_r+0x8cc>)
 8004a02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004a06:	f7fb fc61 	bl	80002cc <__adddf3>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a12:	f7fc f8a1 	bl	8000b58 <__aeabi_dcmpgt>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d145      	bne.n	8004aa6 <_dtoa_r+0x6be>
 8004a1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a1e:	49a5      	ldr	r1, [pc, #660]	@ (8004cb4 <_dtoa_r+0x8cc>)
 8004a20:	2000      	movs	r0, #0
 8004a22:	f7fb fc51 	bl	80002c8 <__aeabi_dsub>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a2e:	f7fc f875 	bl	8000b1c <__aeabi_dcmplt>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	f43f aef5 	beq.w	8004822 <_dtoa_r+0x43a>
 8004a38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004a3a:	1e73      	subs	r3, r6, #1
 8004a3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004a3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004a42:	2b30      	cmp	r3, #48	@ 0x30
 8004a44:	d0f8      	beq.n	8004a38 <_dtoa_r+0x650>
 8004a46:	9f04      	ldr	r7, [sp, #16]
 8004a48:	e73e      	b.n	80048c8 <_dtoa_r+0x4e0>
 8004a4a:	4b9b      	ldr	r3, [pc, #620]	@ (8004cb8 <_dtoa_r+0x8d0>)
 8004a4c:	f7fb fdf4 	bl	8000638 <__aeabi_dmul>
 8004a50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a54:	e7bc      	b.n	80049d0 <_dtoa_r+0x5e8>
 8004a56:	d10c      	bne.n	8004a72 <_dtoa_r+0x68a>
 8004a58:	4b98      	ldr	r3, [pc, #608]	@ (8004cbc <_dtoa_r+0x8d4>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a60:	f7fb fdea 	bl	8000638 <__aeabi_dmul>
 8004a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a68:	f7fc f86c 	bl	8000b44 <__aeabi_dcmpge>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	f000 8157 	beq.w	8004d20 <_dtoa_r+0x938>
 8004a72:	2400      	movs	r4, #0
 8004a74:	4625      	mov	r5, r4
 8004a76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	9304      	str	r3, [sp, #16]
 8004a7c:	4656      	mov	r6, sl
 8004a7e:	2700      	movs	r7, #0
 8004a80:	4621      	mov	r1, r4
 8004a82:	4658      	mov	r0, fp
 8004a84:	f000 fbb4 	bl	80051f0 <_Bfree>
 8004a88:	2d00      	cmp	r5, #0
 8004a8a:	d0dc      	beq.n	8004a46 <_dtoa_r+0x65e>
 8004a8c:	b12f      	cbz	r7, 8004a9a <_dtoa_r+0x6b2>
 8004a8e:	42af      	cmp	r7, r5
 8004a90:	d003      	beq.n	8004a9a <_dtoa_r+0x6b2>
 8004a92:	4639      	mov	r1, r7
 8004a94:	4658      	mov	r0, fp
 8004a96:	f000 fbab 	bl	80051f0 <_Bfree>
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	4658      	mov	r0, fp
 8004a9e:	f000 fba7 	bl	80051f0 <_Bfree>
 8004aa2:	e7d0      	b.n	8004a46 <_dtoa_r+0x65e>
 8004aa4:	9704      	str	r7, [sp, #16]
 8004aa6:	4633      	mov	r3, r6
 8004aa8:	461e      	mov	r6, r3
 8004aaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004aae:	2a39      	cmp	r2, #57	@ 0x39
 8004ab0:	d107      	bne.n	8004ac2 <_dtoa_r+0x6da>
 8004ab2:	459a      	cmp	sl, r3
 8004ab4:	d1f8      	bne.n	8004aa8 <_dtoa_r+0x6c0>
 8004ab6:	9a04      	ldr	r2, [sp, #16]
 8004ab8:	3201      	adds	r2, #1
 8004aba:	9204      	str	r2, [sp, #16]
 8004abc:	2230      	movs	r2, #48	@ 0x30
 8004abe:	f88a 2000 	strb.w	r2, [sl]
 8004ac2:	781a      	ldrb	r2, [r3, #0]
 8004ac4:	3201      	adds	r2, #1
 8004ac6:	701a      	strb	r2, [r3, #0]
 8004ac8:	e7bd      	b.n	8004a46 <_dtoa_r+0x65e>
 8004aca:	4b7b      	ldr	r3, [pc, #492]	@ (8004cb8 <_dtoa_r+0x8d0>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	f7fb fdb3 	bl	8000638 <__aeabi_dmul>
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	460d      	mov	r5, r1
 8004ada:	f7fc f815 	bl	8000b08 <__aeabi_dcmpeq>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	f43f aebb 	beq.w	800485a <_dtoa_r+0x472>
 8004ae4:	e6f0      	b.n	80048c8 <_dtoa_r+0x4e0>
 8004ae6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004ae8:	2a00      	cmp	r2, #0
 8004aea:	f000 80db 	beq.w	8004ca4 <_dtoa_r+0x8bc>
 8004aee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004af0:	2a01      	cmp	r2, #1
 8004af2:	f300 80bf 	bgt.w	8004c74 <_dtoa_r+0x88c>
 8004af6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004af8:	2a00      	cmp	r2, #0
 8004afa:	f000 80b7 	beq.w	8004c6c <_dtoa_r+0x884>
 8004afe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004b02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004b04:	4646      	mov	r6, r8
 8004b06:	9a08      	ldr	r2, [sp, #32]
 8004b08:	2101      	movs	r1, #1
 8004b0a:	441a      	add	r2, r3
 8004b0c:	4658      	mov	r0, fp
 8004b0e:	4498      	add	r8, r3
 8004b10:	9208      	str	r2, [sp, #32]
 8004b12:	f000 fc21 	bl	8005358 <__i2b>
 8004b16:	4605      	mov	r5, r0
 8004b18:	b15e      	cbz	r6, 8004b32 <_dtoa_r+0x74a>
 8004b1a:	9b08      	ldr	r3, [sp, #32]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	dd08      	ble.n	8004b32 <_dtoa_r+0x74a>
 8004b20:	42b3      	cmp	r3, r6
 8004b22:	9a08      	ldr	r2, [sp, #32]
 8004b24:	bfa8      	it	ge
 8004b26:	4633      	movge	r3, r6
 8004b28:	eba8 0803 	sub.w	r8, r8, r3
 8004b2c:	1af6      	subs	r6, r6, r3
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	9308      	str	r3, [sp, #32]
 8004b32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b34:	b1f3      	cbz	r3, 8004b74 <_dtoa_r+0x78c>
 8004b36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80b7 	beq.w	8004cac <_dtoa_r+0x8c4>
 8004b3e:	b18c      	cbz	r4, 8004b64 <_dtoa_r+0x77c>
 8004b40:	4629      	mov	r1, r5
 8004b42:	4622      	mov	r2, r4
 8004b44:	4658      	mov	r0, fp
 8004b46:	f000 fcc7 	bl	80054d8 <__pow5mult>
 8004b4a:	464a      	mov	r2, r9
 8004b4c:	4601      	mov	r1, r0
 8004b4e:	4605      	mov	r5, r0
 8004b50:	4658      	mov	r0, fp
 8004b52:	f000 fc17 	bl	8005384 <__multiply>
 8004b56:	4649      	mov	r1, r9
 8004b58:	9004      	str	r0, [sp, #16]
 8004b5a:	4658      	mov	r0, fp
 8004b5c:	f000 fb48 	bl	80051f0 <_Bfree>
 8004b60:	9b04      	ldr	r3, [sp, #16]
 8004b62:	4699      	mov	r9, r3
 8004b64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b66:	1b1a      	subs	r2, r3, r4
 8004b68:	d004      	beq.n	8004b74 <_dtoa_r+0x78c>
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	4658      	mov	r0, fp
 8004b6e:	f000 fcb3 	bl	80054d8 <__pow5mult>
 8004b72:	4681      	mov	r9, r0
 8004b74:	2101      	movs	r1, #1
 8004b76:	4658      	mov	r0, fp
 8004b78:	f000 fbee 	bl	8005358 <__i2b>
 8004b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b7e:	4604      	mov	r4, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 81cf 	beq.w	8004f24 <_dtoa_r+0xb3c>
 8004b86:	461a      	mov	r2, r3
 8004b88:	4601      	mov	r1, r0
 8004b8a:	4658      	mov	r0, fp
 8004b8c:	f000 fca4 	bl	80054d8 <__pow5mult>
 8004b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	4604      	mov	r4, r0
 8004b96:	f300 8095 	bgt.w	8004cc4 <_dtoa_r+0x8dc>
 8004b9a:	9b02      	ldr	r3, [sp, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f040 8087 	bne.w	8004cb0 <_dtoa_r+0x8c8>
 8004ba2:	9b03      	ldr	r3, [sp, #12]
 8004ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f040 8089 	bne.w	8004cc0 <_dtoa_r+0x8d8>
 8004bae:	9b03      	ldr	r3, [sp, #12]
 8004bb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004bb4:	0d1b      	lsrs	r3, r3, #20
 8004bb6:	051b      	lsls	r3, r3, #20
 8004bb8:	b12b      	cbz	r3, 8004bc6 <_dtoa_r+0x7de>
 8004bba:	9b08      	ldr	r3, [sp, #32]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	9308      	str	r3, [sp, #32]
 8004bc0:	f108 0801 	add.w	r8, r8, #1
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004bc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 81b0 	beq.w	8004f30 <_dtoa_r+0xb48>
 8004bd0:	6923      	ldr	r3, [r4, #16]
 8004bd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004bd6:	6918      	ldr	r0, [r3, #16]
 8004bd8:	f000 fb72 	bl	80052c0 <__hi0bits>
 8004bdc:	f1c0 0020 	rsb	r0, r0, #32
 8004be0:	9b08      	ldr	r3, [sp, #32]
 8004be2:	4418      	add	r0, r3
 8004be4:	f010 001f 	ands.w	r0, r0, #31
 8004be8:	d077      	beq.n	8004cda <_dtoa_r+0x8f2>
 8004bea:	f1c0 0320 	rsb	r3, r0, #32
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	dd6b      	ble.n	8004cca <_dtoa_r+0x8e2>
 8004bf2:	9b08      	ldr	r3, [sp, #32]
 8004bf4:	f1c0 001c 	rsb	r0, r0, #28
 8004bf8:	4403      	add	r3, r0
 8004bfa:	4480      	add	r8, r0
 8004bfc:	4406      	add	r6, r0
 8004bfe:	9308      	str	r3, [sp, #32]
 8004c00:	f1b8 0f00 	cmp.w	r8, #0
 8004c04:	dd05      	ble.n	8004c12 <_dtoa_r+0x82a>
 8004c06:	4649      	mov	r1, r9
 8004c08:	4642      	mov	r2, r8
 8004c0a:	4658      	mov	r0, fp
 8004c0c:	f000 fcbe 	bl	800558c <__lshift>
 8004c10:	4681      	mov	r9, r0
 8004c12:	9b08      	ldr	r3, [sp, #32]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	dd05      	ble.n	8004c24 <_dtoa_r+0x83c>
 8004c18:	4621      	mov	r1, r4
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4658      	mov	r0, fp
 8004c1e:	f000 fcb5 	bl	800558c <__lshift>
 8004c22:	4604      	mov	r4, r0
 8004c24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d059      	beq.n	8004cde <_dtoa_r+0x8f6>
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	4648      	mov	r0, r9
 8004c2e:	f000 fd19 	bl	8005664 <__mcmp>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	da53      	bge.n	8004cde <_dtoa_r+0x8f6>
 8004c36:	1e7b      	subs	r3, r7, #1
 8004c38:	9304      	str	r3, [sp, #16]
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	220a      	movs	r2, #10
 8004c40:	4658      	mov	r0, fp
 8004c42:	f000 faf7 	bl	8005234 <__multadd>
 8004c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c48:	4681      	mov	r9, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8172 	beq.w	8004f34 <_dtoa_r+0xb4c>
 8004c50:	2300      	movs	r3, #0
 8004c52:	4629      	mov	r1, r5
 8004c54:	220a      	movs	r2, #10
 8004c56:	4658      	mov	r0, fp
 8004c58:	f000 faec 	bl	8005234 <__multadd>
 8004c5c:	9b00      	ldr	r3, [sp, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	4605      	mov	r5, r0
 8004c62:	dc67      	bgt.n	8004d34 <_dtoa_r+0x94c>
 8004c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	dc41      	bgt.n	8004cee <_dtoa_r+0x906>
 8004c6a:	e063      	b.n	8004d34 <_dtoa_r+0x94c>
 8004c6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004c6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004c72:	e746      	b.n	8004b02 <_dtoa_r+0x71a>
 8004c74:	9b07      	ldr	r3, [sp, #28]
 8004c76:	1e5c      	subs	r4, r3, #1
 8004c78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c7a:	42a3      	cmp	r3, r4
 8004c7c:	bfbf      	itttt	lt
 8004c7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004c80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004c82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004c84:	1ae3      	sublt	r3, r4, r3
 8004c86:	bfb4      	ite	lt
 8004c88:	18d2      	addlt	r2, r2, r3
 8004c8a:	1b1c      	subge	r4, r3, r4
 8004c8c:	9b07      	ldr	r3, [sp, #28]
 8004c8e:	bfbc      	itt	lt
 8004c90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004c92:	2400      	movlt	r4, #0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	bfb5      	itete	lt
 8004c98:	eba8 0603 	sublt.w	r6, r8, r3
 8004c9c:	9b07      	ldrge	r3, [sp, #28]
 8004c9e:	2300      	movlt	r3, #0
 8004ca0:	4646      	movge	r6, r8
 8004ca2:	e730      	b.n	8004b06 <_dtoa_r+0x71e>
 8004ca4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ca6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004ca8:	4646      	mov	r6, r8
 8004caa:	e735      	b.n	8004b18 <_dtoa_r+0x730>
 8004cac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004cae:	e75c      	b.n	8004b6a <_dtoa_r+0x782>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e788      	b.n	8004bc6 <_dtoa_r+0x7de>
 8004cb4:	3fe00000 	.word	0x3fe00000
 8004cb8:	40240000 	.word	0x40240000
 8004cbc:	40140000 	.word	0x40140000
 8004cc0:	9b02      	ldr	r3, [sp, #8]
 8004cc2:	e780      	b.n	8004bc6 <_dtoa_r+0x7de>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cc8:	e782      	b.n	8004bd0 <_dtoa_r+0x7e8>
 8004cca:	d099      	beq.n	8004c00 <_dtoa_r+0x818>
 8004ccc:	9a08      	ldr	r2, [sp, #32]
 8004cce:	331c      	adds	r3, #28
 8004cd0:	441a      	add	r2, r3
 8004cd2:	4498      	add	r8, r3
 8004cd4:	441e      	add	r6, r3
 8004cd6:	9208      	str	r2, [sp, #32]
 8004cd8:	e792      	b.n	8004c00 <_dtoa_r+0x818>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	e7f6      	b.n	8004ccc <_dtoa_r+0x8e4>
 8004cde:	9b07      	ldr	r3, [sp, #28]
 8004ce0:	9704      	str	r7, [sp, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	dc20      	bgt.n	8004d28 <_dtoa_r+0x940>
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	dd1e      	ble.n	8004d2c <_dtoa_r+0x944>
 8004cee:	9b00      	ldr	r3, [sp, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f47f aec0 	bne.w	8004a76 <_dtoa_r+0x68e>
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	2205      	movs	r2, #5
 8004cfa:	4658      	mov	r0, fp
 8004cfc:	f000 fa9a 	bl	8005234 <__multadd>
 8004d00:	4601      	mov	r1, r0
 8004d02:	4604      	mov	r4, r0
 8004d04:	4648      	mov	r0, r9
 8004d06:	f000 fcad 	bl	8005664 <__mcmp>
 8004d0a:	2800      	cmp	r0, #0
 8004d0c:	f77f aeb3 	ble.w	8004a76 <_dtoa_r+0x68e>
 8004d10:	4656      	mov	r6, sl
 8004d12:	2331      	movs	r3, #49	@ 0x31
 8004d14:	f806 3b01 	strb.w	r3, [r6], #1
 8004d18:	9b04      	ldr	r3, [sp, #16]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	9304      	str	r3, [sp, #16]
 8004d1e:	e6ae      	b.n	8004a7e <_dtoa_r+0x696>
 8004d20:	9c07      	ldr	r4, [sp, #28]
 8004d22:	9704      	str	r7, [sp, #16]
 8004d24:	4625      	mov	r5, r4
 8004d26:	e7f3      	b.n	8004d10 <_dtoa_r+0x928>
 8004d28:	9b07      	ldr	r3, [sp, #28]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 8104 	beq.w	8004f3c <_dtoa_r+0xb54>
 8004d34:	2e00      	cmp	r6, #0
 8004d36:	dd05      	ble.n	8004d44 <_dtoa_r+0x95c>
 8004d38:	4629      	mov	r1, r5
 8004d3a:	4632      	mov	r2, r6
 8004d3c:	4658      	mov	r0, fp
 8004d3e:	f000 fc25 	bl	800558c <__lshift>
 8004d42:	4605      	mov	r5, r0
 8004d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d05a      	beq.n	8004e00 <_dtoa_r+0xa18>
 8004d4a:	6869      	ldr	r1, [r5, #4]
 8004d4c:	4658      	mov	r0, fp
 8004d4e:	f000 fa0f 	bl	8005170 <_Balloc>
 8004d52:	4606      	mov	r6, r0
 8004d54:	b928      	cbnz	r0, 8004d62 <_dtoa_r+0x97a>
 8004d56:	4b84      	ldr	r3, [pc, #528]	@ (8004f68 <_dtoa_r+0xb80>)
 8004d58:	4602      	mov	r2, r0
 8004d5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004d5e:	f7ff bb5a 	b.w	8004416 <_dtoa_r+0x2e>
 8004d62:	692a      	ldr	r2, [r5, #16]
 8004d64:	3202      	adds	r2, #2
 8004d66:	0092      	lsls	r2, r2, #2
 8004d68:	f105 010c 	add.w	r1, r5, #12
 8004d6c:	300c      	adds	r0, #12
 8004d6e:	f001 f813 	bl	8005d98 <memcpy>
 8004d72:	2201      	movs	r2, #1
 8004d74:	4631      	mov	r1, r6
 8004d76:	4658      	mov	r0, fp
 8004d78:	f000 fc08 	bl	800558c <__lshift>
 8004d7c:	f10a 0301 	add.w	r3, sl, #1
 8004d80:	9307      	str	r3, [sp, #28]
 8004d82:	9b00      	ldr	r3, [sp, #0]
 8004d84:	4453      	add	r3, sl
 8004d86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d88:	9b02      	ldr	r3, [sp, #8]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	462f      	mov	r7, r5
 8004d90:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d92:	4605      	mov	r5, r0
 8004d94:	9b07      	ldr	r3, [sp, #28]
 8004d96:	4621      	mov	r1, r4
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	4648      	mov	r0, r9
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	f7ff fa9a 	bl	80042d6 <quorem>
 8004da2:	4639      	mov	r1, r7
 8004da4:	9002      	str	r0, [sp, #8]
 8004da6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004daa:	4648      	mov	r0, r9
 8004dac:	f000 fc5a 	bl	8005664 <__mcmp>
 8004db0:	462a      	mov	r2, r5
 8004db2:	9008      	str	r0, [sp, #32]
 8004db4:	4621      	mov	r1, r4
 8004db6:	4658      	mov	r0, fp
 8004db8:	f000 fc70 	bl	800569c <__mdiff>
 8004dbc:	68c2      	ldr	r2, [r0, #12]
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	bb02      	cbnz	r2, 8004e04 <_dtoa_r+0xa1c>
 8004dc2:	4601      	mov	r1, r0
 8004dc4:	4648      	mov	r0, r9
 8004dc6:	f000 fc4d 	bl	8005664 <__mcmp>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	4631      	mov	r1, r6
 8004dce:	4658      	mov	r0, fp
 8004dd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8004dd2:	f000 fa0d 	bl	80051f0 <_Bfree>
 8004dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004dda:	9e07      	ldr	r6, [sp, #28]
 8004ddc:	ea43 0102 	orr.w	r1, r3, r2
 8004de0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004de2:	4319      	orrs	r1, r3
 8004de4:	d110      	bne.n	8004e08 <_dtoa_r+0xa20>
 8004de6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004dea:	d029      	beq.n	8004e40 <_dtoa_r+0xa58>
 8004dec:	9b08      	ldr	r3, [sp, #32]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	dd02      	ble.n	8004df8 <_dtoa_r+0xa10>
 8004df2:	9b02      	ldr	r3, [sp, #8]
 8004df4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004df8:	9b00      	ldr	r3, [sp, #0]
 8004dfa:	f883 8000 	strb.w	r8, [r3]
 8004dfe:	e63f      	b.n	8004a80 <_dtoa_r+0x698>
 8004e00:	4628      	mov	r0, r5
 8004e02:	e7bb      	b.n	8004d7c <_dtoa_r+0x994>
 8004e04:	2201      	movs	r2, #1
 8004e06:	e7e1      	b.n	8004dcc <_dtoa_r+0x9e4>
 8004e08:	9b08      	ldr	r3, [sp, #32]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	db04      	blt.n	8004e18 <_dtoa_r+0xa30>
 8004e0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e10:	430b      	orrs	r3, r1
 8004e12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004e14:	430b      	orrs	r3, r1
 8004e16:	d120      	bne.n	8004e5a <_dtoa_r+0xa72>
 8004e18:	2a00      	cmp	r2, #0
 8004e1a:	dded      	ble.n	8004df8 <_dtoa_r+0xa10>
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	2201      	movs	r2, #1
 8004e20:	4658      	mov	r0, fp
 8004e22:	f000 fbb3 	bl	800558c <__lshift>
 8004e26:	4621      	mov	r1, r4
 8004e28:	4681      	mov	r9, r0
 8004e2a:	f000 fc1b 	bl	8005664 <__mcmp>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	dc03      	bgt.n	8004e3a <_dtoa_r+0xa52>
 8004e32:	d1e1      	bne.n	8004df8 <_dtoa_r+0xa10>
 8004e34:	f018 0f01 	tst.w	r8, #1
 8004e38:	d0de      	beq.n	8004df8 <_dtoa_r+0xa10>
 8004e3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004e3e:	d1d8      	bne.n	8004df2 <_dtoa_r+0xa0a>
 8004e40:	9a00      	ldr	r2, [sp, #0]
 8004e42:	2339      	movs	r3, #57	@ 0x39
 8004e44:	7013      	strb	r3, [r2, #0]
 8004e46:	4633      	mov	r3, r6
 8004e48:	461e      	mov	r6, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004e50:	2a39      	cmp	r2, #57	@ 0x39
 8004e52:	d052      	beq.n	8004efa <_dtoa_r+0xb12>
 8004e54:	3201      	adds	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	e612      	b.n	8004a80 <_dtoa_r+0x698>
 8004e5a:	2a00      	cmp	r2, #0
 8004e5c:	dd07      	ble.n	8004e6e <_dtoa_r+0xa86>
 8004e5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004e62:	d0ed      	beq.n	8004e40 <_dtoa_r+0xa58>
 8004e64:	9a00      	ldr	r2, [sp, #0]
 8004e66:	f108 0301 	add.w	r3, r8, #1
 8004e6a:	7013      	strb	r3, [r2, #0]
 8004e6c:	e608      	b.n	8004a80 <_dtoa_r+0x698>
 8004e6e:	9b07      	ldr	r3, [sp, #28]
 8004e70:	9a07      	ldr	r2, [sp, #28]
 8004e72:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004e76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d028      	beq.n	8004ece <_dtoa_r+0xae6>
 8004e7c:	4649      	mov	r1, r9
 8004e7e:	2300      	movs	r3, #0
 8004e80:	220a      	movs	r2, #10
 8004e82:	4658      	mov	r0, fp
 8004e84:	f000 f9d6 	bl	8005234 <__multadd>
 8004e88:	42af      	cmp	r7, r5
 8004e8a:	4681      	mov	r9, r0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	f04f 020a 	mov.w	r2, #10
 8004e94:	4639      	mov	r1, r7
 8004e96:	4658      	mov	r0, fp
 8004e98:	d107      	bne.n	8004eaa <_dtoa_r+0xac2>
 8004e9a:	f000 f9cb 	bl	8005234 <__multadd>
 8004e9e:	4607      	mov	r7, r0
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	9b07      	ldr	r3, [sp, #28]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	9307      	str	r3, [sp, #28]
 8004ea8:	e774      	b.n	8004d94 <_dtoa_r+0x9ac>
 8004eaa:	f000 f9c3 	bl	8005234 <__multadd>
 8004eae:	4629      	mov	r1, r5
 8004eb0:	4607      	mov	r7, r0
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	220a      	movs	r2, #10
 8004eb6:	4658      	mov	r0, fp
 8004eb8:	f000 f9bc 	bl	8005234 <__multadd>
 8004ebc:	4605      	mov	r5, r0
 8004ebe:	e7f0      	b.n	8004ea2 <_dtoa_r+0xaba>
 8004ec0:	9b00      	ldr	r3, [sp, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bfcc      	ite	gt
 8004ec6:	461e      	movgt	r6, r3
 8004ec8:	2601      	movle	r6, #1
 8004eca:	4456      	add	r6, sl
 8004ecc:	2700      	movs	r7, #0
 8004ece:	4649      	mov	r1, r9
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	4658      	mov	r0, fp
 8004ed4:	f000 fb5a 	bl	800558c <__lshift>
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4681      	mov	r9, r0
 8004edc:	f000 fbc2 	bl	8005664 <__mcmp>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	dcb0      	bgt.n	8004e46 <_dtoa_r+0xa5e>
 8004ee4:	d102      	bne.n	8004eec <_dtoa_r+0xb04>
 8004ee6:	f018 0f01 	tst.w	r8, #1
 8004eea:	d1ac      	bne.n	8004e46 <_dtoa_r+0xa5e>
 8004eec:	4633      	mov	r3, r6
 8004eee:	461e      	mov	r6, r3
 8004ef0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ef4:	2a30      	cmp	r2, #48	@ 0x30
 8004ef6:	d0fa      	beq.n	8004eee <_dtoa_r+0xb06>
 8004ef8:	e5c2      	b.n	8004a80 <_dtoa_r+0x698>
 8004efa:	459a      	cmp	sl, r3
 8004efc:	d1a4      	bne.n	8004e48 <_dtoa_r+0xa60>
 8004efe:	9b04      	ldr	r3, [sp, #16]
 8004f00:	3301      	adds	r3, #1
 8004f02:	9304      	str	r3, [sp, #16]
 8004f04:	2331      	movs	r3, #49	@ 0x31
 8004f06:	f88a 3000 	strb.w	r3, [sl]
 8004f0a:	e5b9      	b.n	8004a80 <_dtoa_r+0x698>
 8004f0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004f0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004f6c <_dtoa_r+0xb84>
 8004f12:	b11b      	cbz	r3, 8004f1c <_dtoa_r+0xb34>
 8004f14:	f10a 0308 	add.w	r3, sl, #8
 8004f18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004f1a:	6013      	str	r3, [r2, #0]
 8004f1c:	4650      	mov	r0, sl
 8004f1e:	b019      	add	sp, #100	@ 0x64
 8004f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	f77f ae37 	ble.w	8004b9a <_dtoa_r+0x7b2>
 8004f2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f30:	2001      	movs	r0, #1
 8004f32:	e655      	b.n	8004be0 <_dtoa_r+0x7f8>
 8004f34:	9b00      	ldr	r3, [sp, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f77f aed6 	ble.w	8004ce8 <_dtoa_r+0x900>
 8004f3c:	4656      	mov	r6, sl
 8004f3e:	4621      	mov	r1, r4
 8004f40:	4648      	mov	r0, r9
 8004f42:	f7ff f9c8 	bl	80042d6 <quorem>
 8004f46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004f4a:	f806 8b01 	strb.w	r8, [r6], #1
 8004f4e:	9b00      	ldr	r3, [sp, #0]
 8004f50:	eba6 020a 	sub.w	r2, r6, sl
 8004f54:	4293      	cmp	r3, r2
 8004f56:	ddb3      	ble.n	8004ec0 <_dtoa_r+0xad8>
 8004f58:	4649      	mov	r1, r9
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	220a      	movs	r2, #10
 8004f5e:	4658      	mov	r0, fp
 8004f60:	f000 f968 	bl	8005234 <__multadd>
 8004f64:	4681      	mov	r9, r0
 8004f66:	e7ea      	b.n	8004f3e <_dtoa_r+0xb56>
 8004f68:	08006174 	.word	0x08006174
 8004f6c:	080060f8 	.word	0x080060f8

08004f70 <_free_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	4605      	mov	r5, r0
 8004f74:	2900      	cmp	r1, #0
 8004f76:	d041      	beq.n	8004ffc <_free_r+0x8c>
 8004f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f7c:	1f0c      	subs	r4, r1, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bfb8      	it	lt
 8004f82:	18e4      	addlt	r4, r4, r3
 8004f84:	f000 f8e8 	bl	8005158 <__malloc_lock>
 8004f88:	4a1d      	ldr	r2, [pc, #116]	@ (8005000 <_free_r+0x90>)
 8004f8a:	6813      	ldr	r3, [r2, #0]
 8004f8c:	b933      	cbnz	r3, 8004f9c <_free_r+0x2c>
 8004f8e:	6063      	str	r3, [r4, #4]
 8004f90:	6014      	str	r4, [r2, #0]
 8004f92:	4628      	mov	r0, r5
 8004f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f98:	f000 b8e4 	b.w	8005164 <__malloc_unlock>
 8004f9c:	42a3      	cmp	r3, r4
 8004f9e:	d908      	bls.n	8004fb2 <_free_r+0x42>
 8004fa0:	6820      	ldr	r0, [r4, #0]
 8004fa2:	1821      	adds	r1, r4, r0
 8004fa4:	428b      	cmp	r3, r1
 8004fa6:	bf01      	itttt	eq
 8004fa8:	6819      	ldreq	r1, [r3, #0]
 8004faa:	685b      	ldreq	r3, [r3, #4]
 8004fac:	1809      	addeq	r1, r1, r0
 8004fae:	6021      	streq	r1, [r4, #0]
 8004fb0:	e7ed      	b.n	8004f8e <_free_r+0x1e>
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	b10b      	cbz	r3, 8004fbc <_free_r+0x4c>
 8004fb8:	42a3      	cmp	r3, r4
 8004fba:	d9fa      	bls.n	8004fb2 <_free_r+0x42>
 8004fbc:	6811      	ldr	r1, [r2, #0]
 8004fbe:	1850      	adds	r0, r2, r1
 8004fc0:	42a0      	cmp	r0, r4
 8004fc2:	d10b      	bne.n	8004fdc <_free_r+0x6c>
 8004fc4:	6820      	ldr	r0, [r4, #0]
 8004fc6:	4401      	add	r1, r0
 8004fc8:	1850      	adds	r0, r2, r1
 8004fca:	4283      	cmp	r3, r0
 8004fcc:	6011      	str	r1, [r2, #0]
 8004fce:	d1e0      	bne.n	8004f92 <_free_r+0x22>
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	6053      	str	r3, [r2, #4]
 8004fd6:	4408      	add	r0, r1
 8004fd8:	6010      	str	r0, [r2, #0]
 8004fda:	e7da      	b.n	8004f92 <_free_r+0x22>
 8004fdc:	d902      	bls.n	8004fe4 <_free_r+0x74>
 8004fde:	230c      	movs	r3, #12
 8004fe0:	602b      	str	r3, [r5, #0]
 8004fe2:	e7d6      	b.n	8004f92 <_free_r+0x22>
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	1821      	adds	r1, r4, r0
 8004fe8:	428b      	cmp	r3, r1
 8004fea:	bf04      	itt	eq
 8004fec:	6819      	ldreq	r1, [r3, #0]
 8004fee:	685b      	ldreq	r3, [r3, #4]
 8004ff0:	6063      	str	r3, [r4, #4]
 8004ff2:	bf04      	itt	eq
 8004ff4:	1809      	addeq	r1, r1, r0
 8004ff6:	6021      	streq	r1, [r4, #0]
 8004ff8:	6054      	str	r4, [r2, #4]
 8004ffa:	e7ca      	b.n	8004f92 <_free_r+0x22>
 8004ffc:	bd38      	pop	{r3, r4, r5, pc}
 8004ffe:	bf00      	nop
 8005000:	200003d8 	.word	0x200003d8

08005004 <malloc>:
 8005004:	4b02      	ldr	r3, [pc, #8]	@ (8005010 <malloc+0xc>)
 8005006:	4601      	mov	r1, r0
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	f000 b825 	b.w	8005058 <_malloc_r>
 800500e:	bf00      	nop
 8005010:	20000018 	.word	0x20000018

08005014 <sbrk_aligned>:
 8005014:	b570      	push	{r4, r5, r6, lr}
 8005016:	4e0f      	ldr	r6, [pc, #60]	@ (8005054 <sbrk_aligned+0x40>)
 8005018:	460c      	mov	r4, r1
 800501a:	6831      	ldr	r1, [r6, #0]
 800501c:	4605      	mov	r5, r0
 800501e:	b911      	cbnz	r1, 8005026 <sbrk_aligned+0x12>
 8005020:	f000 feaa 	bl	8005d78 <_sbrk_r>
 8005024:	6030      	str	r0, [r6, #0]
 8005026:	4621      	mov	r1, r4
 8005028:	4628      	mov	r0, r5
 800502a:	f000 fea5 	bl	8005d78 <_sbrk_r>
 800502e:	1c43      	adds	r3, r0, #1
 8005030:	d103      	bne.n	800503a <sbrk_aligned+0x26>
 8005032:	f04f 34ff 	mov.w	r4, #4294967295
 8005036:	4620      	mov	r0, r4
 8005038:	bd70      	pop	{r4, r5, r6, pc}
 800503a:	1cc4      	adds	r4, r0, #3
 800503c:	f024 0403 	bic.w	r4, r4, #3
 8005040:	42a0      	cmp	r0, r4
 8005042:	d0f8      	beq.n	8005036 <sbrk_aligned+0x22>
 8005044:	1a21      	subs	r1, r4, r0
 8005046:	4628      	mov	r0, r5
 8005048:	f000 fe96 	bl	8005d78 <_sbrk_r>
 800504c:	3001      	adds	r0, #1
 800504e:	d1f2      	bne.n	8005036 <sbrk_aligned+0x22>
 8005050:	e7ef      	b.n	8005032 <sbrk_aligned+0x1e>
 8005052:	bf00      	nop
 8005054:	200003d4 	.word	0x200003d4

08005058 <_malloc_r>:
 8005058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800505c:	1ccd      	adds	r5, r1, #3
 800505e:	f025 0503 	bic.w	r5, r5, #3
 8005062:	3508      	adds	r5, #8
 8005064:	2d0c      	cmp	r5, #12
 8005066:	bf38      	it	cc
 8005068:	250c      	movcc	r5, #12
 800506a:	2d00      	cmp	r5, #0
 800506c:	4606      	mov	r6, r0
 800506e:	db01      	blt.n	8005074 <_malloc_r+0x1c>
 8005070:	42a9      	cmp	r1, r5
 8005072:	d904      	bls.n	800507e <_malloc_r+0x26>
 8005074:	230c      	movs	r3, #12
 8005076:	6033      	str	r3, [r6, #0]
 8005078:	2000      	movs	r0, #0
 800507a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800507e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005154 <_malloc_r+0xfc>
 8005082:	f000 f869 	bl	8005158 <__malloc_lock>
 8005086:	f8d8 3000 	ldr.w	r3, [r8]
 800508a:	461c      	mov	r4, r3
 800508c:	bb44      	cbnz	r4, 80050e0 <_malloc_r+0x88>
 800508e:	4629      	mov	r1, r5
 8005090:	4630      	mov	r0, r6
 8005092:	f7ff ffbf 	bl	8005014 <sbrk_aligned>
 8005096:	1c43      	adds	r3, r0, #1
 8005098:	4604      	mov	r4, r0
 800509a:	d158      	bne.n	800514e <_malloc_r+0xf6>
 800509c:	f8d8 4000 	ldr.w	r4, [r8]
 80050a0:	4627      	mov	r7, r4
 80050a2:	2f00      	cmp	r7, #0
 80050a4:	d143      	bne.n	800512e <_malloc_r+0xd6>
 80050a6:	2c00      	cmp	r4, #0
 80050a8:	d04b      	beq.n	8005142 <_malloc_r+0xea>
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	4639      	mov	r1, r7
 80050ae:	4630      	mov	r0, r6
 80050b0:	eb04 0903 	add.w	r9, r4, r3
 80050b4:	f000 fe60 	bl	8005d78 <_sbrk_r>
 80050b8:	4581      	cmp	r9, r0
 80050ba:	d142      	bne.n	8005142 <_malloc_r+0xea>
 80050bc:	6821      	ldr	r1, [r4, #0]
 80050be:	1a6d      	subs	r5, r5, r1
 80050c0:	4629      	mov	r1, r5
 80050c2:	4630      	mov	r0, r6
 80050c4:	f7ff ffa6 	bl	8005014 <sbrk_aligned>
 80050c8:	3001      	adds	r0, #1
 80050ca:	d03a      	beq.n	8005142 <_malloc_r+0xea>
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	442b      	add	r3, r5
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	f8d8 3000 	ldr.w	r3, [r8]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	bb62      	cbnz	r2, 8005134 <_malloc_r+0xdc>
 80050da:	f8c8 7000 	str.w	r7, [r8]
 80050de:	e00f      	b.n	8005100 <_malloc_r+0xa8>
 80050e0:	6822      	ldr	r2, [r4, #0]
 80050e2:	1b52      	subs	r2, r2, r5
 80050e4:	d420      	bmi.n	8005128 <_malloc_r+0xd0>
 80050e6:	2a0b      	cmp	r2, #11
 80050e8:	d917      	bls.n	800511a <_malloc_r+0xc2>
 80050ea:	1961      	adds	r1, r4, r5
 80050ec:	42a3      	cmp	r3, r4
 80050ee:	6025      	str	r5, [r4, #0]
 80050f0:	bf18      	it	ne
 80050f2:	6059      	strne	r1, [r3, #4]
 80050f4:	6863      	ldr	r3, [r4, #4]
 80050f6:	bf08      	it	eq
 80050f8:	f8c8 1000 	streq.w	r1, [r8]
 80050fc:	5162      	str	r2, [r4, r5]
 80050fe:	604b      	str	r3, [r1, #4]
 8005100:	4630      	mov	r0, r6
 8005102:	f000 f82f 	bl	8005164 <__malloc_unlock>
 8005106:	f104 000b 	add.w	r0, r4, #11
 800510a:	1d23      	adds	r3, r4, #4
 800510c:	f020 0007 	bic.w	r0, r0, #7
 8005110:	1ac2      	subs	r2, r0, r3
 8005112:	bf1c      	itt	ne
 8005114:	1a1b      	subne	r3, r3, r0
 8005116:	50a3      	strne	r3, [r4, r2]
 8005118:	e7af      	b.n	800507a <_malloc_r+0x22>
 800511a:	6862      	ldr	r2, [r4, #4]
 800511c:	42a3      	cmp	r3, r4
 800511e:	bf0c      	ite	eq
 8005120:	f8c8 2000 	streq.w	r2, [r8]
 8005124:	605a      	strne	r2, [r3, #4]
 8005126:	e7eb      	b.n	8005100 <_malloc_r+0xa8>
 8005128:	4623      	mov	r3, r4
 800512a:	6864      	ldr	r4, [r4, #4]
 800512c:	e7ae      	b.n	800508c <_malloc_r+0x34>
 800512e:	463c      	mov	r4, r7
 8005130:	687f      	ldr	r7, [r7, #4]
 8005132:	e7b6      	b.n	80050a2 <_malloc_r+0x4a>
 8005134:	461a      	mov	r2, r3
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	42a3      	cmp	r3, r4
 800513a:	d1fb      	bne.n	8005134 <_malloc_r+0xdc>
 800513c:	2300      	movs	r3, #0
 800513e:	6053      	str	r3, [r2, #4]
 8005140:	e7de      	b.n	8005100 <_malloc_r+0xa8>
 8005142:	230c      	movs	r3, #12
 8005144:	6033      	str	r3, [r6, #0]
 8005146:	4630      	mov	r0, r6
 8005148:	f000 f80c 	bl	8005164 <__malloc_unlock>
 800514c:	e794      	b.n	8005078 <_malloc_r+0x20>
 800514e:	6005      	str	r5, [r0, #0]
 8005150:	e7d6      	b.n	8005100 <_malloc_r+0xa8>
 8005152:	bf00      	nop
 8005154:	200003d8 	.word	0x200003d8

08005158 <__malloc_lock>:
 8005158:	4801      	ldr	r0, [pc, #4]	@ (8005160 <__malloc_lock+0x8>)
 800515a:	f7ff b8ba 	b.w	80042d2 <__retarget_lock_acquire_recursive>
 800515e:	bf00      	nop
 8005160:	200003d0 	.word	0x200003d0

08005164 <__malloc_unlock>:
 8005164:	4801      	ldr	r0, [pc, #4]	@ (800516c <__malloc_unlock+0x8>)
 8005166:	f7ff b8b5 	b.w	80042d4 <__retarget_lock_release_recursive>
 800516a:	bf00      	nop
 800516c:	200003d0 	.word	0x200003d0

08005170 <_Balloc>:
 8005170:	b570      	push	{r4, r5, r6, lr}
 8005172:	69c6      	ldr	r6, [r0, #28]
 8005174:	4604      	mov	r4, r0
 8005176:	460d      	mov	r5, r1
 8005178:	b976      	cbnz	r6, 8005198 <_Balloc+0x28>
 800517a:	2010      	movs	r0, #16
 800517c:	f7ff ff42 	bl	8005004 <malloc>
 8005180:	4602      	mov	r2, r0
 8005182:	61e0      	str	r0, [r4, #28]
 8005184:	b920      	cbnz	r0, 8005190 <_Balloc+0x20>
 8005186:	4b18      	ldr	r3, [pc, #96]	@ (80051e8 <_Balloc+0x78>)
 8005188:	4818      	ldr	r0, [pc, #96]	@ (80051ec <_Balloc+0x7c>)
 800518a:	216b      	movs	r1, #107	@ 0x6b
 800518c:	f000 fe12 	bl	8005db4 <__assert_func>
 8005190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005194:	6006      	str	r6, [r0, #0]
 8005196:	60c6      	str	r6, [r0, #12]
 8005198:	69e6      	ldr	r6, [r4, #28]
 800519a:	68f3      	ldr	r3, [r6, #12]
 800519c:	b183      	cbz	r3, 80051c0 <_Balloc+0x50>
 800519e:	69e3      	ldr	r3, [r4, #28]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80051a6:	b9b8      	cbnz	r0, 80051d8 <_Balloc+0x68>
 80051a8:	2101      	movs	r1, #1
 80051aa:	fa01 f605 	lsl.w	r6, r1, r5
 80051ae:	1d72      	adds	r2, r6, #5
 80051b0:	0092      	lsls	r2, r2, #2
 80051b2:	4620      	mov	r0, r4
 80051b4:	f000 fe1c 	bl	8005df0 <_calloc_r>
 80051b8:	b160      	cbz	r0, 80051d4 <_Balloc+0x64>
 80051ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80051be:	e00e      	b.n	80051de <_Balloc+0x6e>
 80051c0:	2221      	movs	r2, #33	@ 0x21
 80051c2:	2104      	movs	r1, #4
 80051c4:	4620      	mov	r0, r4
 80051c6:	f000 fe13 	bl	8005df0 <_calloc_r>
 80051ca:	69e3      	ldr	r3, [r4, #28]
 80051cc:	60f0      	str	r0, [r6, #12]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e4      	bne.n	800519e <_Balloc+0x2e>
 80051d4:	2000      	movs	r0, #0
 80051d6:	bd70      	pop	{r4, r5, r6, pc}
 80051d8:	6802      	ldr	r2, [r0, #0]
 80051da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80051de:	2300      	movs	r3, #0
 80051e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80051e4:	e7f7      	b.n	80051d6 <_Balloc+0x66>
 80051e6:	bf00      	nop
 80051e8:	08006105 	.word	0x08006105
 80051ec:	08006185 	.word	0x08006185

080051f0 <_Bfree>:
 80051f0:	b570      	push	{r4, r5, r6, lr}
 80051f2:	69c6      	ldr	r6, [r0, #28]
 80051f4:	4605      	mov	r5, r0
 80051f6:	460c      	mov	r4, r1
 80051f8:	b976      	cbnz	r6, 8005218 <_Bfree+0x28>
 80051fa:	2010      	movs	r0, #16
 80051fc:	f7ff ff02 	bl	8005004 <malloc>
 8005200:	4602      	mov	r2, r0
 8005202:	61e8      	str	r0, [r5, #28]
 8005204:	b920      	cbnz	r0, 8005210 <_Bfree+0x20>
 8005206:	4b09      	ldr	r3, [pc, #36]	@ (800522c <_Bfree+0x3c>)
 8005208:	4809      	ldr	r0, [pc, #36]	@ (8005230 <_Bfree+0x40>)
 800520a:	218f      	movs	r1, #143	@ 0x8f
 800520c:	f000 fdd2 	bl	8005db4 <__assert_func>
 8005210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005214:	6006      	str	r6, [r0, #0]
 8005216:	60c6      	str	r6, [r0, #12]
 8005218:	b13c      	cbz	r4, 800522a <_Bfree+0x3a>
 800521a:	69eb      	ldr	r3, [r5, #28]
 800521c:	6862      	ldr	r2, [r4, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005224:	6021      	str	r1, [r4, #0]
 8005226:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800522a:	bd70      	pop	{r4, r5, r6, pc}
 800522c:	08006105 	.word	0x08006105
 8005230:	08006185 	.word	0x08006185

08005234 <__multadd>:
 8005234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005238:	690d      	ldr	r5, [r1, #16]
 800523a:	4607      	mov	r7, r0
 800523c:	460c      	mov	r4, r1
 800523e:	461e      	mov	r6, r3
 8005240:	f101 0c14 	add.w	ip, r1, #20
 8005244:	2000      	movs	r0, #0
 8005246:	f8dc 3000 	ldr.w	r3, [ip]
 800524a:	b299      	uxth	r1, r3
 800524c:	fb02 6101 	mla	r1, r2, r1, r6
 8005250:	0c1e      	lsrs	r6, r3, #16
 8005252:	0c0b      	lsrs	r3, r1, #16
 8005254:	fb02 3306 	mla	r3, r2, r6, r3
 8005258:	b289      	uxth	r1, r1
 800525a:	3001      	adds	r0, #1
 800525c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005260:	4285      	cmp	r5, r0
 8005262:	f84c 1b04 	str.w	r1, [ip], #4
 8005266:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800526a:	dcec      	bgt.n	8005246 <__multadd+0x12>
 800526c:	b30e      	cbz	r6, 80052b2 <__multadd+0x7e>
 800526e:	68a3      	ldr	r3, [r4, #8]
 8005270:	42ab      	cmp	r3, r5
 8005272:	dc19      	bgt.n	80052a8 <__multadd+0x74>
 8005274:	6861      	ldr	r1, [r4, #4]
 8005276:	4638      	mov	r0, r7
 8005278:	3101      	adds	r1, #1
 800527a:	f7ff ff79 	bl	8005170 <_Balloc>
 800527e:	4680      	mov	r8, r0
 8005280:	b928      	cbnz	r0, 800528e <__multadd+0x5a>
 8005282:	4602      	mov	r2, r0
 8005284:	4b0c      	ldr	r3, [pc, #48]	@ (80052b8 <__multadd+0x84>)
 8005286:	480d      	ldr	r0, [pc, #52]	@ (80052bc <__multadd+0x88>)
 8005288:	21ba      	movs	r1, #186	@ 0xba
 800528a:	f000 fd93 	bl	8005db4 <__assert_func>
 800528e:	6922      	ldr	r2, [r4, #16]
 8005290:	3202      	adds	r2, #2
 8005292:	f104 010c 	add.w	r1, r4, #12
 8005296:	0092      	lsls	r2, r2, #2
 8005298:	300c      	adds	r0, #12
 800529a:	f000 fd7d 	bl	8005d98 <memcpy>
 800529e:	4621      	mov	r1, r4
 80052a0:	4638      	mov	r0, r7
 80052a2:	f7ff ffa5 	bl	80051f0 <_Bfree>
 80052a6:	4644      	mov	r4, r8
 80052a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80052ac:	3501      	adds	r5, #1
 80052ae:	615e      	str	r6, [r3, #20]
 80052b0:	6125      	str	r5, [r4, #16]
 80052b2:	4620      	mov	r0, r4
 80052b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b8:	08006174 	.word	0x08006174
 80052bc:	08006185 	.word	0x08006185

080052c0 <__hi0bits>:
 80052c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80052c4:	4603      	mov	r3, r0
 80052c6:	bf36      	itet	cc
 80052c8:	0403      	lslcc	r3, r0, #16
 80052ca:	2000      	movcs	r0, #0
 80052cc:	2010      	movcc	r0, #16
 80052ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052d2:	bf3c      	itt	cc
 80052d4:	021b      	lslcc	r3, r3, #8
 80052d6:	3008      	addcc	r0, #8
 80052d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052dc:	bf3c      	itt	cc
 80052de:	011b      	lslcc	r3, r3, #4
 80052e0:	3004      	addcc	r0, #4
 80052e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052e6:	bf3c      	itt	cc
 80052e8:	009b      	lslcc	r3, r3, #2
 80052ea:	3002      	addcc	r0, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	db05      	blt.n	80052fc <__hi0bits+0x3c>
 80052f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80052f4:	f100 0001 	add.w	r0, r0, #1
 80052f8:	bf08      	it	eq
 80052fa:	2020      	moveq	r0, #32
 80052fc:	4770      	bx	lr

080052fe <__lo0bits>:
 80052fe:	6803      	ldr	r3, [r0, #0]
 8005300:	4602      	mov	r2, r0
 8005302:	f013 0007 	ands.w	r0, r3, #7
 8005306:	d00b      	beq.n	8005320 <__lo0bits+0x22>
 8005308:	07d9      	lsls	r1, r3, #31
 800530a:	d421      	bmi.n	8005350 <__lo0bits+0x52>
 800530c:	0798      	lsls	r0, r3, #30
 800530e:	bf49      	itett	mi
 8005310:	085b      	lsrmi	r3, r3, #1
 8005312:	089b      	lsrpl	r3, r3, #2
 8005314:	2001      	movmi	r0, #1
 8005316:	6013      	strmi	r3, [r2, #0]
 8005318:	bf5c      	itt	pl
 800531a:	6013      	strpl	r3, [r2, #0]
 800531c:	2002      	movpl	r0, #2
 800531e:	4770      	bx	lr
 8005320:	b299      	uxth	r1, r3
 8005322:	b909      	cbnz	r1, 8005328 <__lo0bits+0x2a>
 8005324:	0c1b      	lsrs	r3, r3, #16
 8005326:	2010      	movs	r0, #16
 8005328:	b2d9      	uxtb	r1, r3
 800532a:	b909      	cbnz	r1, 8005330 <__lo0bits+0x32>
 800532c:	3008      	adds	r0, #8
 800532e:	0a1b      	lsrs	r3, r3, #8
 8005330:	0719      	lsls	r1, r3, #28
 8005332:	bf04      	itt	eq
 8005334:	091b      	lsreq	r3, r3, #4
 8005336:	3004      	addeq	r0, #4
 8005338:	0799      	lsls	r1, r3, #30
 800533a:	bf04      	itt	eq
 800533c:	089b      	lsreq	r3, r3, #2
 800533e:	3002      	addeq	r0, #2
 8005340:	07d9      	lsls	r1, r3, #31
 8005342:	d403      	bmi.n	800534c <__lo0bits+0x4e>
 8005344:	085b      	lsrs	r3, r3, #1
 8005346:	f100 0001 	add.w	r0, r0, #1
 800534a:	d003      	beq.n	8005354 <__lo0bits+0x56>
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	4770      	bx	lr
 8005350:	2000      	movs	r0, #0
 8005352:	4770      	bx	lr
 8005354:	2020      	movs	r0, #32
 8005356:	4770      	bx	lr

08005358 <__i2b>:
 8005358:	b510      	push	{r4, lr}
 800535a:	460c      	mov	r4, r1
 800535c:	2101      	movs	r1, #1
 800535e:	f7ff ff07 	bl	8005170 <_Balloc>
 8005362:	4602      	mov	r2, r0
 8005364:	b928      	cbnz	r0, 8005372 <__i2b+0x1a>
 8005366:	4b05      	ldr	r3, [pc, #20]	@ (800537c <__i2b+0x24>)
 8005368:	4805      	ldr	r0, [pc, #20]	@ (8005380 <__i2b+0x28>)
 800536a:	f240 1145 	movw	r1, #325	@ 0x145
 800536e:	f000 fd21 	bl	8005db4 <__assert_func>
 8005372:	2301      	movs	r3, #1
 8005374:	6144      	str	r4, [r0, #20]
 8005376:	6103      	str	r3, [r0, #16]
 8005378:	bd10      	pop	{r4, pc}
 800537a:	bf00      	nop
 800537c:	08006174 	.word	0x08006174
 8005380:	08006185 	.word	0x08006185

08005384 <__multiply>:
 8005384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005388:	4614      	mov	r4, r2
 800538a:	690a      	ldr	r2, [r1, #16]
 800538c:	6923      	ldr	r3, [r4, #16]
 800538e:	429a      	cmp	r2, r3
 8005390:	bfa8      	it	ge
 8005392:	4623      	movge	r3, r4
 8005394:	460f      	mov	r7, r1
 8005396:	bfa4      	itt	ge
 8005398:	460c      	movge	r4, r1
 800539a:	461f      	movge	r7, r3
 800539c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80053a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80053a4:	68a3      	ldr	r3, [r4, #8]
 80053a6:	6861      	ldr	r1, [r4, #4]
 80053a8:	eb0a 0609 	add.w	r6, sl, r9
 80053ac:	42b3      	cmp	r3, r6
 80053ae:	b085      	sub	sp, #20
 80053b0:	bfb8      	it	lt
 80053b2:	3101      	addlt	r1, #1
 80053b4:	f7ff fedc 	bl	8005170 <_Balloc>
 80053b8:	b930      	cbnz	r0, 80053c8 <__multiply+0x44>
 80053ba:	4602      	mov	r2, r0
 80053bc:	4b44      	ldr	r3, [pc, #272]	@ (80054d0 <__multiply+0x14c>)
 80053be:	4845      	ldr	r0, [pc, #276]	@ (80054d4 <__multiply+0x150>)
 80053c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80053c4:	f000 fcf6 	bl	8005db4 <__assert_func>
 80053c8:	f100 0514 	add.w	r5, r0, #20
 80053cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80053d0:	462b      	mov	r3, r5
 80053d2:	2200      	movs	r2, #0
 80053d4:	4543      	cmp	r3, r8
 80053d6:	d321      	bcc.n	800541c <__multiply+0x98>
 80053d8:	f107 0114 	add.w	r1, r7, #20
 80053dc:	f104 0214 	add.w	r2, r4, #20
 80053e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80053e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80053e8:	9302      	str	r3, [sp, #8]
 80053ea:	1b13      	subs	r3, r2, r4
 80053ec:	3b15      	subs	r3, #21
 80053ee:	f023 0303 	bic.w	r3, r3, #3
 80053f2:	3304      	adds	r3, #4
 80053f4:	f104 0715 	add.w	r7, r4, #21
 80053f8:	42ba      	cmp	r2, r7
 80053fa:	bf38      	it	cc
 80053fc:	2304      	movcc	r3, #4
 80053fe:	9301      	str	r3, [sp, #4]
 8005400:	9b02      	ldr	r3, [sp, #8]
 8005402:	9103      	str	r1, [sp, #12]
 8005404:	428b      	cmp	r3, r1
 8005406:	d80c      	bhi.n	8005422 <__multiply+0x9e>
 8005408:	2e00      	cmp	r6, #0
 800540a:	dd03      	ble.n	8005414 <__multiply+0x90>
 800540c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005410:	2b00      	cmp	r3, #0
 8005412:	d05b      	beq.n	80054cc <__multiply+0x148>
 8005414:	6106      	str	r6, [r0, #16]
 8005416:	b005      	add	sp, #20
 8005418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800541c:	f843 2b04 	str.w	r2, [r3], #4
 8005420:	e7d8      	b.n	80053d4 <__multiply+0x50>
 8005422:	f8b1 a000 	ldrh.w	sl, [r1]
 8005426:	f1ba 0f00 	cmp.w	sl, #0
 800542a:	d024      	beq.n	8005476 <__multiply+0xf2>
 800542c:	f104 0e14 	add.w	lr, r4, #20
 8005430:	46a9      	mov	r9, r5
 8005432:	f04f 0c00 	mov.w	ip, #0
 8005436:	f85e 7b04 	ldr.w	r7, [lr], #4
 800543a:	f8d9 3000 	ldr.w	r3, [r9]
 800543e:	fa1f fb87 	uxth.w	fp, r7
 8005442:	b29b      	uxth	r3, r3
 8005444:	fb0a 330b 	mla	r3, sl, fp, r3
 8005448:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800544c:	f8d9 7000 	ldr.w	r7, [r9]
 8005450:	4463      	add	r3, ip
 8005452:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005456:	fb0a c70b 	mla	r7, sl, fp, ip
 800545a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800545e:	b29b      	uxth	r3, r3
 8005460:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005464:	4572      	cmp	r2, lr
 8005466:	f849 3b04 	str.w	r3, [r9], #4
 800546a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800546e:	d8e2      	bhi.n	8005436 <__multiply+0xb2>
 8005470:	9b01      	ldr	r3, [sp, #4]
 8005472:	f845 c003 	str.w	ip, [r5, r3]
 8005476:	9b03      	ldr	r3, [sp, #12]
 8005478:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800547c:	3104      	adds	r1, #4
 800547e:	f1b9 0f00 	cmp.w	r9, #0
 8005482:	d021      	beq.n	80054c8 <__multiply+0x144>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	f104 0c14 	add.w	ip, r4, #20
 800548a:	46ae      	mov	lr, r5
 800548c:	f04f 0a00 	mov.w	sl, #0
 8005490:	f8bc b000 	ldrh.w	fp, [ip]
 8005494:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005498:	fb09 770b 	mla	r7, r9, fp, r7
 800549c:	4457      	add	r7, sl
 800549e:	b29b      	uxth	r3, r3
 80054a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80054a4:	f84e 3b04 	str.w	r3, [lr], #4
 80054a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80054ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054b0:	f8be 3000 	ldrh.w	r3, [lr]
 80054b4:	fb09 330a 	mla	r3, r9, sl, r3
 80054b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80054bc:	4562      	cmp	r2, ip
 80054be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054c2:	d8e5      	bhi.n	8005490 <__multiply+0x10c>
 80054c4:	9f01      	ldr	r7, [sp, #4]
 80054c6:	51eb      	str	r3, [r5, r7]
 80054c8:	3504      	adds	r5, #4
 80054ca:	e799      	b.n	8005400 <__multiply+0x7c>
 80054cc:	3e01      	subs	r6, #1
 80054ce:	e79b      	b.n	8005408 <__multiply+0x84>
 80054d0:	08006174 	.word	0x08006174
 80054d4:	08006185 	.word	0x08006185

080054d8 <__pow5mult>:
 80054d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054dc:	4615      	mov	r5, r2
 80054de:	f012 0203 	ands.w	r2, r2, #3
 80054e2:	4607      	mov	r7, r0
 80054e4:	460e      	mov	r6, r1
 80054e6:	d007      	beq.n	80054f8 <__pow5mult+0x20>
 80054e8:	4c25      	ldr	r4, [pc, #148]	@ (8005580 <__pow5mult+0xa8>)
 80054ea:	3a01      	subs	r2, #1
 80054ec:	2300      	movs	r3, #0
 80054ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80054f2:	f7ff fe9f 	bl	8005234 <__multadd>
 80054f6:	4606      	mov	r6, r0
 80054f8:	10ad      	asrs	r5, r5, #2
 80054fa:	d03d      	beq.n	8005578 <__pow5mult+0xa0>
 80054fc:	69fc      	ldr	r4, [r7, #28]
 80054fe:	b97c      	cbnz	r4, 8005520 <__pow5mult+0x48>
 8005500:	2010      	movs	r0, #16
 8005502:	f7ff fd7f 	bl	8005004 <malloc>
 8005506:	4602      	mov	r2, r0
 8005508:	61f8      	str	r0, [r7, #28]
 800550a:	b928      	cbnz	r0, 8005518 <__pow5mult+0x40>
 800550c:	4b1d      	ldr	r3, [pc, #116]	@ (8005584 <__pow5mult+0xac>)
 800550e:	481e      	ldr	r0, [pc, #120]	@ (8005588 <__pow5mult+0xb0>)
 8005510:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005514:	f000 fc4e 	bl	8005db4 <__assert_func>
 8005518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800551c:	6004      	str	r4, [r0, #0]
 800551e:	60c4      	str	r4, [r0, #12]
 8005520:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005524:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005528:	b94c      	cbnz	r4, 800553e <__pow5mult+0x66>
 800552a:	f240 2171 	movw	r1, #625	@ 0x271
 800552e:	4638      	mov	r0, r7
 8005530:	f7ff ff12 	bl	8005358 <__i2b>
 8005534:	2300      	movs	r3, #0
 8005536:	f8c8 0008 	str.w	r0, [r8, #8]
 800553a:	4604      	mov	r4, r0
 800553c:	6003      	str	r3, [r0, #0]
 800553e:	f04f 0900 	mov.w	r9, #0
 8005542:	07eb      	lsls	r3, r5, #31
 8005544:	d50a      	bpl.n	800555c <__pow5mult+0x84>
 8005546:	4631      	mov	r1, r6
 8005548:	4622      	mov	r2, r4
 800554a:	4638      	mov	r0, r7
 800554c:	f7ff ff1a 	bl	8005384 <__multiply>
 8005550:	4631      	mov	r1, r6
 8005552:	4680      	mov	r8, r0
 8005554:	4638      	mov	r0, r7
 8005556:	f7ff fe4b 	bl	80051f0 <_Bfree>
 800555a:	4646      	mov	r6, r8
 800555c:	106d      	asrs	r5, r5, #1
 800555e:	d00b      	beq.n	8005578 <__pow5mult+0xa0>
 8005560:	6820      	ldr	r0, [r4, #0]
 8005562:	b938      	cbnz	r0, 8005574 <__pow5mult+0x9c>
 8005564:	4622      	mov	r2, r4
 8005566:	4621      	mov	r1, r4
 8005568:	4638      	mov	r0, r7
 800556a:	f7ff ff0b 	bl	8005384 <__multiply>
 800556e:	6020      	str	r0, [r4, #0]
 8005570:	f8c0 9000 	str.w	r9, [r0]
 8005574:	4604      	mov	r4, r0
 8005576:	e7e4      	b.n	8005542 <__pow5mult+0x6a>
 8005578:	4630      	mov	r0, r6
 800557a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800557e:	bf00      	nop
 8005580:	080061e0 	.word	0x080061e0
 8005584:	08006105 	.word	0x08006105
 8005588:	08006185 	.word	0x08006185

0800558c <__lshift>:
 800558c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005590:	460c      	mov	r4, r1
 8005592:	6849      	ldr	r1, [r1, #4]
 8005594:	6923      	ldr	r3, [r4, #16]
 8005596:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800559a:	68a3      	ldr	r3, [r4, #8]
 800559c:	4607      	mov	r7, r0
 800559e:	4691      	mov	r9, r2
 80055a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055a4:	f108 0601 	add.w	r6, r8, #1
 80055a8:	42b3      	cmp	r3, r6
 80055aa:	db0b      	blt.n	80055c4 <__lshift+0x38>
 80055ac:	4638      	mov	r0, r7
 80055ae:	f7ff fddf 	bl	8005170 <_Balloc>
 80055b2:	4605      	mov	r5, r0
 80055b4:	b948      	cbnz	r0, 80055ca <__lshift+0x3e>
 80055b6:	4602      	mov	r2, r0
 80055b8:	4b28      	ldr	r3, [pc, #160]	@ (800565c <__lshift+0xd0>)
 80055ba:	4829      	ldr	r0, [pc, #164]	@ (8005660 <__lshift+0xd4>)
 80055bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80055c0:	f000 fbf8 	bl	8005db4 <__assert_func>
 80055c4:	3101      	adds	r1, #1
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	e7ee      	b.n	80055a8 <__lshift+0x1c>
 80055ca:	2300      	movs	r3, #0
 80055cc:	f100 0114 	add.w	r1, r0, #20
 80055d0:	f100 0210 	add.w	r2, r0, #16
 80055d4:	4618      	mov	r0, r3
 80055d6:	4553      	cmp	r3, sl
 80055d8:	db33      	blt.n	8005642 <__lshift+0xb6>
 80055da:	6920      	ldr	r0, [r4, #16]
 80055dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80055e0:	f104 0314 	add.w	r3, r4, #20
 80055e4:	f019 091f 	ands.w	r9, r9, #31
 80055e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80055ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80055f0:	d02b      	beq.n	800564a <__lshift+0xbe>
 80055f2:	f1c9 0e20 	rsb	lr, r9, #32
 80055f6:	468a      	mov	sl, r1
 80055f8:	2200      	movs	r2, #0
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	fa00 f009 	lsl.w	r0, r0, r9
 8005600:	4310      	orrs	r0, r2
 8005602:	f84a 0b04 	str.w	r0, [sl], #4
 8005606:	f853 2b04 	ldr.w	r2, [r3], #4
 800560a:	459c      	cmp	ip, r3
 800560c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005610:	d8f3      	bhi.n	80055fa <__lshift+0x6e>
 8005612:	ebac 0304 	sub.w	r3, ip, r4
 8005616:	3b15      	subs	r3, #21
 8005618:	f023 0303 	bic.w	r3, r3, #3
 800561c:	3304      	adds	r3, #4
 800561e:	f104 0015 	add.w	r0, r4, #21
 8005622:	4584      	cmp	ip, r0
 8005624:	bf38      	it	cc
 8005626:	2304      	movcc	r3, #4
 8005628:	50ca      	str	r2, [r1, r3]
 800562a:	b10a      	cbz	r2, 8005630 <__lshift+0xa4>
 800562c:	f108 0602 	add.w	r6, r8, #2
 8005630:	3e01      	subs	r6, #1
 8005632:	4638      	mov	r0, r7
 8005634:	612e      	str	r6, [r5, #16]
 8005636:	4621      	mov	r1, r4
 8005638:	f7ff fdda 	bl	80051f0 <_Bfree>
 800563c:	4628      	mov	r0, r5
 800563e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005642:	f842 0f04 	str.w	r0, [r2, #4]!
 8005646:	3301      	adds	r3, #1
 8005648:	e7c5      	b.n	80055d6 <__lshift+0x4a>
 800564a:	3904      	subs	r1, #4
 800564c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005650:	f841 2f04 	str.w	r2, [r1, #4]!
 8005654:	459c      	cmp	ip, r3
 8005656:	d8f9      	bhi.n	800564c <__lshift+0xc0>
 8005658:	e7ea      	b.n	8005630 <__lshift+0xa4>
 800565a:	bf00      	nop
 800565c:	08006174 	.word	0x08006174
 8005660:	08006185 	.word	0x08006185

08005664 <__mcmp>:
 8005664:	690a      	ldr	r2, [r1, #16]
 8005666:	4603      	mov	r3, r0
 8005668:	6900      	ldr	r0, [r0, #16]
 800566a:	1a80      	subs	r0, r0, r2
 800566c:	b530      	push	{r4, r5, lr}
 800566e:	d10e      	bne.n	800568e <__mcmp+0x2a>
 8005670:	3314      	adds	r3, #20
 8005672:	3114      	adds	r1, #20
 8005674:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005678:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800567c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005680:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005684:	4295      	cmp	r5, r2
 8005686:	d003      	beq.n	8005690 <__mcmp+0x2c>
 8005688:	d205      	bcs.n	8005696 <__mcmp+0x32>
 800568a:	f04f 30ff 	mov.w	r0, #4294967295
 800568e:	bd30      	pop	{r4, r5, pc}
 8005690:	42a3      	cmp	r3, r4
 8005692:	d3f3      	bcc.n	800567c <__mcmp+0x18>
 8005694:	e7fb      	b.n	800568e <__mcmp+0x2a>
 8005696:	2001      	movs	r0, #1
 8005698:	e7f9      	b.n	800568e <__mcmp+0x2a>
	...

0800569c <__mdiff>:
 800569c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a0:	4689      	mov	r9, r1
 80056a2:	4606      	mov	r6, r0
 80056a4:	4611      	mov	r1, r2
 80056a6:	4648      	mov	r0, r9
 80056a8:	4614      	mov	r4, r2
 80056aa:	f7ff ffdb 	bl	8005664 <__mcmp>
 80056ae:	1e05      	subs	r5, r0, #0
 80056b0:	d112      	bne.n	80056d8 <__mdiff+0x3c>
 80056b2:	4629      	mov	r1, r5
 80056b4:	4630      	mov	r0, r6
 80056b6:	f7ff fd5b 	bl	8005170 <_Balloc>
 80056ba:	4602      	mov	r2, r0
 80056bc:	b928      	cbnz	r0, 80056ca <__mdiff+0x2e>
 80056be:	4b3f      	ldr	r3, [pc, #252]	@ (80057bc <__mdiff+0x120>)
 80056c0:	f240 2137 	movw	r1, #567	@ 0x237
 80056c4:	483e      	ldr	r0, [pc, #248]	@ (80057c0 <__mdiff+0x124>)
 80056c6:	f000 fb75 	bl	8005db4 <__assert_func>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80056d0:	4610      	mov	r0, r2
 80056d2:	b003      	add	sp, #12
 80056d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d8:	bfbc      	itt	lt
 80056da:	464b      	movlt	r3, r9
 80056dc:	46a1      	movlt	r9, r4
 80056de:	4630      	mov	r0, r6
 80056e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80056e4:	bfba      	itte	lt
 80056e6:	461c      	movlt	r4, r3
 80056e8:	2501      	movlt	r5, #1
 80056ea:	2500      	movge	r5, #0
 80056ec:	f7ff fd40 	bl	8005170 <_Balloc>
 80056f0:	4602      	mov	r2, r0
 80056f2:	b918      	cbnz	r0, 80056fc <__mdiff+0x60>
 80056f4:	4b31      	ldr	r3, [pc, #196]	@ (80057bc <__mdiff+0x120>)
 80056f6:	f240 2145 	movw	r1, #581	@ 0x245
 80056fa:	e7e3      	b.n	80056c4 <__mdiff+0x28>
 80056fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005700:	6926      	ldr	r6, [r4, #16]
 8005702:	60c5      	str	r5, [r0, #12]
 8005704:	f109 0310 	add.w	r3, r9, #16
 8005708:	f109 0514 	add.w	r5, r9, #20
 800570c:	f104 0e14 	add.w	lr, r4, #20
 8005710:	f100 0b14 	add.w	fp, r0, #20
 8005714:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005718:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	46d9      	mov	r9, fp
 8005720:	f04f 0c00 	mov.w	ip, #0
 8005724:	9b01      	ldr	r3, [sp, #4]
 8005726:	f85e 0b04 	ldr.w	r0, [lr], #4
 800572a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800572e:	9301      	str	r3, [sp, #4]
 8005730:	fa1f f38a 	uxth.w	r3, sl
 8005734:	4619      	mov	r1, r3
 8005736:	b283      	uxth	r3, r0
 8005738:	1acb      	subs	r3, r1, r3
 800573a:	0c00      	lsrs	r0, r0, #16
 800573c:	4463      	add	r3, ip
 800573e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005742:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005746:	b29b      	uxth	r3, r3
 8005748:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800574c:	4576      	cmp	r6, lr
 800574e:	f849 3b04 	str.w	r3, [r9], #4
 8005752:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005756:	d8e5      	bhi.n	8005724 <__mdiff+0x88>
 8005758:	1b33      	subs	r3, r6, r4
 800575a:	3b15      	subs	r3, #21
 800575c:	f023 0303 	bic.w	r3, r3, #3
 8005760:	3415      	adds	r4, #21
 8005762:	3304      	adds	r3, #4
 8005764:	42a6      	cmp	r6, r4
 8005766:	bf38      	it	cc
 8005768:	2304      	movcc	r3, #4
 800576a:	441d      	add	r5, r3
 800576c:	445b      	add	r3, fp
 800576e:	461e      	mov	r6, r3
 8005770:	462c      	mov	r4, r5
 8005772:	4544      	cmp	r4, r8
 8005774:	d30e      	bcc.n	8005794 <__mdiff+0xf8>
 8005776:	f108 0103 	add.w	r1, r8, #3
 800577a:	1b49      	subs	r1, r1, r5
 800577c:	f021 0103 	bic.w	r1, r1, #3
 8005780:	3d03      	subs	r5, #3
 8005782:	45a8      	cmp	r8, r5
 8005784:	bf38      	it	cc
 8005786:	2100      	movcc	r1, #0
 8005788:	440b      	add	r3, r1
 800578a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800578e:	b191      	cbz	r1, 80057b6 <__mdiff+0x11a>
 8005790:	6117      	str	r7, [r2, #16]
 8005792:	e79d      	b.n	80056d0 <__mdiff+0x34>
 8005794:	f854 1b04 	ldr.w	r1, [r4], #4
 8005798:	46e6      	mov	lr, ip
 800579a:	0c08      	lsrs	r0, r1, #16
 800579c:	fa1c fc81 	uxtah	ip, ip, r1
 80057a0:	4471      	add	r1, lr
 80057a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80057a6:	b289      	uxth	r1, r1
 80057a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80057ac:	f846 1b04 	str.w	r1, [r6], #4
 80057b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80057b4:	e7dd      	b.n	8005772 <__mdiff+0xd6>
 80057b6:	3f01      	subs	r7, #1
 80057b8:	e7e7      	b.n	800578a <__mdiff+0xee>
 80057ba:	bf00      	nop
 80057bc:	08006174 	.word	0x08006174
 80057c0:	08006185 	.word	0x08006185

080057c4 <__d2b>:
 80057c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80057c8:	460f      	mov	r7, r1
 80057ca:	2101      	movs	r1, #1
 80057cc:	ec59 8b10 	vmov	r8, r9, d0
 80057d0:	4616      	mov	r6, r2
 80057d2:	f7ff fccd 	bl	8005170 <_Balloc>
 80057d6:	4604      	mov	r4, r0
 80057d8:	b930      	cbnz	r0, 80057e8 <__d2b+0x24>
 80057da:	4602      	mov	r2, r0
 80057dc:	4b23      	ldr	r3, [pc, #140]	@ (800586c <__d2b+0xa8>)
 80057de:	4824      	ldr	r0, [pc, #144]	@ (8005870 <__d2b+0xac>)
 80057e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80057e4:	f000 fae6 	bl	8005db4 <__assert_func>
 80057e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80057ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80057f0:	b10d      	cbz	r5, 80057f6 <__d2b+0x32>
 80057f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057f6:	9301      	str	r3, [sp, #4]
 80057f8:	f1b8 0300 	subs.w	r3, r8, #0
 80057fc:	d023      	beq.n	8005846 <__d2b+0x82>
 80057fe:	4668      	mov	r0, sp
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	f7ff fd7c 	bl	80052fe <__lo0bits>
 8005806:	e9dd 1200 	ldrd	r1, r2, [sp]
 800580a:	b1d0      	cbz	r0, 8005842 <__d2b+0x7e>
 800580c:	f1c0 0320 	rsb	r3, r0, #32
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	430b      	orrs	r3, r1
 8005816:	40c2      	lsrs	r2, r0
 8005818:	6163      	str	r3, [r4, #20]
 800581a:	9201      	str	r2, [sp, #4]
 800581c:	9b01      	ldr	r3, [sp, #4]
 800581e:	61a3      	str	r3, [r4, #24]
 8005820:	2b00      	cmp	r3, #0
 8005822:	bf0c      	ite	eq
 8005824:	2201      	moveq	r2, #1
 8005826:	2202      	movne	r2, #2
 8005828:	6122      	str	r2, [r4, #16]
 800582a:	b1a5      	cbz	r5, 8005856 <__d2b+0x92>
 800582c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005830:	4405      	add	r5, r0
 8005832:	603d      	str	r5, [r7, #0]
 8005834:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005838:	6030      	str	r0, [r6, #0]
 800583a:	4620      	mov	r0, r4
 800583c:	b003      	add	sp, #12
 800583e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005842:	6161      	str	r1, [r4, #20]
 8005844:	e7ea      	b.n	800581c <__d2b+0x58>
 8005846:	a801      	add	r0, sp, #4
 8005848:	f7ff fd59 	bl	80052fe <__lo0bits>
 800584c:	9b01      	ldr	r3, [sp, #4]
 800584e:	6163      	str	r3, [r4, #20]
 8005850:	3020      	adds	r0, #32
 8005852:	2201      	movs	r2, #1
 8005854:	e7e8      	b.n	8005828 <__d2b+0x64>
 8005856:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800585a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800585e:	6038      	str	r0, [r7, #0]
 8005860:	6918      	ldr	r0, [r3, #16]
 8005862:	f7ff fd2d 	bl	80052c0 <__hi0bits>
 8005866:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800586a:	e7e5      	b.n	8005838 <__d2b+0x74>
 800586c:	08006174 	.word	0x08006174
 8005870:	08006185 	.word	0x08006185

08005874 <__sfputc_r>:
 8005874:	6893      	ldr	r3, [r2, #8]
 8005876:	3b01      	subs	r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	b410      	push	{r4}
 800587c:	6093      	str	r3, [r2, #8]
 800587e:	da08      	bge.n	8005892 <__sfputc_r+0x1e>
 8005880:	6994      	ldr	r4, [r2, #24]
 8005882:	42a3      	cmp	r3, r4
 8005884:	db01      	blt.n	800588a <__sfputc_r+0x16>
 8005886:	290a      	cmp	r1, #10
 8005888:	d103      	bne.n	8005892 <__sfputc_r+0x1e>
 800588a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800588e:	f000 b9df 	b.w	8005c50 <__swbuf_r>
 8005892:	6813      	ldr	r3, [r2, #0]
 8005894:	1c58      	adds	r0, r3, #1
 8005896:	6010      	str	r0, [r2, #0]
 8005898:	7019      	strb	r1, [r3, #0]
 800589a:	4608      	mov	r0, r1
 800589c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <__sfputs_r>:
 80058a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a4:	4606      	mov	r6, r0
 80058a6:	460f      	mov	r7, r1
 80058a8:	4614      	mov	r4, r2
 80058aa:	18d5      	adds	r5, r2, r3
 80058ac:	42ac      	cmp	r4, r5
 80058ae:	d101      	bne.n	80058b4 <__sfputs_r+0x12>
 80058b0:	2000      	movs	r0, #0
 80058b2:	e007      	b.n	80058c4 <__sfputs_r+0x22>
 80058b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b8:	463a      	mov	r2, r7
 80058ba:	4630      	mov	r0, r6
 80058bc:	f7ff ffda 	bl	8005874 <__sfputc_r>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d1f3      	bne.n	80058ac <__sfputs_r+0xa>
 80058c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058c8 <_vfiprintf_r>:
 80058c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058cc:	460d      	mov	r5, r1
 80058ce:	b09d      	sub	sp, #116	@ 0x74
 80058d0:	4614      	mov	r4, r2
 80058d2:	4698      	mov	r8, r3
 80058d4:	4606      	mov	r6, r0
 80058d6:	b118      	cbz	r0, 80058e0 <_vfiprintf_r+0x18>
 80058d8:	6a03      	ldr	r3, [r0, #32]
 80058da:	b90b      	cbnz	r3, 80058e0 <_vfiprintf_r+0x18>
 80058dc:	f7fe fbf0 	bl	80040c0 <__sinit>
 80058e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058e2:	07d9      	lsls	r1, r3, #31
 80058e4:	d405      	bmi.n	80058f2 <_vfiprintf_r+0x2a>
 80058e6:	89ab      	ldrh	r3, [r5, #12]
 80058e8:	059a      	lsls	r2, r3, #22
 80058ea:	d402      	bmi.n	80058f2 <_vfiprintf_r+0x2a>
 80058ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058ee:	f7fe fcf0 	bl	80042d2 <__retarget_lock_acquire_recursive>
 80058f2:	89ab      	ldrh	r3, [r5, #12]
 80058f4:	071b      	lsls	r3, r3, #28
 80058f6:	d501      	bpl.n	80058fc <_vfiprintf_r+0x34>
 80058f8:	692b      	ldr	r3, [r5, #16]
 80058fa:	b99b      	cbnz	r3, 8005924 <_vfiprintf_r+0x5c>
 80058fc:	4629      	mov	r1, r5
 80058fe:	4630      	mov	r0, r6
 8005900:	f000 f9e4 	bl	8005ccc <__swsetup_r>
 8005904:	b170      	cbz	r0, 8005924 <_vfiprintf_r+0x5c>
 8005906:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005908:	07dc      	lsls	r4, r3, #31
 800590a:	d504      	bpl.n	8005916 <_vfiprintf_r+0x4e>
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	b01d      	add	sp, #116	@ 0x74
 8005912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005916:	89ab      	ldrh	r3, [r5, #12]
 8005918:	0598      	lsls	r0, r3, #22
 800591a:	d4f7      	bmi.n	800590c <_vfiprintf_r+0x44>
 800591c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800591e:	f7fe fcd9 	bl	80042d4 <__retarget_lock_release_recursive>
 8005922:	e7f3      	b.n	800590c <_vfiprintf_r+0x44>
 8005924:	2300      	movs	r3, #0
 8005926:	9309      	str	r3, [sp, #36]	@ 0x24
 8005928:	2320      	movs	r3, #32
 800592a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800592e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005932:	2330      	movs	r3, #48	@ 0x30
 8005934:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005ae4 <_vfiprintf_r+0x21c>
 8005938:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800593c:	f04f 0901 	mov.w	r9, #1
 8005940:	4623      	mov	r3, r4
 8005942:	469a      	mov	sl, r3
 8005944:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005948:	b10a      	cbz	r2, 800594e <_vfiprintf_r+0x86>
 800594a:	2a25      	cmp	r2, #37	@ 0x25
 800594c:	d1f9      	bne.n	8005942 <_vfiprintf_r+0x7a>
 800594e:	ebba 0b04 	subs.w	fp, sl, r4
 8005952:	d00b      	beq.n	800596c <_vfiprintf_r+0xa4>
 8005954:	465b      	mov	r3, fp
 8005956:	4622      	mov	r2, r4
 8005958:	4629      	mov	r1, r5
 800595a:	4630      	mov	r0, r6
 800595c:	f7ff ffa1 	bl	80058a2 <__sfputs_r>
 8005960:	3001      	adds	r0, #1
 8005962:	f000 80a7 	beq.w	8005ab4 <_vfiprintf_r+0x1ec>
 8005966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005968:	445a      	add	r2, fp
 800596a:	9209      	str	r2, [sp, #36]	@ 0x24
 800596c:	f89a 3000 	ldrb.w	r3, [sl]
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 809f 	beq.w	8005ab4 <_vfiprintf_r+0x1ec>
 8005976:	2300      	movs	r3, #0
 8005978:	f04f 32ff 	mov.w	r2, #4294967295
 800597c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005980:	f10a 0a01 	add.w	sl, sl, #1
 8005984:	9304      	str	r3, [sp, #16]
 8005986:	9307      	str	r3, [sp, #28]
 8005988:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800598c:	931a      	str	r3, [sp, #104]	@ 0x68
 800598e:	4654      	mov	r4, sl
 8005990:	2205      	movs	r2, #5
 8005992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005996:	4853      	ldr	r0, [pc, #332]	@ (8005ae4 <_vfiprintf_r+0x21c>)
 8005998:	f7fa fc3a 	bl	8000210 <memchr>
 800599c:	9a04      	ldr	r2, [sp, #16]
 800599e:	b9d8      	cbnz	r0, 80059d8 <_vfiprintf_r+0x110>
 80059a0:	06d1      	lsls	r1, r2, #27
 80059a2:	bf44      	itt	mi
 80059a4:	2320      	movmi	r3, #32
 80059a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059aa:	0713      	lsls	r3, r2, #28
 80059ac:	bf44      	itt	mi
 80059ae:	232b      	movmi	r3, #43	@ 0x2b
 80059b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059b4:	f89a 3000 	ldrb.w	r3, [sl]
 80059b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80059ba:	d015      	beq.n	80059e8 <_vfiprintf_r+0x120>
 80059bc:	9a07      	ldr	r2, [sp, #28]
 80059be:	4654      	mov	r4, sl
 80059c0:	2000      	movs	r0, #0
 80059c2:	f04f 0c0a 	mov.w	ip, #10
 80059c6:	4621      	mov	r1, r4
 80059c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059cc:	3b30      	subs	r3, #48	@ 0x30
 80059ce:	2b09      	cmp	r3, #9
 80059d0:	d94b      	bls.n	8005a6a <_vfiprintf_r+0x1a2>
 80059d2:	b1b0      	cbz	r0, 8005a02 <_vfiprintf_r+0x13a>
 80059d4:	9207      	str	r2, [sp, #28]
 80059d6:	e014      	b.n	8005a02 <_vfiprintf_r+0x13a>
 80059d8:	eba0 0308 	sub.w	r3, r0, r8
 80059dc:	fa09 f303 	lsl.w	r3, r9, r3
 80059e0:	4313      	orrs	r3, r2
 80059e2:	9304      	str	r3, [sp, #16]
 80059e4:	46a2      	mov	sl, r4
 80059e6:	e7d2      	b.n	800598e <_vfiprintf_r+0xc6>
 80059e8:	9b03      	ldr	r3, [sp, #12]
 80059ea:	1d19      	adds	r1, r3, #4
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	9103      	str	r1, [sp, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	bfbb      	ittet	lt
 80059f4:	425b      	neglt	r3, r3
 80059f6:	f042 0202 	orrlt.w	r2, r2, #2
 80059fa:	9307      	strge	r3, [sp, #28]
 80059fc:	9307      	strlt	r3, [sp, #28]
 80059fe:	bfb8      	it	lt
 8005a00:	9204      	strlt	r2, [sp, #16]
 8005a02:	7823      	ldrb	r3, [r4, #0]
 8005a04:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a06:	d10a      	bne.n	8005a1e <_vfiprintf_r+0x156>
 8005a08:	7863      	ldrb	r3, [r4, #1]
 8005a0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a0c:	d132      	bne.n	8005a74 <_vfiprintf_r+0x1ac>
 8005a0e:	9b03      	ldr	r3, [sp, #12]
 8005a10:	1d1a      	adds	r2, r3, #4
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	9203      	str	r2, [sp, #12]
 8005a16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a1a:	3402      	adds	r4, #2
 8005a1c:	9305      	str	r3, [sp, #20]
 8005a1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005af4 <_vfiprintf_r+0x22c>
 8005a22:	7821      	ldrb	r1, [r4, #0]
 8005a24:	2203      	movs	r2, #3
 8005a26:	4650      	mov	r0, sl
 8005a28:	f7fa fbf2 	bl	8000210 <memchr>
 8005a2c:	b138      	cbz	r0, 8005a3e <_vfiprintf_r+0x176>
 8005a2e:	9b04      	ldr	r3, [sp, #16]
 8005a30:	eba0 000a 	sub.w	r0, r0, sl
 8005a34:	2240      	movs	r2, #64	@ 0x40
 8005a36:	4082      	lsls	r2, r0
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	3401      	adds	r4, #1
 8005a3c:	9304      	str	r3, [sp, #16]
 8005a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a42:	4829      	ldr	r0, [pc, #164]	@ (8005ae8 <_vfiprintf_r+0x220>)
 8005a44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a48:	2206      	movs	r2, #6
 8005a4a:	f7fa fbe1 	bl	8000210 <memchr>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	d03f      	beq.n	8005ad2 <_vfiprintf_r+0x20a>
 8005a52:	4b26      	ldr	r3, [pc, #152]	@ (8005aec <_vfiprintf_r+0x224>)
 8005a54:	bb1b      	cbnz	r3, 8005a9e <_vfiprintf_r+0x1d6>
 8005a56:	9b03      	ldr	r3, [sp, #12]
 8005a58:	3307      	adds	r3, #7
 8005a5a:	f023 0307 	bic.w	r3, r3, #7
 8005a5e:	3308      	adds	r3, #8
 8005a60:	9303      	str	r3, [sp, #12]
 8005a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a64:	443b      	add	r3, r7
 8005a66:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a68:	e76a      	b.n	8005940 <_vfiprintf_r+0x78>
 8005a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a6e:	460c      	mov	r4, r1
 8005a70:	2001      	movs	r0, #1
 8005a72:	e7a8      	b.n	80059c6 <_vfiprintf_r+0xfe>
 8005a74:	2300      	movs	r3, #0
 8005a76:	3401      	adds	r4, #1
 8005a78:	9305      	str	r3, [sp, #20]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	f04f 0c0a 	mov.w	ip, #10
 8005a80:	4620      	mov	r0, r4
 8005a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a86:	3a30      	subs	r2, #48	@ 0x30
 8005a88:	2a09      	cmp	r2, #9
 8005a8a:	d903      	bls.n	8005a94 <_vfiprintf_r+0x1cc>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0c6      	beq.n	8005a1e <_vfiprintf_r+0x156>
 8005a90:	9105      	str	r1, [sp, #20]
 8005a92:	e7c4      	b.n	8005a1e <_vfiprintf_r+0x156>
 8005a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a98:	4604      	mov	r4, r0
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e7f0      	b.n	8005a80 <_vfiprintf_r+0x1b8>
 8005a9e:	ab03      	add	r3, sp, #12
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	462a      	mov	r2, r5
 8005aa4:	4b12      	ldr	r3, [pc, #72]	@ (8005af0 <_vfiprintf_r+0x228>)
 8005aa6:	a904      	add	r1, sp, #16
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f7fd fec5 	bl	8003838 <_printf_float>
 8005aae:	4607      	mov	r7, r0
 8005ab0:	1c78      	adds	r0, r7, #1
 8005ab2:	d1d6      	bne.n	8005a62 <_vfiprintf_r+0x19a>
 8005ab4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ab6:	07d9      	lsls	r1, r3, #31
 8005ab8:	d405      	bmi.n	8005ac6 <_vfiprintf_r+0x1fe>
 8005aba:	89ab      	ldrh	r3, [r5, #12]
 8005abc:	059a      	lsls	r2, r3, #22
 8005abe:	d402      	bmi.n	8005ac6 <_vfiprintf_r+0x1fe>
 8005ac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ac2:	f7fe fc07 	bl	80042d4 <__retarget_lock_release_recursive>
 8005ac6:	89ab      	ldrh	r3, [r5, #12]
 8005ac8:	065b      	lsls	r3, r3, #25
 8005aca:	f53f af1f 	bmi.w	800590c <_vfiprintf_r+0x44>
 8005ace:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ad0:	e71e      	b.n	8005910 <_vfiprintf_r+0x48>
 8005ad2:	ab03      	add	r3, sp, #12
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	462a      	mov	r2, r5
 8005ad8:	4b05      	ldr	r3, [pc, #20]	@ (8005af0 <_vfiprintf_r+0x228>)
 8005ada:	a904      	add	r1, sp, #16
 8005adc:	4630      	mov	r0, r6
 8005ade:	f7fe f943 	bl	8003d68 <_printf_i>
 8005ae2:	e7e4      	b.n	8005aae <_vfiprintf_r+0x1e6>
 8005ae4:	080062e0 	.word	0x080062e0
 8005ae8:	080062ea 	.word	0x080062ea
 8005aec:	08003839 	.word	0x08003839
 8005af0:	080058a3 	.word	0x080058a3
 8005af4:	080062e6 	.word	0x080062e6

08005af8 <__sflush_r>:
 8005af8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b00:	0716      	lsls	r6, r2, #28
 8005b02:	4605      	mov	r5, r0
 8005b04:	460c      	mov	r4, r1
 8005b06:	d454      	bmi.n	8005bb2 <__sflush_r+0xba>
 8005b08:	684b      	ldr	r3, [r1, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	dc02      	bgt.n	8005b14 <__sflush_r+0x1c>
 8005b0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	dd48      	ble.n	8005ba6 <__sflush_r+0xae>
 8005b14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b16:	2e00      	cmp	r6, #0
 8005b18:	d045      	beq.n	8005ba6 <__sflush_r+0xae>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b20:	682f      	ldr	r7, [r5, #0]
 8005b22:	6a21      	ldr	r1, [r4, #32]
 8005b24:	602b      	str	r3, [r5, #0]
 8005b26:	d030      	beq.n	8005b8a <__sflush_r+0x92>
 8005b28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	0759      	lsls	r1, r3, #29
 8005b2e:	d505      	bpl.n	8005b3c <__sflush_r+0x44>
 8005b30:	6863      	ldr	r3, [r4, #4]
 8005b32:	1ad2      	subs	r2, r2, r3
 8005b34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b36:	b10b      	cbz	r3, 8005b3c <__sflush_r+0x44>
 8005b38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b3a:	1ad2      	subs	r2, r2, r3
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b40:	6a21      	ldr	r1, [r4, #32]
 8005b42:	4628      	mov	r0, r5
 8005b44:	47b0      	blx	r6
 8005b46:	1c43      	adds	r3, r0, #1
 8005b48:	89a3      	ldrh	r3, [r4, #12]
 8005b4a:	d106      	bne.n	8005b5a <__sflush_r+0x62>
 8005b4c:	6829      	ldr	r1, [r5, #0]
 8005b4e:	291d      	cmp	r1, #29
 8005b50:	d82b      	bhi.n	8005baa <__sflush_r+0xb2>
 8005b52:	4a2a      	ldr	r2, [pc, #168]	@ (8005bfc <__sflush_r+0x104>)
 8005b54:	410a      	asrs	r2, r1
 8005b56:	07d6      	lsls	r6, r2, #31
 8005b58:	d427      	bmi.n	8005baa <__sflush_r+0xb2>
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	6062      	str	r2, [r4, #4]
 8005b5e:	04d9      	lsls	r1, r3, #19
 8005b60:	6922      	ldr	r2, [r4, #16]
 8005b62:	6022      	str	r2, [r4, #0]
 8005b64:	d504      	bpl.n	8005b70 <__sflush_r+0x78>
 8005b66:	1c42      	adds	r2, r0, #1
 8005b68:	d101      	bne.n	8005b6e <__sflush_r+0x76>
 8005b6a:	682b      	ldr	r3, [r5, #0]
 8005b6c:	b903      	cbnz	r3, 8005b70 <__sflush_r+0x78>
 8005b6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005b70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b72:	602f      	str	r7, [r5, #0]
 8005b74:	b1b9      	cbz	r1, 8005ba6 <__sflush_r+0xae>
 8005b76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b7a:	4299      	cmp	r1, r3
 8005b7c:	d002      	beq.n	8005b84 <__sflush_r+0x8c>
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f7ff f9f6 	bl	8004f70 <_free_r>
 8005b84:	2300      	movs	r3, #0
 8005b86:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b88:	e00d      	b.n	8005ba6 <__sflush_r+0xae>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	47b0      	blx	r6
 8005b90:	4602      	mov	r2, r0
 8005b92:	1c50      	adds	r0, r2, #1
 8005b94:	d1c9      	bne.n	8005b2a <__sflush_r+0x32>
 8005b96:	682b      	ldr	r3, [r5, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0c6      	beq.n	8005b2a <__sflush_r+0x32>
 8005b9c:	2b1d      	cmp	r3, #29
 8005b9e:	d001      	beq.n	8005ba4 <__sflush_r+0xac>
 8005ba0:	2b16      	cmp	r3, #22
 8005ba2:	d11e      	bne.n	8005be2 <__sflush_r+0xea>
 8005ba4:	602f      	str	r7, [r5, #0]
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	e022      	b.n	8005bf0 <__sflush_r+0xf8>
 8005baa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bae:	b21b      	sxth	r3, r3
 8005bb0:	e01b      	b.n	8005bea <__sflush_r+0xf2>
 8005bb2:	690f      	ldr	r7, [r1, #16]
 8005bb4:	2f00      	cmp	r7, #0
 8005bb6:	d0f6      	beq.n	8005ba6 <__sflush_r+0xae>
 8005bb8:	0793      	lsls	r3, r2, #30
 8005bba:	680e      	ldr	r6, [r1, #0]
 8005bbc:	bf08      	it	eq
 8005bbe:	694b      	ldreq	r3, [r1, #20]
 8005bc0:	600f      	str	r7, [r1, #0]
 8005bc2:	bf18      	it	ne
 8005bc4:	2300      	movne	r3, #0
 8005bc6:	eba6 0807 	sub.w	r8, r6, r7
 8005bca:	608b      	str	r3, [r1, #8]
 8005bcc:	f1b8 0f00 	cmp.w	r8, #0
 8005bd0:	dde9      	ble.n	8005ba6 <__sflush_r+0xae>
 8005bd2:	6a21      	ldr	r1, [r4, #32]
 8005bd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005bd6:	4643      	mov	r3, r8
 8005bd8:	463a      	mov	r2, r7
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b0      	blx	r6
 8005bde:	2800      	cmp	r0, #0
 8005be0:	dc08      	bgt.n	8005bf4 <__sflush_r+0xfc>
 8005be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bea:	81a3      	strh	r3, [r4, #12]
 8005bec:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf4:	4407      	add	r7, r0
 8005bf6:	eba8 0800 	sub.w	r8, r8, r0
 8005bfa:	e7e7      	b.n	8005bcc <__sflush_r+0xd4>
 8005bfc:	dfbffffe 	.word	0xdfbffffe

08005c00 <_fflush_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	690b      	ldr	r3, [r1, #16]
 8005c04:	4605      	mov	r5, r0
 8005c06:	460c      	mov	r4, r1
 8005c08:	b913      	cbnz	r3, 8005c10 <_fflush_r+0x10>
 8005c0a:	2500      	movs	r5, #0
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	bd38      	pop	{r3, r4, r5, pc}
 8005c10:	b118      	cbz	r0, 8005c1a <_fflush_r+0x1a>
 8005c12:	6a03      	ldr	r3, [r0, #32]
 8005c14:	b90b      	cbnz	r3, 8005c1a <_fflush_r+0x1a>
 8005c16:	f7fe fa53 	bl	80040c0 <__sinit>
 8005c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f3      	beq.n	8005c0a <_fflush_r+0xa>
 8005c22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c24:	07d0      	lsls	r0, r2, #31
 8005c26:	d404      	bmi.n	8005c32 <_fflush_r+0x32>
 8005c28:	0599      	lsls	r1, r3, #22
 8005c2a:	d402      	bmi.n	8005c32 <_fflush_r+0x32>
 8005c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c2e:	f7fe fb50 	bl	80042d2 <__retarget_lock_acquire_recursive>
 8005c32:	4628      	mov	r0, r5
 8005c34:	4621      	mov	r1, r4
 8005c36:	f7ff ff5f 	bl	8005af8 <__sflush_r>
 8005c3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c3c:	07da      	lsls	r2, r3, #31
 8005c3e:	4605      	mov	r5, r0
 8005c40:	d4e4      	bmi.n	8005c0c <_fflush_r+0xc>
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	059b      	lsls	r3, r3, #22
 8005c46:	d4e1      	bmi.n	8005c0c <_fflush_r+0xc>
 8005c48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c4a:	f7fe fb43 	bl	80042d4 <__retarget_lock_release_recursive>
 8005c4e:	e7dd      	b.n	8005c0c <_fflush_r+0xc>

08005c50 <__swbuf_r>:
 8005c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c52:	460e      	mov	r6, r1
 8005c54:	4614      	mov	r4, r2
 8005c56:	4605      	mov	r5, r0
 8005c58:	b118      	cbz	r0, 8005c62 <__swbuf_r+0x12>
 8005c5a:	6a03      	ldr	r3, [r0, #32]
 8005c5c:	b90b      	cbnz	r3, 8005c62 <__swbuf_r+0x12>
 8005c5e:	f7fe fa2f 	bl	80040c0 <__sinit>
 8005c62:	69a3      	ldr	r3, [r4, #24]
 8005c64:	60a3      	str	r3, [r4, #8]
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	071a      	lsls	r2, r3, #28
 8005c6a:	d501      	bpl.n	8005c70 <__swbuf_r+0x20>
 8005c6c:	6923      	ldr	r3, [r4, #16]
 8005c6e:	b943      	cbnz	r3, 8005c82 <__swbuf_r+0x32>
 8005c70:	4621      	mov	r1, r4
 8005c72:	4628      	mov	r0, r5
 8005c74:	f000 f82a 	bl	8005ccc <__swsetup_r>
 8005c78:	b118      	cbz	r0, 8005c82 <__swbuf_r+0x32>
 8005c7a:	f04f 37ff 	mov.w	r7, #4294967295
 8005c7e:	4638      	mov	r0, r7
 8005c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	6922      	ldr	r2, [r4, #16]
 8005c86:	1a98      	subs	r0, r3, r2
 8005c88:	6963      	ldr	r3, [r4, #20]
 8005c8a:	b2f6      	uxtb	r6, r6
 8005c8c:	4283      	cmp	r3, r0
 8005c8e:	4637      	mov	r7, r6
 8005c90:	dc05      	bgt.n	8005c9e <__swbuf_r+0x4e>
 8005c92:	4621      	mov	r1, r4
 8005c94:	4628      	mov	r0, r5
 8005c96:	f7ff ffb3 	bl	8005c00 <_fflush_r>
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	d1ed      	bne.n	8005c7a <__swbuf_r+0x2a>
 8005c9e:	68a3      	ldr	r3, [r4, #8]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	60a3      	str	r3, [r4, #8]
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	6022      	str	r2, [r4, #0]
 8005caa:	701e      	strb	r6, [r3, #0]
 8005cac:	6962      	ldr	r2, [r4, #20]
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d004      	beq.n	8005cbe <__swbuf_r+0x6e>
 8005cb4:	89a3      	ldrh	r3, [r4, #12]
 8005cb6:	07db      	lsls	r3, r3, #31
 8005cb8:	d5e1      	bpl.n	8005c7e <__swbuf_r+0x2e>
 8005cba:	2e0a      	cmp	r6, #10
 8005cbc:	d1df      	bne.n	8005c7e <__swbuf_r+0x2e>
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	f7ff ff9d 	bl	8005c00 <_fflush_r>
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	d0d9      	beq.n	8005c7e <__swbuf_r+0x2e>
 8005cca:	e7d6      	b.n	8005c7a <__swbuf_r+0x2a>

08005ccc <__swsetup_r>:
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	4b29      	ldr	r3, [pc, #164]	@ (8005d74 <__swsetup_r+0xa8>)
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	b118      	cbz	r0, 8005ce0 <__swsetup_r+0x14>
 8005cd8:	6a03      	ldr	r3, [r0, #32]
 8005cda:	b90b      	cbnz	r3, 8005ce0 <__swsetup_r+0x14>
 8005cdc:	f7fe f9f0 	bl	80040c0 <__sinit>
 8005ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ce4:	0719      	lsls	r1, r3, #28
 8005ce6:	d422      	bmi.n	8005d2e <__swsetup_r+0x62>
 8005ce8:	06da      	lsls	r2, r3, #27
 8005cea:	d407      	bmi.n	8005cfc <__swsetup_r+0x30>
 8005cec:	2209      	movs	r2, #9
 8005cee:	602a      	str	r2, [r5, #0]
 8005cf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cf4:	81a3      	strh	r3, [r4, #12]
 8005cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfa:	e033      	b.n	8005d64 <__swsetup_r+0x98>
 8005cfc:	0758      	lsls	r0, r3, #29
 8005cfe:	d512      	bpl.n	8005d26 <__swsetup_r+0x5a>
 8005d00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d02:	b141      	cbz	r1, 8005d16 <__swsetup_r+0x4a>
 8005d04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d08:	4299      	cmp	r1, r3
 8005d0a:	d002      	beq.n	8005d12 <__swsetup_r+0x46>
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f7ff f92f 	bl	8004f70 <_free_r>
 8005d12:	2300      	movs	r3, #0
 8005d14:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d16:	89a3      	ldrh	r3, [r4, #12]
 8005d18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d1c:	81a3      	strh	r3, [r4, #12]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	6063      	str	r3, [r4, #4]
 8005d22:	6923      	ldr	r3, [r4, #16]
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	f043 0308 	orr.w	r3, r3, #8
 8005d2c:	81a3      	strh	r3, [r4, #12]
 8005d2e:	6923      	ldr	r3, [r4, #16]
 8005d30:	b94b      	cbnz	r3, 8005d46 <__swsetup_r+0x7a>
 8005d32:	89a3      	ldrh	r3, [r4, #12]
 8005d34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d3c:	d003      	beq.n	8005d46 <__swsetup_r+0x7a>
 8005d3e:	4621      	mov	r1, r4
 8005d40:	4628      	mov	r0, r5
 8005d42:	f000 f8c1 	bl	8005ec8 <__smakebuf_r>
 8005d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d4a:	f013 0201 	ands.w	r2, r3, #1
 8005d4e:	d00a      	beq.n	8005d66 <__swsetup_r+0x9a>
 8005d50:	2200      	movs	r2, #0
 8005d52:	60a2      	str	r2, [r4, #8]
 8005d54:	6962      	ldr	r2, [r4, #20]
 8005d56:	4252      	negs	r2, r2
 8005d58:	61a2      	str	r2, [r4, #24]
 8005d5a:	6922      	ldr	r2, [r4, #16]
 8005d5c:	b942      	cbnz	r2, 8005d70 <__swsetup_r+0xa4>
 8005d5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d62:	d1c5      	bne.n	8005cf0 <__swsetup_r+0x24>
 8005d64:	bd38      	pop	{r3, r4, r5, pc}
 8005d66:	0799      	lsls	r1, r3, #30
 8005d68:	bf58      	it	pl
 8005d6a:	6962      	ldrpl	r2, [r4, #20]
 8005d6c:	60a2      	str	r2, [r4, #8]
 8005d6e:	e7f4      	b.n	8005d5a <__swsetup_r+0x8e>
 8005d70:	2000      	movs	r0, #0
 8005d72:	e7f7      	b.n	8005d64 <__swsetup_r+0x98>
 8005d74:	20000018 	.word	0x20000018

08005d78 <_sbrk_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4d06      	ldr	r5, [pc, #24]	@ (8005d94 <_sbrk_r+0x1c>)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4608      	mov	r0, r1
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	f7fb fcbc 	bl	8001700 <_sbrk>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d102      	bne.n	8005d92 <_sbrk_r+0x1a>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	b103      	cbz	r3, 8005d92 <_sbrk_r+0x1a>
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	200003cc 	.word	0x200003cc

08005d98 <memcpy>:
 8005d98:	440a      	add	r2, r1
 8005d9a:	4291      	cmp	r1, r2
 8005d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005da0:	d100      	bne.n	8005da4 <memcpy+0xc>
 8005da2:	4770      	bx	lr
 8005da4:	b510      	push	{r4, lr}
 8005da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005daa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dae:	4291      	cmp	r1, r2
 8005db0:	d1f9      	bne.n	8005da6 <memcpy+0xe>
 8005db2:	bd10      	pop	{r4, pc}

08005db4 <__assert_func>:
 8005db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005db6:	4614      	mov	r4, r2
 8005db8:	461a      	mov	r2, r3
 8005dba:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <__assert_func+0x2c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	68d8      	ldr	r0, [r3, #12]
 8005dc2:	b954      	cbnz	r4, 8005dda <__assert_func+0x26>
 8005dc4:	4b07      	ldr	r3, [pc, #28]	@ (8005de4 <__assert_func+0x30>)
 8005dc6:	461c      	mov	r4, r3
 8005dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005dcc:	9100      	str	r1, [sp, #0]
 8005dce:	462b      	mov	r3, r5
 8005dd0:	4905      	ldr	r1, [pc, #20]	@ (8005de8 <__assert_func+0x34>)
 8005dd2:	f000 f841 	bl	8005e58 <fiprintf>
 8005dd6:	f000 f8d5 	bl	8005f84 <abort>
 8005dda:	4b04      	ldr	r3, [pc, #16]	@ (8005dec <__assert_func+0x38>)
 8005ddc:	e7f4      	b.n	8005dc8 <__assert_func+0x14>
 8005dde:	bf00      	nop
 8005de0:	20000018 	.word	0x20000018
 8005de4:	08006336 	.word	0x08006336
 8005de8:	08006308 	.word	0x08006308
 8005dec:	080062fb 	.word	0x080062fb

08005df0 <_calloc_r>:
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	fba1 5402 	umull	r5, r4, r1, r2
 8005df6:	b93c      	cbnz	r4, 8005e08 <_calloc_r+0x18>
 8005df8:	4629      	mov	r1, r5
 8005dfa:	f7ff f92d 	bl	8005058 <_malloc_r>
 8005dfe:	4606      	mov	r6, r0
 8005e00:	b928      	cbnz	r0, 8005e0e <_calloc_r+0x1e>
 8005e02:	2600      	movs	r6, #0
 8005e04:	4630      	mov	r0, r6
 8005e06:	bd70      	pop	{r4, r5, r6, pc}
 8005e08:	220c      	movs	r2, #12
 8005e0a:	6002      	str	r2, [r0, #0]
 8005e0c:	e7f9      	b.n	8005e02 <_calloc_r+0x12>
 8005e0e:	462a      	mov	r2, r5
 8005e10:	4621      	mov	r1, r4
 8005e12:	f7fe f9e0 	bl	80041d6 <memset>
 8005e16:	e7f5      	b.n	8005e04 <_calloc_r+0x14>

08005e18 <__ascii_mbtowc>:
 8005e18:	b082      	sub	sp, #8
 8005e1a:	b901      	cbnz	r1, 8005e1e <__ascii_mbtowc+0x6>
 8005e1c:	a901      	add	r1, sp, #4
 8005e1e:	b142      	cbz	r2, 8005e32 <__ascii_mbtowc+0x1a>
 8005e20:	b14b      	cbz	r3, 8005e36 <__ascii_mbtowc+0x1e>
 8005e22:	7813      	ldrb	r3, [r2, #0]
 8005e24:	600b      	str	r3, [r1, #0]
 8005e26:	7812      	ldrb	r2, [r2, #0]
 8005e28:	1e10      	subs	r0, r2, #0
 8005e2a:	bf18      	it	ne
 8005e2c:	2001      	movne	r0, #1
 8005e2e:	b002      	add	sp, #8
 8005e30:	4770      	bx	lr
 8005e32:	4610      	mov	r0, r2
 8005e34:	e7fb      	b.n	8005e2e <__ascii_mbtowc+0x16>
 8005e36:	f06f 0001 	mvn.w	r0, #1
 8005e3a:	e7f8      	b.n	8005e2e <__ascii_mbtowc+0x16>

08005e3c <__ascii_wctomb>:
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	4608      	mov	r0, r1
 8005e40:	b141      	cbz	r1, 8005e54 <__ascii_wctomb+0x18>
 8005e42:	2aff      	cmp	r2, #255	@ 0xff
 8005e44:	d904      	bls.n	8005e50 <__ascii_wctomb+0x14>
 8005e46:	228a      	movs	r2, #138	@ 0x8a
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4e:	4770      	bx	lr
 8005e50:	700a      	strb	r2, [r1, #0]
 8005e52:	2001      	movs	r0, #1
 8005e54:	4770      	bx	lr
	...

08005e58 <fiprintf>:
 8005e58:	b40e      	push	{r1, r2, r3}
 8005e5a:	b503      	push	{r0, r1, lr}
 8005e5c:	4601      	mov	r1, r0
 8005e5e:	ab03      	add	r3, sp, #12
 8005e60:	4805      	ldr	r0, [pc, #20]	@ (8005e78 <fiprintf+0x20>)
 8005e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e66:	6800      	ldr	r0, [r0, #0]
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	f7ff fd2d 	bl	80058c8 <_vfiprintf_r>
 8005e6e:	b002      	add	sp, #8
 8005e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e74:	b003      	add	sp, #12
 8005e76:	4770      	bx	lr
 8005e78:	20000018 	.word	0x20000018

08005e7c <__swhatbuf_r>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	460c      	mov	r4, r1
 8005e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e84:	2900      	cmp	r1, #0
 8005e86:	b096      	sub	sp, #88	@ 0x58
 8005e88:	4615      	mov	r5, r2
 8005e8a:	461e      	mov	r6, r3
 8005e8c:	da0d      	bge.n	8005eaa <__swhatbuf_r+0x2e>
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e94:	f04f 0100 	mov.w	r1, #0
 8005e98:	bf14      	ite	ne
 8005e9a:	2340      	movne	r3, #64	@ 0x40
 8005e9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	6031      	str	r1, [r6, #0]
 8005ea4:	602b      	str	r3, [r5, #0]
 8005ea6:	b016      	add	sp, #88	@ 0x58
 8005ea8:	bd70      	pop	{r4, r5, r6, pc}
 8005eaa:	466a      	mov	r2, sp
 8005eac:	f000 f848 	bl	8005f40 <_fstat_r>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	dbec      	blt.n	8005e8e <__swhatbuf_r+0x12>
 8005eb4:	9901      	ldr	r1, [sp, #4]
 8005eb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005eba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005ebe:	4259      	negs	r1, r3
 8005ec0:	4159      	adcs	r1, r3
 8005ec2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ec6:	e7eb      	b.n	8005ea0 <__swhatbuf_r+0x24>

08005ec8 <__smakebuf_r>:
 8005ec8:	898b      	ldrh	r3, [r1, #12]
 8005eca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ecc:	079d      	lsls	r5, r3, #30
 8005ece:	4606      	mov	r6, r0
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	d507      	bpl.n	8005ee4 <__smakebuf_r+0x1c>
 8005ed4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	6123      	str	r3, [r4, #16]
 8005edc:	2301      	movs	r3, #1
 8005ede:	6163      	str	r3, [r4, #20]
 8005ee0:	b003      	add	sp, #12
 8005ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee4:	ab01      	add	r3, sp, #4
 8005ee6:	466a      	mov	r2, sp
 8005ee8:	f7ff ffc8 	bl	8005e7c <__swhatbuf_r>
 8005eec:	9f00      	ldr	r7, [sp, #0]
 8005eee:	4605      	mov	r5, r0
 8005ef0:	4639      	mov	r1, r7
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f7ff f8b0 	bl	8005058 <_malloc_r>
 8005ef8:	b948      	cbnz	r0, 8005f0e <__smakebuf_r+0x46>
 8005efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005efe:	059a      	lsls	r2, r3, #22
 8005f00:	d4ee      	bmi.n	8005ee0 <__smakebuf_r+0x18>
 8005f02:	f023 0303 	bic.w	r3, r3, #3
 8005f06:	f043 0302 	orr.w	r3, r3, #2
 8005f0a:	81a3      	strh	r3, [r4, #12]
 8005f0c:	e7e2      	b.n	8005ed4 <__smakebuf_r+0xc>
 8005f0e:	89a3      	ldrh	r3, [r4, #12]
 8005f10:	6020      	str	r0, [r4, #0]
 8005f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f16:	81a3      	strh	r3, [r4, #12]
 8005f18:	9b01      	ldr	r3, [sp, #4]
 8005f1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005f1e:	b15b      	cbz	r3, 8005f38 <__smakebuf_r+0x70>
 8005f20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f24:	4630      	mov	r0, r6
 8005f26:	f000 f81d 	bl	8005f64 <_isatty_r>
 8005f2a:	b128      	cbz	r0, 8005f38 <__smakebuf_r+0x70>
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	f023 0303 	bic.w	r3, r3, #3
 8005f32:	f043 0301 	orr.w	r3, r3, #1
 8005f36:	81a3      	strh	r3, [r4, #12]
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	431d      	orrs	r5, r3
 8005f3c:	81a5      	strh	r5, [r4, #12]
 8005f3e:	e7cf      	b.n	8005ee0 <__smakebuf_r+0x18>

08005f40 <_fstat_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4d07      	ldr	r5, [pc, #28]	@ (8005f60 <_fstat_r+0x20>)
 8005f44:	2300      	movs	r3, #0
 8005f46:	4604      	mov	r4, r0
 8005f48:	4608      	mov	r0, r1
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	602b      	str	r3, [r5, #0]
 8005f4e:	f7fb fbaf 	bl	80016b0 <_fstat>
 8005f52:	1c43      	adds	r3, r0, #1
 8005f54:	d102      	bne.n	8005f5c <_fstat_r+0x1c>
 8005f56:	682b      	ldr	r3, [r5, #0]
 8005f58:	b103      	cbz	r3, 8005f5c <_fstat_r+0x1c>
 8005f5a:	6023      	str	r3, [r4, #0]
 8005f5c:	bd38      	pop	{r3, r4, r5, pc}
 8005f5e:	bf00      	nop
 8005f60:	200003cc 	.word	0x200003cc

08005f64 <_isatty_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4d06      	ldr	r5, [pc, #24]	@ (8005f80 <_isatty_r+0x1c>)
 8005f68:	2300      	movs	r3, #0
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	4608      	mov	r0, r1
 8005f6e:	602b      	str	r3, [r5, #0]
 8005f70:	f7fb fbae 	bl	80016d0 <_isatty>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	d102      	bne.n	8005f7e <_isatty_r+0x1a>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	b103      	cbz	r3, 8005f7e <_isatty_r+0x1a>
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}
 8005f80:	200003cc 	.word	0x200003cc

08005f84 <abort>:
 8005f84:	b508      	push	{r3, lr}
 8005f86:	2006      	movs	r0, #6
 8005f88:	f000 f82c 	bl	8005fe4 <raise>
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	f7fb fb3f 	bl	8001610 <_exit>

08005f92 <_raise_r>:
 8005f92:	291f      	cmp	r1, #31
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	4605      	mov	r5, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	d904      	bls.n	8005fa6 <_raise_r+0x14>
 8005f9c:	2316      	movs	r3, #22
 8005f9e:	6003      	str	r3, [r0, #0]
 8005fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa4:	bd38      	pop	{r3, r4, r5, pc}
 8005fa6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005fa8:	b112      	cbz	r2, 8005fb0 <_raise_r+0x1e>
 8005faa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fae:	b94b      	cbnz	r3, 8005fc4 <_raise_r+0x32>
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	f000 f831 	bl	8006018 <_getpid_r>
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	4601      	mov	r1, r0
 8005fba:	4628      	mov	r0, r5
 8005fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fc0:	f000 b818 	b.w	8005ff4 <_kill_r>
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d00a      	beq.n	8005fde <_raise_r+0x4c>
 8005fc8:	1c59      	adds	r1, r3, #1
 8005fca:	d103      	bne.n	8005fd4 <_raise_r+0x42>
 8005fcc:	2316      	movs	r3, #22
 8005fce:	6003      	str	r3, [r0, #0]
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	e7e7      	b.n	8005fa4 <_raise_r+0x12>
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005fda:	4620      	mov	r0, r4
 8005fdc:	4798      	blx	r3
 8005fde:	2000      	movs	r0, #0
 8005fe0:	e7e0      	b.n	8005fa4 <_raise_r+0x12>
	...

08005fe4 <raise>:
 8005fe4:	4b02      	ldr	r3, [pc, #8]	@ (8005ff0 <raise+0xc>)
 8005fe6:	4601      	mov	r1, r0
 8005fe8:	6818      	ldr	r0, [r3, #0]
 8005fea:	f7ff bfd2 	b.w	8005f92 <_raise_r>
 8005fee:	bf00      	nop
 8005ff0:	20000018 	.word	0x20000018

08005ff4 <_kill_r>:
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	4d07      	ldr	r5, [pc, #28]	@ (8006014 <_kill_r+0x20>)
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	4608      	mov	r0, r1
 8005ffe:	4611      	mov	r1, r2
 8006000:	602b      	str	r3, [r5, #0]
 8006002:	f7fb faf5 	bl	80015f0 <_kill>
 8006006:	1c43      	adds	r3, r0, #1
 8006008:	d102      	bne.n	8006010 <_kill_r+0x1c>
 800600a:	682b      	ldr	r3, [r5, #0]
 800600c:	b103      	cbz	r3, 8006010 <_kill_r+0x1c>
 800600e:	6023      	str	r3, [r4, #0]
 8006010:	bd38      	pop	{r3, r4, r5, pc}
 8006012:	bf00      	nop
 8006014:	200003cc 	.word	0x200003cc

08006018 <_getpid_r>:
 8006018:	f7fb bae2 	b.w	80015e0 <_getpid>

0800601c <_init>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	bf00      	nop
 8006020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006022:	bc08      	pop	{r3}
 8006024:	469e      	mov	lr, r3
 8006026:	4770      	bx	lr

08006028 <_fini>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	bf00      	nop
 800602c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602e:	bc08      	pop	{r3}
 8006030:	469e      	mov	lr, r3
 8006032:	4770      	bx	lr
